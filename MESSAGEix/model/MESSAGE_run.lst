GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 1
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


   2  $ONDOLLAR
   3  $ONTEXT
       
         Copyright 2017 IIASA Energy Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system optimization model MESSAGEix
      For the most recent version of this code, please visit https://github.com/iiasa/message_ix.
      For a comprehensive documentation of the MESSAGEix framework and the ix modeling platform,
      please visit http://www.iiasa.ac.at/message_ix/.
       
      Please cite as:
       
          Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp,
          Clara Orthofer, Michael Pimmer, Keywan Riahi, and Volker Krey.
          The MESSAGEix Integrated Assessment model and the ix modeling platform.
          in preparation.
       
  31  $OFFTEXT
  32   
  33  ***
  34  * Run script for |MESSAGEix| (stand-alone)
  35  * ========================================
  36  * This page is generated from the auto-documentation in ``model/MESSAGE_run.gms``.
  37  *
  38  * This is |MESSAGEix| version |version|. The version number must match the version number
  39  * of the ``ixmp`` ``MESSAGE``-scheme specifications used for exporting data and importing results.
  40  *
  41  * This file contains the workflow of a |MESSAGEix|-standalone run. It can be called:
  42  *  - Via the scientific programming API's using the packages/libraries ``ixmp`` and ``message_ix``,
  43  *    calling the method ``solve()`` of the ``ixmp``.Scenario class (see the tutorials).
  44  *  - using the file ``MESSAGE_master.gms`` with the option ``$SETGLOBAL macromode "none"``,
  45  *    where the input data file name and other options are stated explicitly, or
  46  *  - directly from the command line, with the input data file name
  47  *    and other options specific as command line parameters, e.g.
  48  *
  49  *    ``gams MESSAGE_run.gms --in="<data-file>" [--out="<output-file>"]``
  50  *
  51  * By default, the data file (in gdx format) should be located in the ``model/data`` folder
  52  * and be named in the format ``MsgData_<name>.gdx``. Upon completion of the GAMS execution,
  53  * a results file ``<output-file>`` will be written
  54  * (or ``model\output\MsgOutput.gdx`` if ``--out`` is not provided).
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 2
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


  55  ***
  56   
  57  $EOLCOM #
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_setup.gms
  58  $INCLUDE MESSAGE/model_setup.gms
  59  *----------------------------------------------------------------------------------------------------------------------*
  60  * sanity check of model run parameters, set defaults if not specified                                                  *
  61  *----------------------------------------------------------------------------------------------------------------------*
  62   
  63  * set # as end-of-line comment; all text after # is ignored
  64  * (for proper display in GAMS IDE, this needs to be specified in the options, too)
  65   
  66  *----------------------------------------------------------------------------------------------------------------------*
  67  * sanity check of model run parameters, set defaults if not specified                                                  *
  68  *----------------------------------------------------------------------------------------------------------------------*
  69   
  70  * a datastructure name is mandatory to load the gdx file - abort the run if not specified or file does not exist
  71  $IF NOT SET in       $ABORT "no input data file provided!"
  72  $IF NOT EXIST 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx' $ABORT "input GDX file 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx' does not exist!"
  73  $SETGLOBAL iter "output/MsgIterationReport"
  74  $IF NOT SET out      $SETGLOBAL out "output/MsgOutput.gdx"
  75   
  76  ** define the time horizon over which the model optimizes (perfect foresight, myopic or rolling horizon) **
  77  * perfect foresight - 0 (assumed as default if not specified
  78  * myopic optimization (period-by-period, recursive-dynamic without any foresight) - 1
  79  * rolling horizon (period-by-period, recursive-dynamic with limited foresight - 'number of years of foresight'
  80  $SETGLOBAL foresight "0"
  81   
  82  ** specify optional additional calibration output **
  83  $SETGLOBAL calibration ""
  84  * mark with * to include detailed calibration information in outputs and get an extended GAMS listing (.lst) file
  85   
  86  ** debugging mode settings for support and assistance during model development and calibration **
  87  * assume that all debugging options are deactivated by default
  88  * mark as "*" to deactivate, mark as "" to activate
  89   
  90  * set auxiliary upper and lower bounds on the actitivity variables to prevent unbounded models
  91  $SETGLOBAL AUX_BOUNDS "*"
  92  $SETGLOBAL AUX_BOUND_VALUE "1e9"
  93   
  94  * include relaxations for specific constraint blocks to identify infeasibilities during model development/calibration
  95  * by adding 'slack' variables in the constraints and associated penalty factors in the objective function
  96  $SETGLOBAL SLACK_COMMODITY_BALANCE "*"
  97  $SETGLOBAL SLACK_FULL_COMMODITY_BALANCE "*"
  98   
  99  $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
 100  $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
 101  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
 102  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
 103  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
 104  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
 105   
 106  $SETGLOBAL SLACK_ACT_BOUND_UP "*"
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 3
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 107  $SETGLOBAL SLACK_ACT_BOUND_LO "*"
 108  $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
 109  $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
 110   
 111  $SETGLOBAL SLACK_LAND_SCEN_UP "*"
 112  $SETGLOBAL SLACK_LAND_SCEN_LO "*"
 113  $SETGLOBAL SLACK_LAND_TYPE_UP "*"
 114  $SETGLOBAL SLACK_LAND_TYPE_LO "*"
 115   
 116  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
 117  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 118   
 119  *----------------------------------------------------------------------------------------------------------------------*
 120  * initialize sets, mappings, parameters, load data, do pre-processing                                                  *
 121  *----------------------------------------------------------------------------------------------------------------------*
 122   
 123  ** load auxiliary settings from include file (solver options, resource/time limits, prefered solvers) **
 124  * recommended only for advanced users
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/auxiliary_settings.gms
 125  $INCLUDE MESSAGE/auxiliary_settings.gms
 126  *----------------------------------------------------------------------------------------------------------------------*
 127  * auxiliary settings and defintions                                                                                    *
 128  *----------------------------------------------------------------------------------------------------------------------*
 129   
 130  * initialise logfile settings - this allows to write status messages to the logfile
 131  file logfile / '' / ;
 132  put logfile ;
 133   
 134  * get yourself a short listing file
 135  option limrow = 0 ;     # number of rows (equations) reported in lst file
 136  option limcol = 0 ;     # number of columns reported in lst file
 137  option solprint = off ; # solver's solution output printed
 138  option savepoint = 0 ;  # creates a result gdx file after every solve
 139  * this is done manually in this code to have the database name in the gdx file name and to save the file in a sub-folder
 140   
 141  option ITERLIM = 1e8 ;  # iteration limit
 142  option RESLIM = 1e6 ;   # resource limit (in seconds; 1e6 is approximately 11 days)
 143  * solver comments for QCP and PATH:
 144  * - GUROBI, CPLEX and MINOS are fast
 145  * - CONOPT is slower, but (in non-linear problems) usually more helpful to identify the feasibility problems
 146  * general comment: sometimes, first using one solver and then another (using the previous solution as starting point)
 147  * helps even if the previous run did not solve to optimality
 148  option LP = CPLEX ;
 149  option NLP = CONOPT ;
 150  option MCP = PATH ;
 151   
 152  *option solveopt=clear ;# remove results of previous runs in memory
 153  option solveopt=merge ; # keep results of previous runs in memory
 154  $SETENV GdxCompress 1   # reduces the size of the gdx export file
 155   
 156  $ONTEXT
      $ONLISTING
      option limrow = 1e6 ;   # number of rows (equations) reported in lst file
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 4
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


      option limcol = 1e6 ;   # number of columns reported in lst file
      option solprint = on ;  # solver's solution output printed
      $ONTEXT
 162  $OFFTEXT
 163   
 164  * check that the version of MESSAGEix and the ixToolbox used for exporting the data to gdx match
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\version.gms
 165  $INCLUDE version.gms
 166  * This file specifies the release version number of MESSAGEix.
 167  * The version number must match the MESSAGEix-scheme version number
 168  * in the compiled `ixmp.jar`.
 169   
 170  * !!! DO NOT CHANGE VALUES IN THIS FILE MANUALLY !!!
 171   
 172  * Changes have to be done by pulling the respective version
 173  * from the Github repository at https://github.com/iiasa/message_ix,
 174  * or by updating the `message_ix` package
 175  * using `conda update -c conda-forge message-ix`.
 176   
 177  $SETGLOBAL VERSION_MAJOR "1"
 178  $SETGLOBAL VERSION_MINOR "0"
 179  $SETGLOBAL VERSION_MICRO "0"
 180   
 181  * This file is imported by `message_ix/__init__.py`.
 182  * In the documentation rst files, the tag ``|version|`` in any mark-up docstring
 183  * is replaced by '%VERSION_MAJOR%.%VERSION_MINOR%'.
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/version_check.gms
 184  $INCLUDE MESSAGE/version_check.gms
 185   
 186  *----------------------------------------------------------------------------------------------------------------------*
 187  * load ixmp MESSAGE-scheme version number from the input gdx and check whether it matches the MESSAGEix version number *
 188  *----------------------------------------------------------------------------------------------------------------------*
 189   
 190  Parameter MESSAGE_ix_version(*);
 191   
GDXIN   C:\Users\vinca\Documents\Github\indus_ix\model\data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx
 192  $GDXIN 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx'
--- LOAD  MESSAGE_ix_version = 101:MESSAGE_ix_version
 193  $LOAD MESSAGE_IX_version
 194  $GDXIN
 195   
 196  IF ( NOT ( MESSAGE_IX_version("major") = 1 AND MESSAGE_IX_version("minor") = 0 ),
 197      put_utility 'log' / '***';
 198      put_utility 'log' / '*** Abort "The MESSAGEix version and the MESSAGE-scheme definition in the installed ixmp package do not match!"';
 199      put_utility 'log' / '***';
 200      abort "Incompatible versions of MESSAGEix and ixmp";
 201  ) ;
 202   
 203  ** initialize sets, mappings, parameters
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/sets_maps_def.gms
 204  $INCLUDE MESSAGE/sets_maps_def.gms
 205  ***
 206  * .. _sets_maps_def:
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 5
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 207  *
 208  * Sets and mappings definition
 209  * =============================
 210  * This page is generated from the auto-documentation in ``MESSAGE/sets_maps_def.gms``.
 211  *
 212  * This file contains the definition of all sets and mappings used in |MESSAGEix|.
 213  ***
 214   
 215  * indices to mapping sets will always be in the following order:
 216  * lvl_spatial, lvl_temporal,
 217  * node_location, tec, year_vintage, year_actual, mode, commodity, level, grade,
 218  * node_origin/destination, emission, time_actual), time_origin/destination, rating
 219   
 220  * allows sets to be empty
 221  $ONEMPTY
 222   
 223  *----------------------------------------------------------------------------------------------------------------------*
 224  * Set definitions                                                                                                      *
 225  *----------------------------------------------------------------------------------------------------------------------*
 226   
 227  ***
 228  * Sets in the |MESSAGEix| implementation
 229  * --------------------------------------
 230  *
 231  * .. list-table::
 232  *    :widths: 20 12 68
 233  *    :header-rows: 1
 234  *
 235  *    * - Set name
 236  *      - Notation
 237  *      - Explanatory comments
 238  *    * - node [#node]_
 239  *      - :math:`n \in N`
 240  *      - regions, countries, grid cells
 241  *    * - commodity
 242  *      - :math:`c \in C`
 243  *      - resources, electricity, water, land availability, etc.
 244  *    * - level
 245  *      - :math:`l \in L`
 246  *      - levels of the reference energy system or supply chain (primary, secondary, ... , useful)
 247  *    * - grade
 248  *      - :math:`g \in G`
 249  *      - grades of resource quality in the extraction & mining sector
 250  *    * - technology [tec]
 251  *      - :math:`t \in T`
 252  *      - | technologies that use input commodities to produce outputs;
 253  *        | the short-hand notation "tec" is used in the GAMS implementation
 254  *    * - mode [#mode]_
 255  *      - :math:`m \in M`
 256  *      - modes of operation for specific technologies
 257  *    * - emission
 258  *      - :math:`e \in E`
 259  *      - greenhouse gases, pollutants, etc.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 6
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 260  *    * - land_scenario
 261  *      - :math:`s \in S`
 262  *      - scenarios of land use (for land-use model emulator)
 263  *    * - land_type
 264  *      - :math:`u \in U`
 265  *      - land-use types (e.g., field, forest, pasture)
 266  *    * - year [year_all] [#year_all]_ [#period_year]_
 267  *      - :math:`y \in Y`
 268  *      - model horizon (including historical periods for vintage structure of installed capacity
 269  *        and dynamic constraints)
 270  *    * - time [#time]_
 271  *      - :math:`h \in H`
 272  *      - subannual time periods (seasons, days, hours)
 273  *    * - relation [#relations]_
 274  *      - :math:`r \in R`
 275  *      - set of generic linear constraints
 276  *    * - rating
 277  *      - :math:`q \in Q`
 278  *      - identifies the 'quality' of the renewable energy potential
 279  *    * - lvl_spatial
 280  *      -
 281  *      - set of spatial hierarchy levels (global, region, country, grid cell)
 282  *    * - lvl_temporal
 283  *      -
 284  *      - set of temporal hierarchy levels (year, season, day, hour)
 285  *
 286  * .. [#node] The set ``node`` includes spatial units across all levels of spatial disaggregation
 287  *    (global, regions, countries, basins, grid cells).
 288  *    The hierarchical mapping is implemented via the mapping set ``map_spatial_hierarchy``.
 289  *    This set always includes an element 'World' when initializing a ``MESSAGE``-scheme ``ixmp``.Scenario.
 290  *
 291  * .. [#mode] For example, high electricity or high heat production modes of operation for combined heat and power plants.
 292  *
 293  * .. [#year_all] In the |MESSAGEix| implementation in GAMS, the set ``year_all`` denotes the "superset"
 294  *    of the entire horizon (historical and model horizon), and the set ``year`` is a dynamic subset of ``year_all``.
 295  *    This facilitates an efficient implementation of the historical capacity build-up and
 296  *    the (optional) recursive-dynamic solution approach.
 297  *    When working with a ``MESSAGE``-scheme ``ixmp``.Scenario via the API, the set of all periods is called ``year``
 298  *    for a more concise notation.
 299  *    The specification of the model horizon is implemented using the mapping set ``cat_year``
 300  *    and the type "firstmodelyear".
 301  *
 302  * .. _period_year_footnote:
 303  *
 304  * .. [#period_year] In |MESSAGEix|, the key of an element in set ``year`` identifies *the last year* of the period,
 305  *    i.e., in a set :math:`year = [2000, 2005, 2010, 2015]`,
 306  *    the period '2010' comprises the years :math:`[2006, .. ,2010]`.
 307  *
 308  * .. [#time] The set ``time`` collects all sub-annual temporal units across all levels of temporal disaggregation.
 309  *    In a ``MESSAGE``-scheme ``ixmp``.Scenario, this set always includes an element "year",
 310  *    and the duration of that element is 1 (:math:`duration\_time_{'year'} = 1`).
 311  *
 312  * .. [#relations] A generic formulation of linear constraints is implemented in |MESSAGEix|, see :ref:`section_of_generic_relations`.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 7
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 313  *    This feature can be used for testing and development, but specific new use cases should be implemented
 314  *    by specific equations and parameters.
 315  ***
 316   
 317  Sets
 318      node            world - regions - countries - grid cells
 319      commodity       resources - electricity - water - land availability - etc.
 320      level           levels of the reference energy system or supply chain ( primary - secondary - ... - useful )
 321      sector          sectors (for integration with MACRO)
 322      grade           grades of extraction of raw materials
 323      tec             technologies
 324      mode            modes of operation
 325      emission        greenhouse gases - pollutants - etc.
 326      land_scenario   scenarios of land use (for land-use model emulator)
 327      land_type       types of land use
 328      year_all        years (over entire model horizon)
 329      year (year_all) years included in a model instance (for myopic or rolling-horizon optimization)
 330      time            subannual time periods (seasons - days - hours)
 331      shares          share constraint relations
 332      relation        generic linear relations
 333      lvl_spatial     hierarchical levels of spatial resolution
 334      lvl_temporal    hierarchical levels of temporal resolution
 335      rating          identifies the 'quality' of the renewable energy potential (bins acc. to Sullivan)
 336  ;
 337   
 338  * definition of aliases
 339  Alias(node,location);
 340  Alias(node,subnode);
 341  Alias(node,node2);
 342  Alias(node,node_share);
 343  Alias(node,node3);
 344  Alias(tec,tec2);
 345  Alias(commodity,commodity2);
 346  Alias(level,level2);
 347  Alias(emission,emission2);
 348  Alias(year_all,vintage);
 349  Alias(year_all,year_all2);
 350  Alias(year_all,year_all3);
 351  Alias(year,year2);
 352  Alias(year,year3);
 353  Alias(time,time2);
 354  Alias(time,time_act);
 355  Alias(time,time_od);
 356   
 357  *----------------------------------------------------------------------------------------------------------------------*
 358  * Category types and mappings                                                                                                       *
 359  *----------------------------------------------------------------------------------------------------------------------*
 360   
 361  ***
 362  * Category types and mappings
 363  * ---------------------------
 364  *
 365  * This feature is used to easily implement aggregation across groups of set elements.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 8
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 366  * For example, by setting an upper bound over an emission type, the constraint enforces
 367  * that the sum over all emission species mapped to that type via the mapping set ``cat_emission``
 368  * satisfies that upper bound.
 369  *
 370  * .. list-table::
 371  *    :widths: 25 15 60
 372  *    :header-rows: 1
 373  *
 374  *    * - Set name
 375  *      - Notation
 376  *      - Explanatory comments
 377  *    * - level_resource (level) [#level_res]_
 378  *      - :math:`l \in L^{RES} \subseteq L`
 379  *      - levels related to `fossil resources` representation
 380  *    * - level_renewable (level) [#level_res]_
 381  *      - :math:`l \in L^{REN} \subseteq L`
 382  *      - levels related to `renewables` representation
 383  *    * - type_node [#type_node]_
 384  *      - :math:`\widehat{n} \in \widehat{N}`
 385  *      - Category types for nodes
 386  *    * - cat_node (type_node,node)
 387  *      - :math:`n \in N(\widehat{n})`
 388  *      - Category mapping between node types and nodes
 389  *    * - type_tec [#type_tec]_
 390  *      - :math:`\widehat{t} \in \widehat{T}`
 391  *      - Category types for technologies
 392  *    * - cat_tec (type_tec,tec)
 393  *      - :math:`t \in T(\widehat{t})`
 394  *      - Category mapping between tec types and technologies
 395  *    * - inv_tec (tec) [#inv_tec]_
 396  *      - :math:`t \in T^{INV} \subseteq T`
 397  *      - Specific subset of investment technologies
 398  *    * - renewable_tec (tec) [#renewable_tec]_
 399  *      - :math:`t \in T^{REN} \subseteq T`
 400  *      - Specific subset of renewable-energy technologies
 401  *    * - type_emission
 402  *      - :math:`\widehat{e} \in \widehat{E}`
 403  *      - Category types for emissions (greenhouse gases, pollutants, etc.)
 404  *    * - cat_emission (type_emission,emission)
 405  *      - :math:`e \in E(\widehat{e})`
 406  *      - Category mapping between emission types and emissions
 407  *    * - type_tec_land (type_tec) [#type_tec_land]_
 408  *      - :math:`\widehat{t} \in \widehat{T}^{LAND} \subseteq \widehat{T}`
 409  *      - Mapping set of technology types and land use
 410  *
 411  * .. [#level_res] The constraint ``EXTRACTION_EQUIVALENCE`` is active only for the levels included in this set,
 412  *    and the constraint ``COMMODITY_BALANCE`` is deactivated for these levels.
 413  *
 414  * .. [#type_node] The element "economy" is added by default as part of the ``MESSAGE``-scheme ``ixmp``.Scenario.
 415  *
 416  * .. [#type_tec] The element "all" in ``type_tec`` and the associated mapping to all technologies in the set ``cat_tec``
 417  *    are added by default as part of the ``MESSAGE``-scheme ``ixmp``.Scenario.
 418  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/09/19 17:25:00 Page 9
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 419  * .. [#inv_tec] The auxiliary set ``inv_tec`` (subset of ``technology``) is a short-hand notation for all technologies
 420  *    with defined investment costs. This activates the investment cost part in the objective function and the
 421  *    constraints for all technologies where investment decisions are relevant.
 422  *    It is added by default when exporting ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 423  *
 424  * .. [#renewable_tec] The auxiliary set ``renewable_tec`` (subset of ``technology``) is a short-hand notation
 425  *    for all technologies with defined parameters relevant for the equations in the "Renewable" section.
 426  *    It is added by default when exporting ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 427  *
 428  * .. [#type_tec_land] The mapping set ``type_tec_land`` is a dynamic subset of ``type_tec`` and specifies whether
 429  *    emissions from the land-use model emulator module are included when aggregrating over a specific technology type.
 430  *    The element "all" is added by default in a ``MESSAGE``-scheme ``ixmp``.Scenario.
 431  ***
 432   
 433  * category types and mappings
 434  Sets
 435      type_node                               types of nodes
 436      cat_node(type_node,node)                mapping of nodes to respective categories
 437      type_tec                                types of technologies
 438      cat_tec(type_tec,tec)                   mapping of technologies to respective categories
 439      inv_tec(tec)                            technologies that have explicit investment and capacity decision variables
 440      type_year                               types of year aggregations
 441      cat_year(type_year,year_all)            mapping of years to respective categories
 442      type_emission                           types of emission aggregations
 443      cat_emission(type_emission,emission)    mapping of emissions to respective categories
 444      full_balance(commodity)                 for full commodity balance
 445  ;
 446   
 447  Alias(type_tec,type_tec_share);
 448  Alias(type_tec,type_tec_total);
 449   
 450  *----------------------------------------------------------------------------------------------------------------------*
 451  * Mapping sets                                                                                                         *
 452  *----------------------------------------------------------------------------------------------------------------------*
 453   
 454  ***
 455  * Mappings sets
 456  * -------------
 457  *
 458  * These sets are generated automatically when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx using the API.
 459  * They are used in the GAMS model to reduce model size by excluding non-relevant variables and equations
 460  * (e.g., actitivity of a technology outside of its technical lifetime).
 461  *
 462  * .. list-table::
 463  *    :widths: 25 15 60
 464  *    :header-rows: 1
 465  *
 466  *    * - Set name
 467  *      - Notation
 468  *      - Explanatory comments
 469  *    * - map_node(node,location)
 470  *      -
 471  *      - mapping of nodes across hierarchy levels (location is in node)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 10
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 472  ***
 473   
 474  Sets
 475      map_node(node,location)                     mapping of nodes across hierarchy levels (location is in node)
 476      map_time(time,time2)                        mapping of time periods across hierarchy levels (time2 is in time)
 477   
 478      map_rating(node,tec,commodity,level,rating,year_all) mapping of technologues to ratings bin assignment
 479   
 480      map_commodity(node,commodity,level,year_all,time)    mapping of commodity-level to node and time
 481      map_stocks(node,commodity,level,year_all)    mapping of commodity-level to node and time
 482      map_storage(node,commodity,level,year_all,time)   mapping of commodity-level to node and time
 483   
 484      map_tec(node,tec,year_all)                   mapping of technology to node and years
 485      map_tec_time(node,tec,year_all,time)         mapping of technology to temporal dissagregation (time)
 486      map_tec_mode(node,tec,year_all,mode)         mapping of technology to modes
 487      map_tec_act(node,tec,year_all,mode,time)     mapping of technology to modes AND temporal dissagregation
 488   
 489      map_spatial_hierarchy(lvl_spatial,node,node)    mapping of spatial resolution to nodes (last index is 'parent')
 490      map_temporal_hierarchy(lvl_temporal,time,time)  mapping of temporal resolution to time (last index is 'parent')
 491   
 492      map_shares_commodity_share(shares,node,
 493          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (numerator)
 494      map_shares_commodity_total(shares,node,
 495          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (denominator)
 496   
 497  ;
 498   
 499  * additional sets created in GAMS to make notation more concise
 500  Sets
 501      map_tec_lifetime(node,tec,vintage,year_all)  mapping of technologies to periods within technical lifetime
 502  ;
 503   
 504  *----------------------------------------------------------------------------------------------------------------------*
 505  * Mapping sets (flags) for bounds                                                                                             *
 506  *----------------------------------------------------------------------------------------------------------------------*
 507   
 508  ***
 509  * Mapping sets (flags) for bounds
 510  * -------------------------------
 511  *
 512  * There are a number of mappings sets generated when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 513  * They are used as 'flags' to indicate whether a constraint is active.
 514  * The names of these sets follow the format ``is_<constraint>_<dir>``.
 515  *
 516  * Such mapping sets are necessary because GAMS does not distinguish between 0 and 'no value assigned',
 517  * i.e., it cannot differentiate between a bound of 0 and 'no bound assigned'.
 518  ***
 519   
 520  Sets
 521      is_bound_extraction_up(node,commodity,grade,year_all) flag whether upper bound exists for extraction of commodity
 522      is_bound_new_capacity_up(node,tec,year_all)      flag whether upper bound exists for new capacity
 523      is_bound_new_capacity_lo(node,tec,year_all)      flag whether lower bound exists for new capacity
 524      is_bound_total_capacity_up(node,tec,year_all)    flag whether upper bound exists for total installed capacity
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 11
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 525      is_bound_total_capacity_lo(node,tec,year_all)    flag whether lower bound exists for total installed capacity
 526      is_bound_activity_up(node,tec,year_all,mode,time) flag whether upper bound exists for a technology activity
 527  *   is_bound_activity_lo(node,tec,year_all,mode,time) flag whether lower bound exists for a technology activity
 528  * this last flag is not required because the lower bound defaults to zero unless explicitly specified otherwise
 529   
 530      is_dynamic_new_capacity_up(node,tec,year_all)    flag whether upper dynamic constraint exists for new capacity (investment)
 531      is_dynamic_new_capacity_lo(node,tec,year_all)    flag whether lower dynamic constraint exists for new capacity (investment)
 532      is_dynamic_activity_up(node,tec,year_all,time)   flag whether upper dynamic constraint exists for a technology (activity)
 533      is_dynamic_activity_lo(node,tec,year_all,time)   flag whether lower dynamic constraint exists for a technology (activity)
 534   
 535      is_bound_emission(node,type_emission,type_tec,type_year) flag whether emissions bound exists
 536  ;
 537   
 538  *----------------------------------------------------------------------------------------------------------------------*
 539  * Mapping sets (flags) for fixed variables                                                                             *
 540  *----------------------------------------------------------------------------------------------------------------------*
 541   
 542  ***
 543  * Mapping sets (flags) for fixed variables
 544  * ----------------------------------------
 545  *
 546  * Similar to the mapping sets for bounds, there are mapping sets to indicate whether decision variables
 547  * are pre-defined to a specific value, usually taken from a solution of another model instance.
 548  * This can be used to represent imperfect foresight where a policy shift or parameter change is introduced in later years.
 549  * The names of these sets follow the format ``is_fixed_<variable>``.
 550  ***
 551   
 552  Sets
 553      is_fixed_stock(node,commodity,level,year_all)          flag whether stock variable is fixed
 554      is_fixed_storage(node,commodity,level,year_all,time)   flag whether storage variable is fixed
 555      is_fixed_new_capacity(node,tec,year_all)               flag whether new capacity variable is fixed
 556      is_fixed_capacity(node,tec,vintage,year_all)           flag whether maintained capacity variable is fixed
 557      is_fixed_activity(node,tec,vintage,year_all,mode,time) flag whether activity variable is fixed
 558  ;
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/parameter_def.gms
 559  $INCLUDE MESSAGE/parameter_def.gms
 560  ***
 561  * .. _parameter_def:
 562  *
 563  * Parameter definition
 564  * ====================
 565  * This page is generated from the auto-documentation in ``MESSAGE/parameter_def.gms``.
 566  *
 567  * This file contains the definition of all parameters used in |MESSAGEix|.
 568  *
 569  * In |MESSAGEix|, all parameters are understood as yearly values, not as per (multi-year) period.
 570  * This provides flexibility when changing the resolution of the model horizon (i.e., the set ``year``).
 571  *
 572  * Parameters written in *italics* are auxiliary parameters
 573  * that are either generated automatically when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx
 574  * or that are computed during the pre-processing stage in GAMS.
 575  ***
 576   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 12
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 577  ***
 578  * General parameters of the |MESSAGEix| implementation
 579  * ----------------------------------------------------
 580  *
 581  * .. list-table::
 582  *    :widths: 25 20 55
 583  *    :header-rows: 1
 584  *
 585  *    * - Parameter name
 586  *      - Index dimensions
 587  *      - Explanatory comments
 588  *    * - *duration_period* (:math:`|y|`) [#short_dur]_
 589  *      - ``year``
 590  *      - duration of multi-year period (in number of years) [#year_auto]_
 591  *    * - duration_time
 592  *      - ``time``
 593  *      - duration of sub-annual time slices (relative to 1) [#duration_time_year]_
 594  *    * - *duration_time_rel*
 595  *      - ``time`` | ``time``
 596  *      - relative duration between sub-annual time slices [#df_auto]_
 597  *    * - interestrate
 598  *      - ``year``
 599  *      - economy-wide interest rate or social discount rate
 600  *    * - *discountfactor*
 601  *      - ``year``
 602  *      -  cumulative discount factor over period duration [#df_auto]_
 603  *
 604  * .. [#short_dur] The short-hand notation :math:`|y|` is used for the parameters :math:`duration\_period_y`
 605  *    in the mathematical model documentation for exponents.
 606  *
 607  * .. [#year_auto] The values for this parameter are computed automatically when exporting a ``MESSAGE``-scheme
 608  *    ``ixmp``.Scenario to gdx.
 609  *    Note that in |MESSAGEix|, the elements of the ``year`` set are understood to be the last year in a period,
 610  *    see :ref:`this footnote <period_year_footnote>`.
 611  *
 612  * .. [#duration_time_year] The element 'year' in the set of subannual time slices ``time`` has the value of 1.
 613  *    This value is assigned by default when creating a new ``ixmp``.Scenario based on the ``MESSAGE`` scheme.
 614  *
 615  * .. [#df_auto] This parameter is computed during the GAMS execution.
 616  ***
 617   
 618  Parameters
 619  * general parameters
 620      duration_period(year_all)      duration of one multi-year period (in years)
 621      duration_time(time)            duration of one time slice (relative to 1)
 622      duration_period_sum(year_all,year_all2)  number of years between two periods ('year_all' must precede 'year_all2')
 623      duration_time_rel(time,time2)  relative duration of subannual time period ('time2' relative to parent 'time')
 624      interestrate(year_all)         interest rate (to compute discount factor)
 625      discountfactor(*)              cumulative discount facor
 626  ;
 627   
 628  ***
 629  * Parameters of the `Resources` section
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 13
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 630  * -------------------------------------
 631  *
 632  * .. list-table::
 633  *    :widths: 25 75
 634  *    :header-rows: 1
 635  *
 636  *    * - Parameter name
 637  *      - Index dimensions
 638  *    * - resource_volume
 639  *      - ``node`` | ``commodity`` | ``grade``
 640  *    * - resource_cost
 641  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 642  *    * - resource_remaining
 643  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 644  *    * - bound_extraction_up
 645  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 646  *    * - commodity_stock [#stock]_
 647  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 648  *    * - historical_extraction [#hist]_
 649  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 650  *
 651  * .. [#stock] This parameter allows (exogenous) additions to the commodity stock over the model horizon,
 652  *    e.g., precipitation that replenishes the water table.
 653  *
 654  * .. [#hist] Historical values of new capacity and activity can be used for parametrising the vintage structure
 655  *    of existing capacity and implement dynamic constraints in the first model period.
 656  *
 657  ***
 658   
 659  Parameter
 660  * resource and commodity parameters
 661      bound_extraction_up(node,commodity,grade,year_all)  upper bound on extraction of resources by grade
 662      commodity_stock(node,commodity,level,year_all)      exogenous (initial) quantity of commodity in stock
 663  ;
 664   
 665  ***
 666  * Parameters of the `Demand` section
 667  * ----------------------------------
 668  *
 669  * .. list-table::
 670  *    :widths: 30 70
 671  *    :header-rows: 1
 672  *
 673  *    * - Parameter name
 674  *      - Index dimensions
 675  *    * - demand [demand_fixed] [#demand]_
 676  *      - ``node`` | ``commodity`` | ``level`` | ``year`` | ``time``
 677  *    * - peak_load_factor [#peakload]_
 678  *      - ``node`` | ``commodity`` | ``year``
 679  *
 680  * .. [#demand] The parameter ``demand`` in a ``MESSAGE``-scheme ``ixmp``.Scenario is translated
 681  *    to the parameter ``demand_fixed`` in the MESSAGE implementation in GAMS. The variable ``DEMAND`` is introduced
 682  *    as an auxiliary reporting variable; it equals ``demand_fixed`` in a `MESSAGE`-standalone run and reports
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 14
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 683  *    the final demand including the price response in an iterative `MESSAGE-MACRO` solution.
 684  *
 685  * .. [#peakload] The parameters ``peak_load_factor`` and ``reliability_factor`` are based on the formulation proposed
 686  *    by Sullivan et al., 2013 :cite:`sullivan_VRE_2013`. It is used in :ref:`reliability_constraint`.
 687  *
 688  ***
 689   
 690  Parameter
 691      demand_fixed(node,commodity,level,year_all,time) exogenous demand levels
 692      peak_load_factor(node,commodity,level,year_all,time)       maximum peak load factor for reliability constraint of firm capacity
 693  ;
 694   
 695  ***
 696  * Parameters of the `Technology` section
 697  * --------------------------------------
 698  *
 699  * Input/output mapping, costs and engineering specifications
 700  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 701  *
 702  * .. list-table::
 703  *    :widths: 25 75
 704  *    :header-rows: 1
 705  *
 706  *    * - Parameter name
 707  *      - Index names
 708  *    * - input [#tecvintage]_
 709  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 710  *        ``node_origin`` | ``commodity`` | ``level`` | ``time`` | ``time_origin``
 711  *    * - output [#tecvintage]_
 712  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 713  *        ``node_dest`` | ``commodity`` | ``level`` | ``time`` | ``time_dest``
 714  *    * - inv_cost [#tecvintage]_
 715  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 716  *    * - fix_cost [#tecvintage]_
 717  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 718  *    * - var_cost [#tecvintage]_
 719  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
 720  *    * - levelized_cost [#levelizedcost]_
 721  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``time``
 722  *    * - construction_time
 723  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 724  *    * - technical_lifetime
 725  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 726  *    * - capacity_factor [#tecvintage]_
 727  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``time``
 728  *    * - operation_factor [#tecvintage]_
 729  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 730  *    * - min_utilization_factor [#tecvintage]_
 731  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 732  *    * - rating_bin [#rating]_
 733  *      - ``node`` | ``technology`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 734  *    * - reliability_factor [#peakload]_
 735  *      - ``node`` | ``technology`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 15
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 736  *    * - flexibility_factor
 737  *      - ``node_loc`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 738  *    * - renewable_capacity_factor
 739  *      - ``node_loc`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 740  *    * - renewable_potential
 741  *      - ``node`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 742  *    * - emission_factor
 743  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``emission``
 744  *
 745  * .. [#tecvintage] Fixed and variable cost parameters and technical specifications are indexed over both
 746  *    the year of construction (vintage) and the year of operation (actual).
 747  *    This allows to represent changing technology characteristics depending on the age of the plant.
 748  *
 749  * .. [#levelizedcost] The parameter ``levelized_cost`` is computed in the GAMS pre-processing under the assumption of
 750  *    full capacity utilization until the end of the technical lifetime.
 751  *
 752  * .. [#construction] The construction time only has an effect on the investment costs; in |MESSAGEix|,
 753  *    each unit of new-built capacity is available instantaneously at the beginning of the model period.
 754  *
 755  * .. [#rating] The upper bound of a contribution by any technology to the constraints on system reliability
 756  *    (:ref:`reliability_constraint`) and flexibility (:ref:`flexibility_constraint`) can depend on the share
 757  *    of the technology output in the total commodity use at a specific level.
 758  ***
 759   
 760  Parameters
 761  * technology input-output mapping and costs parameters
 762      input(node,tec,vintage,year_all,mode,node,commodity,level,time,time)  relative share of input per unit of activity
 763      output(node,tec,vintage,year_all,mode,node,commodity,level,time,time) relative share of output per unit of activity
 764      inv_cost(node,tec,year_all)                         investment costs (per unit of new capacity)
 765      fix_cost(node,tec,vintage,year_all)                 fixed costs per year (per unit of capacity maintained)
 766      var_cost(node,tec,vintage,year_all,mode,time)       variable costs of operation (per unit of capacity maintained)
 767      levelized_cost(node,tec,year_all,time)              levelized costs (per unit of new capacity)
 768   
 769  * engineering parameters
 770      construction_time(node,tec,vintage)                     duration of construction of new capacity (in years)
 771      technical_lifetime(node,tec,vintage)                    maximum technical lifetime (from year of construction)
 772      capacity_factor(node,tec,vintage,year_all,time)         capacity factor by subannual time slice
 773      operation_factor(node,tec,vintage,year_all)             yearly total operation factor
 774      min_utilization_factor(node,tec,vintage,year_all)       yearly minimum utilization factor
 775      emission_factor(node,tec,year_all,year_all,mode,emission) emission intensity of activity
 776      rating_bin(node,tec,year_all,commodity,level,time,rating) maximum share of technology in commodity use per rating
 777      reliability_factor(node,tec,year_all,commodity,level,time,rating) reliability of a technology (per rating)
 778      flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating) contribution of technologies towards operation flexibility constraint
 779  ;
 780   
 781  ***
 782  * Bounds on capacity and activity
 783  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 784  *
 785  * The following parameters specify upper and lower bounds on new capacity, total installed capacity, and activity.
 786  *
 787  * .. list-table::
 788  *    :widths: 20 80
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 16
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 789  *    :header-rows: 1
 790  *
 791  *    * - Parameter name
 792  *      - Index names
 793  *    * - bound_new_capacity_up
 794  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 795  *    * - bound_new_capacity_lo
 796  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 797  *    * - bound_total_capacity_up
 798  *      - ``node_loc`` | ``tec`` | ``year_act``
 799  *    * - bound_total_capacity_lo
 800  *      - ``node_loc`` | ``tec`` | ``year_act``
 801  *    * - bound_activity_up
 802  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 803  *    * - bound_activity_lo
 804  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 805  *
 806  * The bounds on activity are implemented as the aggregate over all vintages in a specific period
 807  * (cf. Equation ``ACTIVITY_BOUND_UP`` and ``ACTIVITY_BOUND_LO``).
 808  ***
 809   
 810  Parameters
 811      bound_new_capacity_up(node,tec,year_all)         upper bound on new capacity
 812      bound_new_capacity_lo(node,tec,year_all)         lower bound on new capacity
 813      bound_total_capacity_up(node,tec,year_all)       upper bound on total installed capacity
 814      bound_total_capacity_lo(node,tec,year_all)       lower bound on total installed capacity
 815      bound_activity_up(node,tec,year_all,mode,time)   upper bound on activity (aggregated over all vintages)
 816      bound_activity_lo(node,tec,year_all,mode,time)   lower bound on activity
 817      bound_storage_up(node,commodity,level,year_all,time)   upper bound on stocks
 818      bound_storage_lo(node,commodity,level,year_all,time)   lower bound on stocks
 819      storage_loss(node,commodity,level,year_all,time)       losses from storage
 820  ;
 821   
 822  ***
 823  * Dynamic constraints on capacity and activity
 824  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 825  *
 826  * The following parameters specify constraints on the growth of new capacity and activity, i.e., market penetration.
 827  *
 828  * .. list-table::
 829  *    :widths: 30 70
 830  *    :header-rows: 1
 831  *
 832  *    * - Parameter name
 833  *      - Index names
 834  *    * - initial_new_capacity_up
 835  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 836  *    * - growth_new_capacity_up [#mpx]_
 837  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 838  *    * - soft_new_capacity_up [#mpx]_
 839  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 840  *    * - initial_new_capacity_lo
 841  *      - ``node_loc`` | ``tec`` | ``year_vtg``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 17
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 842  *    * - growth_new_capacity_lo [#mpx]_
 843  *      - ``node_loc`` | ``tec_actual`` | ``year_vtg``
 844  *    * - soft_new_capacity_lo [#mpx]_
 845  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 846  *    * - initial_activity_up [#mpa]_
 847  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 848  *    * - growth_activity_up [#mpx]_ [#mpa]_
 849  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 850  *    * - soft_activity_up [#mpx]_
 851  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 852  *    * - initial_activity_lo [#mpa]_
 853  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 854  *    * - growth_activity_lo [#mpx]_ [#mpa]_
 855  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 856  *    * - soft_activity_lo [#mpx]_
 857  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 858  *
 859  * .. [#mpx] All parameters related to the dynamic constraints are understood as the bound on the rate
 860  *    of growth/decrease, not as in percentage points and not as (1+growth rate).
 861  *
 862  * .. [#mpa] The dynamic constraints are not indexed over modes in the |MESSAGEix| implementation.
 863  *
 864  ***
 865   
 866  Parameters
 867      initial_new_capacity_up(node,tec,year_all)     dynamic upper bound on new capacity (fixed initial term)
 868      growth_new_capacity_up(node,tec,year_all)      dynamic upper bound on new capacity (growth rate)
 869      soft_new_capacity_up(node,tec,year_all)        soft relaxation of dynamic upper bound on new capacity (growth rate)
 870   
 871      initial_new_capacity_lo(node,tec,year_all)     dynamic lower bound on new capacity (fixed initial term)
 872      growth_new_capacity_lo(node,tec,year_all)      dynamic lower bound on new capacity (growth rate)
 873      soft_new_capacity_lo(node,tec,year_all)        soft relaxation of dynamic lower bound on new capacity (growth rate)
 874   
 875      initial_activity_up(node,tec,year_all,time)    dynamic upper bound on activity (fixed initial term)
 876      growth_activity_up(node,tec,year_all,time)     dynamic upper bound on activity (growth rate)
 877      soft_activity_up(node,tec,year_all,time)       soft relaxation of dynamic upper bound on activity (growth rate)
 878   
 879      initial_activity_lo(node,tec,year_all,time)    dynamic lower bound on activity (fixed initial term)
 880      growth_activity_lo(node,tec,year_all,time)     dynamic lower bound on activity (growth rate)
 881      soft_activity_lo(node,tec,year_all,time)       soft relaxation of dynamic lower bound on activity (growth rate)
 882  ;
 883   
 884  ***
 885  * Cost parameters for 'soft' relaxations of dynamic constraints
 886  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 887  *
 888  * The implementation of |MESSAGEix| includes the functionality for 'soft' relaxations of dynamic constraints on
 889  * new-built capacity and activity (see Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
 890  * Refer to the section :ref:`dynamic_constraints`.
 891  *
 892  * .. list-table::
 893  *    :widths: 20 80
 894  *    :header-rows: 1
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 18
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 895  *
 896  *    * - Parameter name
 897  *      - Index names
 898  *    * - abs_cost_new_capacity_soft_up
 899  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 900  *    * - abs_cost_new_capacity_soft_lo
 901  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 902  *    * - level_cost_new_capacity_soft_up
 903  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 904  *    * - level_cost_new_capacity_soft_lo
 905  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 906  *    * - abs_cost_activity_soft_up
 907  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 908  *    * - abs_cost_activity_soft_lo
 909  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 910  *    * - level_cost_activity_soft_up
 911  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 912  *    * - level_cost_activity_soft_lo
 913  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 914  *
 915  ***
 916   
 917  ***
 918  * Historical capacity and activity values
 919  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 920  *
 921  * Historical data on new capacity and activity levels are included in |MESSAGEix| for
 922  * correct accounting of the vintage portfolio and a seamless implementation of dynamic constraints from
 923  * historical years to model periods.
 924  *
 925  * .. list-table::
 926  *    :widths: 35 65
 927  *    :header-rows: 1
 928  *
 929  *    * - Parameter name
 930  *      - Index names
 931  *    * - historical_new_capacity [#hist]_
 932  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 933  *    * - historical_activity [#hist]_
 934  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 935  *
 936  ***
 937   
 938  Parameters
 939      historical_new_capacity(node,tec,year_all)           historical new capacity
 940      historical_activity(node,tec,year_all,mode,time)     historical acitivity
 941  ;
 942   
 943  ***
 944  * Auxiliary investment cost parameters and multipliers
 945  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 946  * Documentation not yet included.
 947  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 19
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 948   
 949  Parameters
 950      construction_time_factor(node,tec,year_all) scaling factor to account for construction time of new capacity
 951      remaining_capacity(node,tec,year_all,year_all) scaling factor to account for remaining capacity in period
 952      end_of_horizon_factor(node,tec,year_all)    multiplier for value of investment at end of model horizon
 953      beyond_horizon_lifetime(node,tec,year_all)  remaining technical lifetime at the end of model horizon
 954      beyond_horizon_factor(node,tec,year_all)    discount factor of remaining lifetime beyond model horizon
 955  ;
 956   
 957  *----------------------------------------------------------------------------------------------------------------------*
 958  * Emissions                                                                                                            *
 959  *----------------------------------------------------------------------------------------------------------------------*
 960   
 961  ***
 962  * Parameters of the `Emission` section
 963  * ------------------------------------
 964  *
 965  * The implementation of |MESSAGEix| includes a flexible and versatile accounting of emissions across different
 966  * categories and species, with the option to define upper bounds and taxes on various (aggregates of) emissions
 967  * and pollutants), (sets of) technologies, and (sets of) years.
 968  *
 969  * .. list-table::
 970  *    :widths: 25 75
 971  *    :header-rows: 1
 972  *
 973  *    * - Parameter name
 974  *      - Index dimensions
 975  *    * - historical_emission [#hist]_
 976  *      - ``node`` | ``emission`` | ``type_tec`` | ``year``
 977  *    * - emission_scaling [#em_scaling]_
 978  *      - ``type_emission`` | ``emission``
 979  *    * - bound_emission
 980  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
 981  *    * - tax_emission
 982  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
 983  *
 984  * .. [#em_scaling] The parameters ``emission_scaling`` allows to efficiently aggregate different emissions/pollutants
 985  *    and set bounds or taxes on various categories.
 986  ***
 987   
 988  Parameters
 989      historical_emission(node,emission,type_tec,year_all)    historical emissions by technology type (including land)
 990      emission_scaling(type_emission,emission)                scaling factor to harmonize bounds or taxes across tpes
 991      bound_emission(node,type_emission,type_tec,type_year)   upper bound on emissions
 992      tax_emission(node,type_emission,type_tec,type_year)     emission tax
 993  ;
 994   
 995  *----------------------------------------------------------------------------------------------------------------------*
 996  * Land-use model emulator                                                                                              *
 997  *----------------------------------------------------------------------------------------------------------------------*
 998   
 999  ***
1000  * Parameters of the `Land-Use model emulator` section
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 20
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1001  * ---------------------------------------------------
1002  *
1003  * The implementation of |MESSAGEix| includes a land-use model emulator, which draws on exogenous land-use scenarios
1004  * (provided by another model) to derive supply of commodities (e.g., biomass) and emissions
1005  * from agriculture and forestry.
1006  *
1007  * .. list-table::
1008  *    :widths: 25 75
1009  *    :header-rows: 1
1010  *
1011  *    * - Parameter name
1012  *      - Index dimensions
1013  *    * - historical_land [#hist]_
1014  *      - ``node`` | ``land_scenario`` | ``year``
1015  *    * - land_cost
1016  *      - ``node`` | ``land_scenario`` | ``year``
1017  *    * - land_input
1018  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1019  *    * - land_output
1020  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1021  *    * - land_use
1022  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1023  *    * - land_emission
1024  *      - ``node`` | ``land_scenario`` | ``year`` | ``emission``
1025  *    * - initial_land_scen_up
1026  *      - ``node`` | ``land_scenario`` | ``year``
1027  *    * - growth_land_scen_up
1028  *      - ``node`` | ``land_scenario`` | ``year``
1029  *    * - initial_land_scen_lo
1030  *      - ``node`` |  ``land_scenario`` | ``year``
1031  *    * - growth_land_scen_lo
1032  *      - ``node`` | ``land_scenario`` | ``year``
1033  *    * - initial_land_up
1034  *      - ``node`` | ``year`` | ``land_type``
1035  *    * - dynamic_land_up
1036  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1037  *    * - growth_land_up
1038  *      - ``node`` | ``year`` | ``land_type``
1039  *    * - initial_land_lo
1040  *      - ``node`` | ``year`` | ``land_type``
1041  *    * - dynamic_land_lo
1042  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1043  *    * - growth_land_lo
1044  *      - ``node`` | ``year`` | ``land_type``
1045  *
1046  ***
1047  ***
1048  * Parameters of the `Share Constraints` section
1049  * ---------------------------------------------
1050  *
1051  * Share constraints define the share of a given commodity to be active on a certain level
1052  *
1053  * .. list-table::
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 21
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1054  *    :widths: 25 75
1055  *    :header-rows: 1
1056  *
1057  *    * - Parameter name
1058  *      - Index dimensions
1059  *    * - share_commodity_up
1060  *      - ``shares`` | ``node_share`` | ``year_act`` | ``time``
1061  *    * - share_commodity_lo
1062  *      - ``shares`` | ``node`` | ``year_act`` | ``time``
1063  *    * - share_mode_up
1064  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1065  *    * - share_mode_lo
1066  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1067  *
1068  ***
1069   
1070  Parameters
1071  *    share_commodity_up(shares,node,year_all,time)    upper bound of commodity share constraint
1072      share_commodity_lo(shares,node,year_all,time)    lower bound of commodity share constraint
1073  *    share_mode_up(shares,node,tec,mode,year_all,time)    upper bound of mode share constraint
1074  *    share_mode_lo(shares,node,tec,mode,year_all,time)    lower bound of mode share constraint
1075  ;
1076   
1077  *----------------------------------------------------------------------------------------------------------------------*
1078  * Generic linear relations                                                                                       *
1079  *----------------------------------------------------------------------------------------------------------------------*
1080   
1081  ***
1082  * Parameters of the `Relations` section
1083  * -------------------------------------
1084  *
1085  * Generic linear relations are implemented in |MESSAGEix|.
1086  * This feature is intended for development and testing only - all new features should be implemented
1087  * as specific new mathematical formulations and associated sets & parameters.
1088  *
1089  * .. list-table::
1090  *    :widths: 25 75
1091  *    :header-rows: 1
1092  *
1093  *    * - Parameter name
1094  *      - Index dimensions
1095  *    * - relation_upper
1096  *      - ``relation`` | ``node_rel`` | ``year_rel``
1097  *    * - relation_lower
1098  *      - ``relation`` | ``node_rel`` | ``year_rel``
1099  *    * - relation_cost
1100  *      - ``relation`` | ``node_rel`` | ``year_rel``
1101  *    * - relation_new_capacity
1102  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1103  *    * - relation_total_capacity
1104  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1105  *    * - relation_activity
1106  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``node_loc`` | ``tec`` | ``year_act`` | ``mode``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 22
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1107  *
1108  ***
1109   
1110  *----------------------------------------------------------------------------------------------------------------------*
1111  * Fixed variable values                                                                                                *
1112  *----------------------------------------------------------------------------------------------------------------------*
1113   
1114  ***
1115  * Fixed variable values
1116  * ---------------------
1117  *
1118  * The following parameters allow to set variable values to a specific value.
1119  * The value is usually taken from a solution of another model instance
1120  * (e.g., scenarios where a shock sets in later to mimick imperfect foresight).
1121  *
1122  * The fixed values do not override any upper or lower bounds that may be defined,
1123  * so fixing variables to values outside of that range will yield an infeasible model.
1124  *
1125  * .. list-table::
1126  *    :widths: 25 75
1127  *    :header-rows: 1
1128  *
1129  *    * - Parameter name
1130  *      - Index dimensions
1131  *    * - fixed_extraction
1132  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
1133  *    * - fixed_stock
1134  *      - ``node`` | ``commodity`` | ``level`` | ``year``
1135  *    * - fixed_new_capacity
1136  *      - ``node`` | ``technology`` | ``year_vtg``
1137  *    * - fixed_capacity
1138  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act``
1139  *    * - fixed_activity
1140  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
1141  *    * - fixed_land
1142  *      - ``node`` | ``land_scenario`` | ``year``
1143  *
1144  * Note that the variable :math:`STOCK\_CHG` is determined implicitly by the :math:`STOCK` variable
1145  * and therefore does not need to be explicitly fixed.
1146  ***
1147   
1148  Parameters
1149      fixed_stock(node,commodity,level,year_all)          fixed stock level
1150      fixed_new_capacity(node,tec,year_all)               fixed new-built capacity
1151      fixed_capacity(node,tec,vintage,year_all)           fixed maintained capacity
1152      fixed_activity(node,tec,vintage,year_all,mode,time) fixed activity level
1153  ;
1154   
1155  *----------------------------------------------------------------------------------------------------------------------*
1156  * Auxiliary reporting parameters                                                                                       *
1157  *----------------------------------------------------------------------------------------------------------------------*
1158   
1159  Parameters
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 23
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1160      trade_cost(node, year_all)              net of commodity import costs and commodity export revenues by node and year
1161      import_cost(node, commodity, year_all)  import costs by commodity and node and year
1162      export_cost(node, commodity, year_all)  export revenues by commodity and node and year
1163  ;
1164   
1165  *----------------------------------------------------------------------------------------------------------------------*
1166  * Auxiliary parameters for GAMS workflow                                                                               *
1167  *----------------------------------------------------------------------------------------------------------------------*
1168   
1169  Parameters
1170      ctr               counter parameter for loops
1171      status(*,*)       model solution status parameter for log writing
1172  ;
1173   
1174  ** load data from gdx, run processing scripts of auxiliary parameters
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/data_load.gms
1175  $INCLUDE MESSAGE/data_load.gms
1176   
1177  *----------------------------------------------------------------------------------------------------------------------*
1178  * load sets and parameters from dataset gdx                                                                            *
1179  *----------------------------------------------------------------------------------------------------------------------*
1180   
1181  put_utility 'log' /"+++ Importing data from 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx'... +++ " ;
1182   
1183  * all sets and general parameters from the gdx file
GDXIN   C:\Users\vinca\Documents\Github\indus_ix\model\data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx
1184  $GDXIN 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx'
--- LOAD  node = 48:node
--- LOAD  tec = 51:technology
--- LOAD  year_all = 64:year
--- LOAD  commodity = 5:commodity
--- LOAD  level = 32:level
--- LOAD  grade = 15:grade
--- LOAD  mode = 47:mode
--- LOAD  time = 52:time
--- LOAD  rating = 49:rating
1185  $LOAD node, tec=technology, year_all=year, commodity, level, grade, mode, time, rating
--- LOAD  emission = 6:emission
1186  $LOAD emission
--- LOAD  lvl_spatial = 33:lvl_spatial
--- LOAD  lvl_temporal = 34:lvl_temporal
--- LOAD  map_spatial_hierarchy = 39:map_spatial_hierarchy
--- LOAD  map_temporal_hierarchy = 45:map_temporal_hierarchy
1187  $LOAD lvl_spatial, lvl_temporal, map_spatial_hierarchy, map_temporal_hierarchy
--- LOAD  map_node = 36:map_node
--- LOAD  map_time = 46:map_time
--- LOAD  map_commodity = 35:map_commodity
--- LOAD  map_stocks = 40:map_stocks
--- LOAD  map_tec = 42:map_tec
--- LOAD  map_tec_time = 44:map_tec_time
--- LOAD  map_tec_mode = 43:map_tec_mode
1188  $LOAD map_node, map_time, map_commodity, map_stocks, map_tec, map_tec_time, map_tec_mode
--- LOAD  map_storage = 41:map_storage
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 24
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1189  $LOAD map_storage
--- LOAD  type_tec = 55:type_tec
--- LOAD  cat_tec = 3:cat_tec
--- LOAD  type_year = 63:type_year
--- LOAD  cat_year = 4:cat_year
--- LOAD  type_emission = 53:type_emission
--- LOAD  cat_emission = 1:cat_emission
1190  $LOAD type_tec, cat_tec, type_year, cat_year, type_emission, cat_emission
--- LOAD  inv_tec = 16:inv_tec
1191  $LOAD inv_tec
--- LOAD  shares = 50:shares
1192  $LOAD shares
--- LOAD  full_balance = 14:full_balance
1193  $LOAD full_balance
1194  $GDXIN
1195   
1196  Execute_load 'data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx'
1197  * general parameters
1198  duration_period, duration_time, interestrate,
1199  * technology technical-engineering parameters and economic costs
1200  input, output, construction_time, technical_lifetime
1201  capacity_factor, operation_factor, min_utilization_factor, inv_cost, fix_cost, var_cost,
1202  * upper and lower bounds on new capacity investment, total installed capacity and activity (including mapping sets)
1203  is_bound_new_capacity_up, is_bound_new_capacity_lo, bound_new_capacity_up, bound_new_capacity_lo,
1204  is_bound_total_capacity_up, is_bound_total_capacity_lo, bound_total_capacity_up, bound_total_capacity_lo,
1205  is_bound_activity_up, bound_activity_up, bound_activity_lo, bound_storage_lo, bound_storage_up, storage_loss,
1206  * dynamic constraints on new capacity investment and activity of technologies
1207  is_dynamic_new_capacity_up, initial_new_capacity_up, growth_new_capacity_up,
1208  is_dynamic_new_capacity_lo, initial_new_capacity_lo, growth_new_capacity_lo,
1209  is_dynamic_activity_up, initial_activity_up, growth_activity_up,
1210  is_dynamic_activity_lo, initial_activity_lo, growth_activity_lo,
1211  * parameters for reliability, flexibility and renewable potential constraints
1212  rating_bin, reliability_factor, peak_load_factor,
1213  * share constraints
1214  map_shares_commodity_share,map_shares_commodity_total,share_commodity_lo
1215  * emission factors, bounds and taxes on emissions (including mapping sets)
1216  historical_emission, emission_factor, emission_scaling, is_bound_emission, bound_emission, tax_emission,
1217  * historical values of new capacity investment, activity and extraction
1218  historical_new_capacity, historical_activity,
1219  * energy stocks
1220  commodity_stock,
1221  * demand parameters
1222  demand_fixed=demand
1223  * fixing variables to pre-specified values
1224  is_fixed_stock, is_fixed_new_capacity, is_fixed_capacity, is_fixed_activity,
1225  fixed_stock, fixed_new_capacity, fixed_capacity, fixed_activity
1226  ;
1227   
1228  *----------------------------------------------------------------------------------------------------------------------*
1229  * assignment and computation of MESSAGE-specific auxiliary parameters                                                  *
1230  *----------------------------------------------------------------------------------------------------------------------*
1231   
1232  * get assignment of auxiliary parameter for period mappings and duration
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 25
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\includes/period_parameter_assignment.gms
1233  $INCLUDE includes/period_parameter_assignment.gms
1234  *----------------------------------------------------------------------------------------------------------------------*
1235  * assignment and computation of auxiliary parameters                                                                   *
1236  *----------------------------------------------------------------------------------------------------------------------*
1237   
1238  * additional sets and parameters created in GAMS to make notation more concise for myopic/rolling-horizon optimization
1239  Sets
1240      historical(year_all)             set of periods prior to the start of the model horizon
1241      model_horizon(year_all)          set of periods included in the model horizon
1242      macro_horizon(year_all)          set of periods included in the MACRO model horizon
1243      seq_period(year_all,year_all2)    mapping of one period ('year_all') to the next ('year_all2')
1244      map_period(year_all,year_all2)    mapping of one period ('year_all') to itself and all subsequent periods ('year_all2')
1245      first_period(year_all)           flag for first period in model horizon
1246      last_period(year_all)            flag for last period in model horizon
1247      macro_initial_period(year_all)   flag for period in model horizon in which to initialize model parameters in (period prior to first model period) - used in MACRO
1248      macro_base_period(year_all)      flag for base year period in model horizon (period prior to first model period) - used in MACRO
1249      seq_time(time,time2)             mapping of one time period ('time') to the next ('time2')
1250      first_time(time)                 flag for first time in model horizon
1251      last_time(time)                  flag for last time in model horizon
1252      seq_year_time(year_all,year_all2,time,time2)
1253  ;
1254   
1255  Parameter
1256      duration_period_sum(year_all,year_all2) number of years between two periods ('year_all' must precede 'year_all2')
1257      duration_time_rel(time,time2)         relative duration of subannual time period ('time2' relative to parent 'time')
1258      elapsed_years(year_all)    elapsed years since the start of the model horizon (not including 'year_all' period)
1259      remaining_years(year_all)  remaining years until the end of the model horizon (including last period)
1260      year_order(year_all)       order for members of set 'year_all'
1261  ;
1262   
1263  *----------------------------------------------------------------------------------------------------------------------*
1264  * assignment auxiliary dynamic sets                                                                                    *
1265  *----------------------------------------------------------------------------------------------------------------------*
1266   
1267  ** treatment of periods **
1268   
1269  * sanity checks to ensure that not more than one period is assigned to the first- and lastyear categories
1270  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ) > 1 ,
1271      abort "There is more than one period assigned as category 'firstmodelyear'!" ) ;
1272  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ) > 1 ,
1273      abort "There is more than one period assigned as category 'lastmodelyear'!" ) ;
1274  if ( sum(year_all$( cat_year("initializeyear_macro",year_all) ), 1 ) > 1 ,
1275      abort "There is more than one period assigned as category 'initializeyear_macro'!" ) ;
1276   
1277  * mapping of sequence of periods over the model horizon
1278  seq_period(year_all,year_all2)$( ORD(year_all) + 1 = ORD(year_all2) ) = yes ;
1279  map_period(year_all,year_all2)$( ORD(year_all) <= ORD(year_all2) ) = yes ;
1280  set subtime(time) /1*12/;
1281  alias (subtime,subtime2);
1282  *loop(time,
1283  *subtime(time) = yes$map_temporal_hierarchy('sub_1',time,'year')
1284  *);
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 26
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1285  seq_time(subtime,subtime2)$( ORD(subtime) + 1 = ORD(subtime2) ) = yes ;
1286  seq_year_time(year_all,year_all2,subtime,subtime2)$(ORD(year_all) = ORD(year_all2) AND   seq_time(subtime,subtime2)) = YES;
1287  * define first and last time periods
1288  first_time(subtime)$( ORD(subtime) = 1) = yes ;
1289  last_time(subtime)$( ORD(subtime) = CARD(subtime) ) = yes ;
1290  seq_year_time(year_all,year_all2,last_time(subtime),first_time(subtime2))$(seq_period(year_all,year_all2)) = YES;
1291   
1292  * dynamic sets (singleton) with first and last periods in model horizon of MESSAGEix (for easier reference)
1293  first_period(year_all) = no ;
1294  first_period(year_all)$( cat_year("firstmodelyear",year_all) ) = yes ;
1295  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ),
1296      last_period(year_all)$( cat_year("lastmodelyear",year_all) ) = yes;
1297  else
1298      last_period(year_all)$( ORD(year_all) = CARD(year_all) ) = yes ;
1299  ) ;
1300   
1301  * dynamic sets for MACRO initialization and base periods
1302  macro_initial_period(year_all) = no ;
1303  macro_initial_period(year_all)$( cat_year("initializeyear_macro",year_all) ) = yes ;
1304  macro_base_period(year_all) = no ;
1305  macro_base_period(year_all)$( ORD(year_all) = sum(year_all2$( first_period(year_all2) ), ORD(year_all2) - 1 ) )  = yes ;
1306   
1307  * assign set of historical years, the model horizon and the MACRO hoizon (includes 'macro_base_period')
1308  historical(year_all)$( ORD(year_all) < sum(year_all2$cat_year("firstmodelyear",year_all2), ORD(year_all2) ) ) = yes ;
1309  model_horizon(year_all) = no ;
1310  model_horizon(year_all)$( ORD(year_all) >= sum(year_all2$first_period(year_all2), ORD(year_all2) )
1311      AND ORD(year_all) <= sum(year_all2$last_period(year_all2), ORD(year_all2) ) ) = yes ;
1312  macro_horizon(year_all) = no ;
1313  macro_horizon(year_all)$macro_base_period(year_all) = yes;
1314  macro_horizon(year_all)$model_horizon(year_all) = yes;
1315   
1316  *----------------------------------------------------------------------------------------------------------------------*
1317  * assignment of (cumulative) discount factors over time                                                                *
1318  *----------------------------------------------------------------------------------------------------------------------*
1319   
1320  * simple method to compute discount factor (but this approach implicitly assumes a constant interest rate)
1321  *discountfactor(year_all) = POWER( 1 / ( 1+interestrate(year_all) ), sum(year_all2$( ORD(year_all2) < ORD(year_all) ),
1322  *    duration_period(year_all2) ) ) ;
1323   
1324  * compute per-year discount factor (using a recursive method) - set to 1 by default (interest rate = 0)
1325  discountfactor(year_all) = 1 ;
1326   
1327  * recursively compute the per-year discount factor
1328  loop(year_all$( ORD(year_all) > 1 ),
1329      discountfactor(year_all) =
1330          sum(year_all2$( seq_period(year_all2,year_all) ), discountfactor(year_all2)
1331              * POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) ) ;
1332  ) ;
1333   
1334  * store the per-year discount factor for later use in the file 'MESSAGE/scaling_investment_costs.gms'
1335  discountfactor('last_year') = sum(last_period, discountfactor(last_period) ) ;
1336   
1337  * multiply per-year discount factor by discounted period duration
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 27
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1338  discountfactor(year_all) =
1339      discountfactor(year_all) * (
1340  * multiply the per-year discount factor by the geometric series of over the duration of the period
1341          ( ( 1 - POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) )
1342              / ( 1 - 1 / ( 1 + interestrate(year_all) ) ) )$( interestrate(year_all) )
1343  * if interest rate = 0, multiply by the number of years in that period
1344          + ( duration_period(year_all) )$( interestrate(year_all) eq 0 ) )
1345  ;
1346   
1347  *----------------------------------------------------------------------------------------------------------------------*
1348  * assignment of auxiliary parameters for duration of periods                                                           *
1349  *----------------------------------------------------------------------------------------------------------------------*
1350   
1351  * define order of set 'year_all' (to use as equivalent of ORD operator on the dynamic set year (subset of 'year_all') )
1352  year_order(year_all) = ORD(year_all) ;
1353   
1354  * auxiliary parameters for duration between periods (years) - not including the final period 'year_all2'
1355  duration_period_sum(year_all,year_all2) =
1356      SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < ORD(year_all2) ) , duration_period(year_all3) ) ;
1357   
1358  * auxiliary parameter for duration since the first year of the model horizon - not including the period 'year_all'
1359  elapsed_years(year_all) = sum(first_period, duration_period_sum(first_period,year_all) ) ;
1360   
1361  * auxiliary parameter for duration until the end of the model horizon - including the last period
1362  remaining_years(year_all) = SUM(year_all2$( ORD(year_all) <= ORD(year_all2) ) , duration_period(year_all2) ) ;
1363   
1364  * compute auxiliary parameters for relative duration of subannual time periods
1365  duration_time_rel(time,time2)$( map_time(time,time2) ) = duration_time(time2) / duration_time(time) ;
1366   
1367  ** mapping and other stuff for technologies **
1368   
1369  * assign an additional mapping set for technologies to nodes, modes and subannual time slices (for shorter reference)
1370  map_tec_act(node,tec,year_all,mode,time)$( map_tec_time(node,tec,year_all,time) AND
1371     map_tec_mode(node,tec,year_all,mode) ) = yes ;
1372   
1373  * mapping of technology lifetime to all 'current' periods (for all non-investment technologies)
1374  map_tec_lifetime(node,tec,year_all,year_all)$( map_tec(node,tec,year_all) ) = yes ;
1375   
1376  * mapping of technology lifetime to all periods 'year_all' which are within the economic lifetime
1377  * (if built in period 'vintage')
1378  map_tec_lifetime(node,tec,vintage,year_all)$( map_tec(node,tec,vintage) AND map_tec(node,tec,year_all)
1379      AND map_period(vintage,year_all)
1380      AND duration_period_sum(vintage,year_all) < technical_lifetime(node,tec,vintage) ) = yes ;
1381   
1382  * mapping of technology lifetime to all periods 'year_all' which were built prior to the beginning of the model horizon
1383  map_tec_lifetime(node,tec,historical,year_all)$( map_tec(node,tec,year_all) AND map_period(historical,year_all)
1384      AND historical_new_capacity(node,tec,historical)
1385      AND duration_period_sum(historical,year_all)
1386          < sum(first_period, technical_lifetime(node,tec,first_period) ) ) = yes ;
1387   
1388  * mapping of technologies to commodities and ratings
1389  map_rating(node,inv_tec,commodity,level,rating,year_all)$(
1390      SUM(time, reliability_factor(node,inv_tec,year_all,commodity,level,time,rating) ) ) = yes;
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 28
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1391   
1392  * set the default capacity factor for technologies where no parameter value is provided in the input data
1393  capacity_factor(node,tec,year_all2,year_all,time)$( map_tec_time(node,tec,year_all,time)
1394      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT capacity_factor(node,tec,year_all2,year_all,time) ) = 1 ;
1395   
1396  * assign the yearly average capacity factor (used in equation OPERATION_CONSTRAINT)
1397  capacity_factor(node,tec,year_all2,year_all,'year') =
1398      sum(time$map_tec_time(node,tec,year_all,time), duration_time(time)
1399          * capacity_factor(node,tec,year_all2,year_all,time) ) ;
1400   
1401  * set the default operation factor for technologies where no parameter value is provided in the input data
1402  operation_factor(node,tec,year_all2,year_all)$( map_tec(node,tec,year_all)
1403      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT operation_factor(node,tec,year_all2,year_all) ) = 1 ;
1404   
1405  * set the emission scaling parameter to 1 if only one emission is included in a category
1406  emission_scaling(type_emission,emission)$( cat_emission(type_emission,emission)
1407          and not emission_scaling(type_emission,emission) ) = 1 ;
1408   
1409  *----------------------------------------------------------------------------------------------------------------------*
1410  * sanity checks on the data set                                                                                        *
1411  *----------------------------------------------------------------------------------------------------------------------*
1412   
1413  Parameter check ;
1414   
1415  * check whether all relevant technology/vintage/year combinations have positove input/output values assigned
1416  *loop((node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ),
1417  *    if ( sum( (mode,node2,commodity,level,time,time2),
1418  *            input(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2)
1419  *            + output(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2) ) eq 0 ,
1420  *        put_utility 'log'/" Warning: No input or output not defined for '"node.tl:0"|"tec.tl:0"|"vintage.tl:0"|"year_all.tl:0"' !" ;
1421  *    ) ;
1422  *) ;
1423   
1424  * check that the economic and technical lifetime are defined and consistent for all investment technologies
1425  loop((node,inv_tec,model_horizon)$( map_tec(node,inv_tec,model_horizon) ),
1426      if ( technical_lifetime(node,inv_tec,model_horizon) <= 0 ,
1427          put_utility 'log'/" Error: Technical lifetime not defined for '"node.tl:0"|"inv_tec.tl:0"|"model_horizon.tl:0"' !" ;
1428          check = 1 ;
1429      ) ;
1430  ) ;
1431  if (check,
1432      abort "There is a problem with the definition of the technical lifetime!" ;
1433  ) ;
1434   
1435  * check for validity of temporal resolution
1436  * loop(lvl_temporal,
1437  *     loop(time2$( sum(time, map_temporal_hierarchy(lvl_temporal,time,time2) ) ),
1438  *         check = 1$( sum( time$( map_temporal_hierarchy(lvl_temporal,time,time2) ),
1439  *             duration_time(time) ) ne duration_time(time2) ) ;
1440  *     ) ;
1441  * ) ;
1442  * if (check,
1443  *     abort "There is a problem in the definition of the temporal resolution!" ;
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 29
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1444  * );
1445   
1446  ** compute auxiliary parameters for capacity and investment cost accounting
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/scaling_investment_costs.gms
1447  $INCLUDE MESSAGE/scaling_investment_costs.gms
1448  ***
1449  * Auxiliary investment parameters
1450  * ===============================
1451  * This page is generated from the auto-documentation mark-up in ``MESSAGE/scaling_investment_costs.gms``.
1452  *
1453  ***
1454   
1455  * compute the scaling investment parameters for all periods in the model horizon
1456  year(year_all)$( model_horizon(year_all) ) = yes ;
1457   
1458  * compute the technical lifetime remaining beyond the overall model horizon
1459  beyond_horizon_lifetime(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
1460      technical_lifetime(node,inv_tec,vintage) - remaining_years(vintage) ;
1461  beyond_horizon_lifetime(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) < 0 ) = 0 ;
1462   
1463  ***
1464  * Levelized capital costs
1465  * -----------------------
1466  * For the 'soft' relaxations of the dynamic constraints and the associated penalty factor in the objective function,
1467  * we need to compute the parameter :math:`levelized\_cost_{n,t,y}`.
1468  *
1469  * .. math::
1470  *    levelized\_cost_{n,t,m,y,h} := \
1471  *        & inv\_cost_{n,t,y} \cdot \frac{ interestrate_{y} \cdot \left( 1 + interestrate_{y} \right)^{|y|} }
1472  *                                      { \left( 1 + interestrate_{y} \right)^{|y|} - 1 } \\
1473  *        & + fix\_cost_{n,t,y,y} \cdot \frac{ 1 }{ \sum_{h'} duration\_time_{h'} \cdot capacity\_factor_{n,t,y,y,h'} } \\
1474  *        & + var\_cost_{n,t,y,y,m,h}
1475  *
1476  * where :math:`|y| = technical\_lifetime_{n,t,y}`. This formulation implicitly assumes constant fixed
1477  * and variable costs over time.
1478  *
1479  * **Warning:** All soft relaxations of the dynamic activity constraint are
1480  * disabled if the levelized costs are negative!
1481  ***
1482   
1483  levelized_cost(node,tec,year,time)$( map_tec_time(node,tec,year,time) AND inv_tec(tec) ) =
1484      inv_cost(node,tec,year)
1485          * (
1486  * compute discounted annualized investment costs if interest rate > 0
1487              ( interestrate(year)
1488                  * ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year)
1489                  / ( ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year) - 1 )
1490                )$( interestrate(year) )
1491  * if interest rate = 0, annualized investment costs are total investment costs divided by technical lifetime
1492              + ( 1 / technical_lifetime(node,tec,year) )$( interestrate(year) eq 0 )
1493            )
1494  * add (proportional) fixed and variable costs, assuming that these remain constant over the technical lifetime
1495      + ( fix_cost(node,tec,year,year) /
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 30
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1496            sum(time2$( map_tec_time(node,tec,year,time2) ),
1497               duration_time(time2) * capacity_factor(node,tec,year,year,time2) )
1498          )$( fix_cost(node,tec,year,year) )
1499      + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,tec,year,year,mode,time) )
1500  ;
1501   
1502  ***
1503  * Construction time accounting
1504  * ----------------------------
1505  * If the construction of new capacity takes a significant amount of time,
1506  * investment costs have to be scaled up accordingly to account for the higher capital costs.
1507  *
1508  * .. math::
1509  *    construction\_time\_factor_{n,t,y} = \left( 1 + interestrate_y \right)^{|y|}
1510  *
1511  * where :math:`|y| = construction\_time_{n,t,y}`. If no construction time is specified, the default value of the
1512  * investment cost scaling factor defaults to 1. The model assumes that the construction time only plays a role
1513  * for the investment costs, i.e., each unit of new-built capacity is available instantaneously.
1514  *
1515  * **Comment:** This formulation applies the discount rate of the vintage year
1516  * (i.e., the year in which the new capacity becomes operational).
1517  ***
1518   
1519  * set default construction_time_factor to 1
1520  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) ) = 1;
1521   
1522  * compute the construction_time_factor
1523  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) AND construction_time(node,inv_tec,year) ) =
1524       ( 1 + interestrate(year) ) ** construction_time(node,inv_tec,year) ;
1525   
1526  ***
1527  * Investment costs beyond the model horizon
1528  * -----------------------------------------
1529  * If the technical lifetime of a technology exceeds the model horizon :math:`Y^{model}`, the model has to add
1530  * a scaling factor to the investment costs (:math:`end\_of\_horizon\_factor_{n,t,y}`). Assuming a constant
1531  * stream of revenue (marginal value of the capacity constraint), this can be computed by annualizing investment costs
1532  * from the condition that in an optimal solution, the investment costs must equal the discounted future revenues,
1533  * if the investment variable :math:`CAP\_NEW_{n,t,y} > 0`:
1534  *
1535  * .. math::
1536  *    inv\_cost_{n,t,y^V} = \sum_{y \in Y^{lifetime}_{n,t,y^V}} discountfactor_{y} \cdot \beta_{n,t},
1537  *
1538  * Here, :math:`\beta_{n,t} > 0` is the dual variable to the capacity constraint (assumed constant over future periods)
1539  * and :math:`Y^{lifetime}_{n,t,y^V}` is the set of periods in the lifetime of a plant built in period :math:`y^V`.
1540  * Then, the scaling factor :math:`end\_of\_horizon\_factor_{n,t,y^V}` can be derived as follows:
1541  *
1542  * .. math::
1543  *    end\_of\_horizon\_factor_{n,t,y^V} :=
1544  *    \frac{\sum_{y \in Y^{lifetime}_{n,t,y^V} \cap Y^{model}} discountfactor_{y} }
1545  *        {\sum_{y' \in Y^{lifetime}_{n,t,y^V}} discountfactor_{y'} + beyond\_horizon\_factor_{n,t,y^V} }
1546  *    \in (0,1],
1547  *
1548  * where the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` accounts for the discount factor beyond the
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 31
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1549  * overall model horizon (the set :math:`Y` in contrast to the set :math:`Y^{model} \subseteq Y` of the periods
1550  * included in the current model iteration (see the page on the recursive-dynamic model solution approach).
1551  *
1552  * .. math::
1553  *    beyond\_horizon\_lifetime_{n,t,y^V} :=  \max \Big\{ 0,
1554  *        economic\_lifetime_{n,t,y^V} - \sum_{y' \geq y^V} duration\_period_{y'} \Big\}
1555  *
1556  * .. math::
1557  *    beyond\_horizon\_factor_{n,t,y^V} :=
1558  *        discountfactor_{\widehat{y}} \cdot \frac{1}{ \left( 1 + interestrate_{\widehat{y}} \right)^{|\widehat{y}|} }
1559  *        \cdot \frac{ 1 - \left( \frac{1}{1 + interestrate_{\widehat{y}}} \right)^{|\widetilde{y}|}}
1560  *                   { 1 - \frac{1}{1 + interestrate_{\widehat{y}}}}
1561  *
1562  * where :math:`\widehat{y}` is the last period included in the overall model horizon,
1563  * :math:`|\widehat{y}| = period\_duration\_period_{\widehat{y}}`
1564  * and :math:`|\widetilde{y}| = beyond\_horizon\_lifetime_{n,t,y^V}`.
1565  *
1566  * If the interest rate is zero, i.e., :math:`interestrate_{\widehat{y}} = 0`,
1567  * the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` equals the remaining technical lifetime
1568  * beyond the model horizon and the parameter :math:`end\_of\_horizon\_factor_{n,t,y^V}` equals
1569  * the share of technical lifetime within the model horizon.
1570  ***
1571   
1572  * compute the cumulative discount factor of the technical lifetime remaining beyond the model horizon
1573  beyond_horizon_factor(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) )
1574      = sum(last_period,
1575  * compute the discount factor of the very last year (not period) in the model horizon
1576          discountfactor('last_year') * POWER( 1 / ( 1 + interestrate(last_period) ), duration_period(last_period) ) * (
1577  * multiply this by the geometric series of remaining technical lifetime if interestrate of last model period > 0
1578              (
1579                  ( 1 - POWER( 1 / ( 1 + interestrate(last_period) ), beyond_horizon_lifetime(node,inv_tec,vintage) ) )
1580                  / ( 1 - 1 / ( 1 + interestrate(last_period) ) )
1581              )$( interestrate(last_period) )
1582  * if interest rate = 0, multiply by remaining technical lifetime
1583              + ( beyond_horizon_lifetime(node,inv_tec,vintage) )$( interestrate(last_period) eq 0 )
1584          )
1585      ) ;
1586   
1587  * deterine the parameter end_of_horizon_factor used for scaling investment costs to account for
1588  * technical lifetime beyond the model horizon
1589  end_of_horizon_factor(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
1590      sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), discountfactor(year_all)  )
1591      / ( sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), discountfactor(year_all) )
1592          + beyond_horizon_factor(node,inv_tec,vintage) ) ;
1593   
1594  ***
1595  * **Possible extension:** Instead of assuming :math:`\beta_{n,t}` to be constant over time, one could include
1596  * a simple (linear) projection of :math:`\beta_{n,t,y}` beyond the end of the model horizon. However, this would likely
1597  * require to include the computation of dual variables endogenously, and thus a mixed-complementarity formulation of
1598  * the model.
1599  ***
1600   
1601  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 32
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1602  * Remaining installed capacity
1603  * ----------------------------
1604  * The model has to take into account that the technical lifetime of a technology may not coincide with the cumulative
1605  * period duration. Therefore, the model introduces the parameter :math:`remaining\_capacity_{n,t,y^V,y}`
1606  * as a factor of remaining technical lifetime in the last period of operation divided by the duration of that period.
1607  *
1608  ***
1609   
1610  # set default to 1 (assume that the full capacity is available over the entire period)
1611  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ) = 1 ;
1612   
1613  # if technical lifetime ends in the respective period, set remaining_capacity factor as share of lifetime in that period
1614  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all)
1615          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) < duration_period(year_all) )
1616          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) > 0 ) )
1617      = ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) ) / duration_period(year_all) ;
1618   
1619  * unassign the dynamic set 'year'
1620  year(year_all) = no;
1621   
1622  *----------------------------------------------------------------------------------------------------------------------*
1623  * variable and equation definition, model declaration                                                                  *
1624  *----------------------------------------------------------------------------------------------------------------------*
1625   
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_core.gms
1626  $INCLUDE MESSAGE/model_core.gms
1627  ***
1628  * Mathematical formulation (core model)
1629  * =====================================
1630  * This page is generated from the auto-documentation mark-up in ``MESSAGE/model_core.gms``.
1631  *
1632  * The |MESSAGEix| systems-optimization model minimizes total costs
1633  * while satisfying given demand levels for commodities/services
1634  * and considering a broad range of technical/engineering constraints and societal restrictions
1635  * (e.g. bounds on greenhouse gas emissions, pollutants).
1636  * Demand levels are static (i.e. non-elastic), but the demand response can be integrated by linking |MESSAGEix|
1637  * to the single sector general-economy MACRO model included in this framework.
1638  *
1639  * For the complete list of sets, mappings and parameters,
1640  * refer to the auto-documentation pages :ref:`sets_maps_def` and :ref:`parameter_def`.
1641  ***
1642   
1643  *----------------------------------------------------------------------------------------------------------------------*
1644  * Notation declaration                                                                                                 *
1645  *----------------------------------------------------------------------------------------------------------------------*
1646   
1647  ***
1648  * Notation declaration
1649  * --------------------
1650  * The following short notation is used in the mathematical description relative to the GAMS code:
1651  *
1652  * Mathematical notation of sets
1653  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 33
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1654  * ================================== ===================================================================================
1655  * Math notation                      GAMS set & index notation
1656  * ================================== ===================================================================================
1657  * :math:`n \in N`                    node (across spatial hierarchy levels)
1658  * :math:`y \in Y`                    year (all periods including historical and model horizon)
1659  * :math:`y \in Y^M \subset Y`        time periods included in model horizon
1660  * :math:`y \in Y^H \subset Y`        historical time periods (prior to first model period)
1661  * :math:`c \in C`                    commodity
1662  * :math:`l \in L`                    level
1663  * :math:`g \in G`                    grade
1664  * :math:`t \in T`                    technology (a.k.a tec)
1665  * :math:`h \in H`                    time (subannual time periods)
1666  * :math:`m \in M`                    mode
1667  * :math:`e \in E`                    emission, pollutants
1668  * :math:`s \in S`                    scenarios of land use (for land-use model emulator)
1669  * :math:`u \in U`                    land-use types
1670  * :math:`r \in R`                    set of generic relations (linear constraints)
1671  * :math:`t \in T^{INV} \subseteq T`  all technologies with investment decisions and capacity constraints
1672  * :math:`t \in T^{REN} \subseteq T`  all technologies which draw their input from the renewable level
1673  * :math:`n \in N(\widehat{n})`       all nodes that are subnodes of node :math:`\widehat{n}`
1674  * :math:`y \in Y(\widehat{y})`       all years mapped to the category ``type_year`` :math:`\widehat{y}`
1675  * :math:`t \in T(\widehat{t})`       all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`
1676  * :math:`e \in E(\widehat{e})`       all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`
1677  * ================================== ===================================================================================
1678  *
1679  ***
1680   
1681  *----------------------------------------------------------------------------------------------------------------------*
1682  * Variable definitions                                                                                                 *
1683  *----------------------------------------------------------------------------------------------------------------------*
1684   
1685  ***
1686  * Decision variables
1687  * ^^^^^^^^^^^^^^^^^^
1688  * ============================================= ========================================================================
1689  * Variable                                      Explanatory text
1690  * ============================================= ========================================================================
1691  * :math:`OBJ \in \mathbb{R}`                    Objective value of the optimization program
1692  * :math:`EXT_{n,c,g,y} \in \mathbb{R}_+`        Extraction of non-renewable/exhaustible resources from reserves
1693  * :math:`STOCK_{n,c,l,y} \in \mathbb{R}_+`      Quantity in stock (storage) at start of period :math:`y`
1694  * :math:`STOCK\_CHG_{n,c,l,y,h} \in \mathbb{R}` Input or output quantity into intertemporal commodity stock (storage)
1695  * :math:`REN_{n,t,c,g,y,h}`                     Activity of renewable technologies per grade
1696  * :math:`CAP\_NEW_{n,t,y} \in \mathbb{R}_+`     New installed capacity (yearly average over period duration
1697  * :math:`CAP_{n,t,y^V,y} \in \mathbb{R}_+`      Maintained capacity in year :math:`y` of vintage :math:`y^V`
1698  * :math:`ACT_{n,t,y^V,y,m,h} \in \mathbb{R}`    Activity of a technology (by vintage, mode, subannual time)
1699  * :math:`CAP\_NEW\_UP_{n,t,y} \in \mathbb{R}_+` Relaxation of upper dynamic constraint on new capacity
1700  * :math:`CAP\_NEW\_LO_{n,t,y} \in \mathbb{R}_+` Relaxation of lower dynamic constraint on new capacity
1701  * :math:`CAP\_FIRM_{n,t,c,l,y,q}`                   Dispatchable capacity of renewable technologies per grade
1702  * :math:`ACT\_UP_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of upper dynamic constraint on activity [#ACT]_
1703  * :math:`ACT\_LO_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of lower dynamic constraint on activity [#ACT]_
1704  * :math:`LAND_{n,s,y} \in [0,1]`                Relative share of land-use scenario (for land-use model emulator)
1705  * :math:`EMISS_{n,e,\widehat{t},y}`             Auxiliary variable for aggregate emissions by technology type
1706  * :math:`REL_{r,n,y} \in \mathbb{R}`            Auxiliary variable for left-hand side of relations (linear constraints)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 34
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1707  * :math:`COMMODITY\_USE_{n,c,l,y}`              Auxiliary variable for amount of commodity used at specific level
1708  * ============================================= ========================================================================
1709  *
1710  * The index :math:`y^V` is the year of construction (vintage) wherever it is necessary to
1711  * clearly distinguish between year of construction and the year of operation.
1712  *
1713  * All decision variables are by year, not by (multi-year) period, except :math:`STOCK_{n,c,l,y}`.
1714  * In particular, the new capacity variable :math:`CAP\_NEW_{n,t,y}` has to be multiplied by the number of years
1715  * in a period :math:`|y| = duration\_period_{y}` to determine the available capacity in subsequent periods.
1716  * This formulation gives more flexibility when it comes to using periods of different duration
1717  * (more intuitive comparison across different periods).
1718  *
1719  * The current model framework allows both input or output normalized formulation.
1720  * This will affect the parametrization, see Section :ref:`efficiency_output` for more details.
1721  *
1722  * .. [#ACT] The dynamic activity constraints are implemented as summed over all modes;
1723  *    therefore, the variables for the relaxation are not indexed over the set ``mode``.
1724  *
1725  ***
1726   
1727  Variables
1728      OBJ objective value of the optimisation problem
1729  ;
1730   
1731  Positive Variables
1732  * commodity in inter-temporal stock
1733      STOCK(node,commodity,level,year_all) total quantity in intertemporal stock (storage)
1734  * commodity in inter-temporal stock
1735      STORAGE(node,commodity,level,year_all,time) total quantity in intertemporal stock (storage) considering intra-year time steps (time)
1736  * investment and capacity variables
1737      CAP_NEW(node,tec,year_all)       new capacity by year
1738      CAP(node,tec,vintage,year_all)   total installed capacity by year
1739      CAP_FIRM(node,tec,commodity,level,year_all,rating)   renewable firm capacity
1740  * variables for soft relaxation of dynamic activity constraints
1741      CAP_NEW_UP(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (upwards)
1742      CAP_NEW_LO(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (downwards)
1743      ACT_UP(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (upwards)
1744      ACT_LO(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (downwards)
1745   
1746  Variables
1747  * intertemporal stock variables (input or output quantity into the stock)
1748      STOCK_CHG(node,commodity,level,year_all,time) annual input into and output from stocks of commodities
1749  * intertemporal stock variables (input or output quantity into the stock)
1750      STORAGE_CHG(node,commodity,level,year_all,time) input into and output from stocks of commodities in time frame year-time
1751  * technology activity variables (can be negative for some technologies, upper and lower bounds stated explicitly)
1752      ACT(node,tec,vintage,year_all,mode,time)     activity of technology by mode-year-timeperiod
1753  * auxiliary variables for finrm-capacity formulation
1754      COMMODITY_USE(node,commodity,level,year_all) total amount of a commodity & level that was used or consumed
1755  * nodal system costs over time
1756      COST_NODAL(node, year_all)                   system costs at the node level over time
1757  * auxiliary variable for aggregate emissions by technology type and land-use model emulator
1758      EMISS(node,emission,type_tec,year_all)       aggregate emissions by technology type and land-use model emulator
1759  ;
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 35
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1760   
1761  ***
1762  * Auxiliary variables
1763  * ^^^^^^^^^^^^^^^^^^^
1764  * ============================================= ========================================================================
1765  * Variable                                      Explanatory text
1766  * ============================================= ========================================================================
1767  * :math:`DEMAND_{n,c,l,y,h} \in \mathbb{R}`     Demand level (in equilibrium with MACRO integration)
1768  * :math:`PRICE\_COMMODITY_{n,c,l,y,h}`          Commodity price (undiscounted marginals of COMMODITY_BALANCE constraint)
1769  * :math:`PRICE\_EMISSION_{n,e,\widehat{t},y}`   Emission price (undiscounted marginals of EMISSION_BOUND constraint)
1770  * :math:`COST\_NODAL\_NET_{n,y} \in \mathbb{R}` System costs at the node level net of energy trade revenues/cost
1771  * :math:`GDP_{n,y} \in \mathbb{R}`              gross domestic product (GDP) in market exchange rates for MACRO reporting
1772  * ============================================= ========================================================================
1773  *
1774  ***
1775   
1776  Variables
1777  * auxiliary variables for demand, prices, costs and GDP (for reporting when MESSAGE is run with MACRO)
1778      DEMAND(node,commodity,level,year_all,time) demand
1779      PRICE_COMMODITY(node,commodity,level,year_all,time)  commodity price (derived from marginals of COMMODITY_BALANCE constraint)
1780      PRICE_EMISSION(node,type_emission,type_tec,year_all) emission price (derived from marginals of EMISSION_BOUND constraint)
1781      COST_NODAL_NET(node,year_all)              system costs at the node level over time including effects of energy trade
1782      GDP(node,year_all)                         gross domestic product (GDP) in market exchange rates for MACRO reporting
1783  ;
1784   
1785   
1786  *----------------------------------------------------------------------------------------------------------------------*
1787  * auxiliary bounds on activity variables (debugging mode, avoid inter-vintage arbitrage, investment technology)                                                        *
1788  *----------------------------------------------------------------------------------------------------------------------*
1789   
1790  * include upper and lower bounds (to avoid unbounded models)
1791  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1792  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = -1e9 ;
1793  * ACT.up(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1794  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = 1e9 ;
1795   
1796  * to avoid "inter-vintage arbitrage" (across different vintages of technologies), all activities that
1797  * have positive upper bounds are assumed to be non-negative
1798  ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1799      AND map_tec_act(node,tec,year_all2,mode,time) AND bound_activity_lo(node,tec,year_all2,mode,time) >= 0 ) = 0 ;
1800  * previous implementation using upper bounds
1801  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1802  *    AND map_tec_act(node,tec,year_all2,mode,time)
1803  *    AND ( NOT bound_activity_up(node,tec,year_all2,mode,time)
1804  *        OR bound_activity_up(node,tec,year_all2,mode,time) >= 0 ) ) = 0 ;
1805   
1806  * assume that all "investment" technologies must have non-negative activity levels
1807  ACT.lo(node,inv_tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,inv_tec,year_all,year_all2)
1808      AND map_tec_act(node,inv_tec,year_all2,mode,time) ) = 0 ;
1809   
1810  *----------------------------------------------------------------------------------------------------------------------*
1811  * fixing variables to pre-specified values                                                                             *
1812  *----------------------------------------------------------------------------------------------------------------------*
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 36
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1813   
1814  STOCK.fx(node,commodity,level,year_all)$( is_fixed_stock(node,commodity,level,year_all) ) =
1815      fixed_stock(node,commodity,level,year_all) ;
1816  CAP_NEW.fx(node,tec,year_all)$( is_fixed_new_capacity(node,tec,year_all) ) =
1817      fixed_new_capacity(node,tec,year_all) ;
1818  CAP.fx(node,tec,vintage,year_all)$( is_fixed_capacity(node,tec,vintage,year_all) ) =
1819      fixed_capacity(node,tec,vintage,year_all) ;
1820  ACT.fx(node,tec,vintage,year_all,mode,time)$( is_fixed_activity(node,tec,vintage,year_all,mode,time) ) =
1821      fixed_activity(node,tec,vintage,year_all,mode,time) ;
1822   
1823  *----------------------------------------------------------------------------------------------------------------------*
1824  * auxiliary variables for debugging mode (identifying infeasibilities)                                                 *
1825  *----------------------------------------------------------------------------------------------------------------------*
1826   
1827  * slack variables for debugging
1828  Positive variables
1829      SLACK_COMMODITY_BALANCE_UP(node,commodity,level,year_all,time) slack variable for commodity balance (upwards)
1830      SLACK_COMMODITY_BALANCE_LO(node,commodity,level,year_all,time) slack variable for commodity balance (downwards)
1831      SLACK_FULL_COMMODITY_BALANCE_UP(node,commodity,level,year_all,time) slack variable for commodity balance (upwards)
1832      SLACK_FULL_COMMODITY_BALANCE_LO(node,commodity,level,year_all,time) slack variable for commodity balance (downwards)
1833      SLACK_CAP_NEW_BOUND_UP (node,tec,year_all)        slack variable for bound on new capacity (upwards)
1834      SLACK_CAP_NEW_BOUND_LO (node,tec,year_all)        slack variable for bound on new capacity (downwards)
1835      SLACK_CAP_TOTAL_BOUND_UP (node,tec,year_all)      slack variable for upper bound on total installed capacity
1836      SLACK_CAP_TOTAL_BOUND_LO (node,tec,year_all)      slack variable for lower bound on total installed capacity
1837      SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year_all)       slack variable for dynamic new capacity constraint (upwards)
1838      SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year_all)       slack variable for dynamic new capacity constraint (downwards)
1839      SLACK_ACT_BOUND_UP(node,tec,year_all,mode,time)   slack variable for upper bound on activity
1840      SLACK_ACT_BOUND_LO(node,tec,year_all,mode,time)   slack variable for lower bound on activity
1841      SLACK_ACT_DYNAMIC_UP(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (upwards)
1842      SLACK_ACT_DYNAMIC_LO(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (downwards)
1843  ;
1844   
1845  *----------------------------------------------------------------------------------------------------------------------*
1846  * equation definitions                                                                                                 *
1847  *----------------------------------------------------------------------------------------------------------------------*
1848   
1849  Equations
1850      OBJECTIVE                       objective value of the optimisation problem
1851      COST_ACCOUNTING_NODAL           cost accounting at node level over time
1852      COMMODITY_BALANCE               commodity supply-demand balance constraint
1853      COMMODITY_BALANCE_FULL          full commodity supply-demand balance constraint
1854      STOCKS_BALANCE                  commodity inter-temporal balance of stocks
1855      STORAGE_BALANCE                 commodity inter-temporal balance of storage
1856      STORAGE_BOUND_UP                upper bound on storage level
1857      STORAGE_BOUND_LO                lower bound on storage level
1858      CAPACITY_CONSTRAINT             capacity constraint for technology (by sub-annual time slice)
1859      CAPACITY_MAINTENANCE            constraint for technology capacity maintainance
1860      OPERATION_CONSTRAINT            constraint on maximum yearly operation (scheduled down-time for maintainance)
1861      MIN_UTILIZATION_CONSTRAINT      constraint for minimum yearly operation (aggregated over the course of a year)
1862      COMMODITY_USE_LEVEL             defines the COMMODITY_USE as the amount of a commodity at a level that was consumed
1863      FIRM_CAPACITY_CONSTRAINT        constraint to maintaint sufficient firm (dispatchable) power generation capacity
1864      FIRM_CAPACITY_PROVISION         lower bound on CAP as the minimum installed capacity of each technology
1865      FIRM_CAPACITY_SHARE             upper bound of CAP_FIRM per rating to the size of the penetration bin of this rating
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 37
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1866      NEW_CAPACITY_BOUND_UP           upper bound on technology capacity investment
1867      NEW_CAPACITY_BOUND_LO           lower bound on technology capacity investment
1868      TOTAL_CAPACITY_BOUND_UP         upper bound on total installed capacity
1869      TOTAL_CAPACITY_BOUND_LO         lower bound on total installed capacity
1870      NEW_CAPACITY_CONSTRAINT_UP      dynamic constraint for capacity investment (learning and spillovers upper bound)
1871      NEW_CAPACITY_CONSTRAINT_LO      dynamic constraint on capacity investment (lower bound)
1872      ACTIVITY_BOUND_UP               upper bound on activity summed over all vintages
1873      ACTIVITY_BOUND_LO               lower bound on activity summed over all vintages
1874  *    SHARE_CONSTRAINT_COMMODITY_UP   upper bounds on share constraints for commodities
1875      SHARE_CONSTRAINT_COMMODITY_LO   lower bounds on share constraints for commodities
1876  *    SHARE_CONSTRAINT_MODE_UP        upper bounds on share constraints for modes of a given technology
1877  *    SHARE_CONSTRAINT_MODE_LO        lower bounds on share constraints for modes of a given technology
1878      ACTIVITY_CONSTRAINT_UP          dynamic constraint on the market penetration of a technology activity (upper bound)
1879      ACTIVITY_CONSTRAINT_LO          dynamic constraint on the market penetration of a technology activity (lower bound)
1880      EMISSION_EQUIVALENCE            auxiliary equation to simplify the notation of emissions
1881      EMISSION_CONSTRAINT             nodal-regional-global constraints on emissions (by category)
1882  ;
1883   
1884  *----------------------------------------------------------------------------------------------------------------------*
1885  * equation statements                                                                                                  *
1886  *----------------------------------------------------------------------------------------------------------------------*
1887   
1888  ***
1889  * Objective function
1890  * ------------------
1891  *
1892  * The objective function of the |MESSAGEix| core model
1893  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1894  *
1895  * Equation OBJECTIVE
1896  * """"""""""""""""""
1897  *
1898  * The objective function (of the core model) minimizes total discounted systems costs including costs for emissions,
1899  * relaxations of dynamic constraints
1900  *
1901  * .. math::
1902  *    OBJ = \sum_{n,y \in Y^{M}} discountfactor_{y} \cdot COST\_NODAL_{n,y}
1903  *
1904  ***
1905   
1906  OBJECTIVE..
1907      OBJ =E= SUM((node,year), discountfactor(year) * COST_NODAL(node, year))
1908  ;
1909   
1910  ***
1911  * Regional system cost accounting function
1912  * ----------------------------------------
1913  *
1914  * Accounting of regional system costs over time
1915  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1916  *
1917  * Equation COST_ACCOUNTING_NODAL
1918  * """"""""""""""""""""""""""""""
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 38
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1919  *
1920  * Accounting of regional systems costs over time as well as costs for emissions (taxes),
1921  * land use (from the model land-use model emulator), relaxations of dynamic constraints,
1922  * and linear relations.
1923  *
1924  * .. math::
1925  *    COST\_NODAL_{n,y} & = \sum_{c,g} \ resource\_cost_{n,c,g,y} \cdot EXT_{n,c,g,y} \\
1926  *      & + \sum_{t} \
1927  *          \bigg( inv\_cost_{n,t,y} \cdot construction\_time\_factor_{n,t,y} \\
1928  *      & \quad \quad \quad \cdot end\_of\_horizon\_factor_{n,t,y} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
1929  *      & \quad \quad + \sum_{y^V \leq y} \ fix\_cost_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y} \\
1930  *      & \quad \quad + \sum_{\substack{y^V \leq y \\ m,h}} \ var\_cost_{n,t,y^V,y,m,h} \cdot ACT_{n,t,y^V,y,m,h} \\
1931  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_up_{n,t,y} \\
1932  *      & \quad \quad \quad
1933  *          + level\_cost\_new\_capacity\_soft\_up_{n,t,y} \cdot\ inv\_cost_{n,t,y}
1934  *          \Big) \cdot CAP\_NEW\_UP_{n,t,y} \\[4pt]
1935  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_lo_{n,t,y} \\
1936  *      & \quad \quad \quad
1937  *          + level\_cost\_new\_capacity\_soft\_lo_{n,t,y} \cdot\ inv\_cost_{n,t,y}
1938  *          \Big) \cdot CAP\_NEW\_LO_{n,t,y} \\[4pt]
1939  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_up_{n,t,y,m,h} \\
1940  *      & \quad \quad \quad
1941  *          + level\_cost\_activity\_soft\_up_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
1942  *          \Big) \cdot ACT\_UP_{n,t,y,h} \\
1943  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_lo_{n,t,y,m,h} \\
1944  *      & \quad \quad \quad
1945  *          + level\_cost\_activity\_soft\_lo_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
1946  *          \Big) \cdot ACT\_LO_{n,t,y,h} \bigg) \\
1947  *      & + \sum_{\substack{\widehat{e},\widehat{t} \\ e \in E(\widehat{e})}}
1948  *            emission\_scaling_{\widehat{e},e} \cdot \ emission\_tax_{n,\widehat{e},\widehat{t},y}
1949  *            \cdot EMISS_{n,e,\widehat{t},y} \\
1950  *      & + \sum_{r} relation\_cost_{r,n,y} \cdot REL_{r,n,y}
1951  ***
1952   
1953  COST_ACCOUNTING_NODAL(node, year)..
1954      COST_NODAL(node, year) =E=
1955  * technology capacity investment, maintainance, operational cost
1956      + SUM((tec)$( map_tec(node,tec,year) ),
1957              ( inv_cost(node,tec,year) * construction_time_factor(node,tec,year)
1958                  * end_of_horizon_factor(node,tec,year) * CAP_NEW(node,tec,year)
1959              + SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ),
1960                  fix_cost(node,tec,vintage,year) * CAP(node,tec,vintage,year) ) )$( inv_tec(tec) )
1961              + SUM((vintage,mode,time)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
1962                  var_cost(node,tec,vintage,year,mode,time) * ACT(node,tec,vintage,year,mode,time) )
1963              )
1964  * emission taxes (by parent node, type of technology, type of year and type of emission)
1965      + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
1966              AND cat_year(type_year,year) ),
1967          emission_scaling(type_emission,emission)
1968          * tax_emission(node,type_emission,type_tec,type_year)
1969          * EMISS(node,emission,type_tec,year) )
1970  * implementation of slack variables for constraints to aid in debugging
1971      + SUM((commodity,level,time)$( map_commodity(node,commodity,level,year,time) ), ( 0
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 39
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1972  *   + SLACK_COMMODITY_BALANCE_UP(node,commodity,level,year,time)
1973  *   + SLACK_COMMODITY_BALANCE_LO(node,commodity,level,year,time)
1974  *   + SLACK_FULL_COMMODITY_BALANCE_UP(node,commodity,level,year,time)
1975  *   + SLACK_FULL_COMMODITY_BALANCE_LO(node,commodity,level,year,time)
1976          ) * 1e6 )
1977      + SUM((tec)$( map_tec(node,tec,year) ), ( 0
1978  *    + 10 * SLACK_CAP_NEW_BOUND_UP(node,tec,year)
1979  *    + 10 * SLACK_CAP_NEW_BOUND_LO(node,tec,year)
1980  *  + 10 * SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year)
1981  *  + 10 * SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year)
1982  *  + 10 * SLACK_CAP_TOTAL_BOUND_UP(node,tec,year)
1983  *  + 10 * SLACK_CAP_TOTAL_BOUND_LO(node,tec,year)
1984          ) * ABS( 1000 + inv_cost(node,tec,year) ) )
1985      + SUM((tec,time)$( map_tec_time(node,tec,year,time) ), ( 0
1986  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_UP(node,tec,year,mode,time) )
1987  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_LO(node,tec,year,mode,time) )
1988  * + 10 * SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
1989  * + 10 * SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
1990          ) * ( 1e8
1991              + ABS( SUM(mode$map_tec_act(node,tec,year,mode,time), var_cost(node,tec,year,year,mode,time) ) )
1992              + fix_cost(node,tec,year,year) ) )
1993  ;
1994   
1995  ***
1996  * Here, :math:`n^L \in N(n)` are all nodes :math:`n^L` that are sub-nodes of node :math:`n`.
1997  * The subset of technologies :math:`t \in T(\widehat{t})` are all tecs that belong to category :math:`\widehat{t}`,
1998  * and similar notation is used for emissions :math:`e \in E`.
1999  ***
2000   
2001  *----------------------------------------------------------------------------------------------------------------------*
2002  ***
2003  * Resource and commodity section
2004  * ------------------------------
2005  *
2006  ***
2007  * Constraints on commodities and stocks
2008  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2009  *
2010  * Equation COMMODITY_BALANCE
2011  * """"""""""""""""""""""""""
2012  * This constraint ensures the nodal and temporal balance of outputs/imports and inputs/exports for all commodities.
2013  *
2014  *  .. math::
2015  *     \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} output_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2016  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,y^V,y,m,h^A} \\
2017  *     - \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} input_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2018  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,m,y,h^A} \\
2019  *     + \ STOCK\_CHG_{n,c,l,y,h} & \\[4pt]
2020  *     + \ \sum_s \Big( land\_output_{n,s,y,c,l,h} - land\_input_{n,s,y,c,l,h} \Big) \cdot & LAND_{n,s,y} \\[4pt]
2021  *     - \ demand\_fixed_{n,c,l,y,h}
2022  *     & \geq 0 \quad \forall \ l \notin L^{RES} \subseteq L
2023  *
2024  * The commodity balance constraint at the resource level is included in the `Equation RESOURCE_CONSTRAINT`_,
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 40
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2025  * while at the renewable level, it is included in the `Equation RENEWABLES_EQUIVALENCE`_.
2026  ***
2027  COMMODITY_BALANCE(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2028                   AND NOT full_balance(commodity))..
2029      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
2030              AND map_tec_lifetime(location,tec,vintage,year) ),
2031  * import into node and output by all technologies located at 'location' sending to 'node' and 'time2' sending to 'time'
2032          output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2033          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)
2034  * export from node and input into technologies located at 'location' taking from 'node' and 'time2' taking from 'time'
2035          - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2036          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )
2037  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (storage)
2038      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )
2039  * final consumption (exogenous parameter to be satisfied by the energy+water+xxx system)
2040      - demand_fixed(node,commodity,level,year,time)
2041  * relaxation of constraints for debugging
2042  *   + SLACK_COMMODITY_BALANCE_UP(node,commodity,level,year,time)
2043  *   - SLACK_COMMODITY_BALANCE_LO(node,commodity,level,year,time)
2044      =G= 0 ;
2045   
2046  * This constraint ensures the FULL (i.e., no spilling) nodal and temporal balance of outputs/imports and inputs/exports commodities listed in full_balance(commodity).
2047  COMMODITY_BALANCE_FULL(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2048                    AND full_balance(commodity))..
2049      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
2050              AND map_tec_lifetime(location,tec,vintage,year) ),
2051  * import into node and output by all technologies located at 'location' sending to 'node' and 'time2' sending to 'time'
2052          output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2053          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)
2054  * export from node and input into technologies located at 'location' taking from 'node' and 'time2' taking from 'time'
2055          - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2056          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )
2057  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (storage)
2058      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )
2059      - STORAGE_CHG(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )
2060  * final consumption (exogenous parameter to be satisfied by the energy+water+xxx system)
2061      - demand_fixed(node,commodity,level,year,time)
2062  * relaxation of constraints for debugging
2063  *   + SLACK_FULL_COMMODITY_BALANCE_UP(node,commodity,level,year,time)
2064  *   - SLACK_FULL_COMMODITY_BALANCE_LO(node,commodity,level,year,time)
2065      =E= 0 ;
2066   
2067  ***
2068  * Equation STOCKS_BALANCE
2069  * """""""""""""""""""""""
2070  * This constraint ensures the inter-temporal balance of commodity stocks.
2071  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2072  *
2073  *  .. math::
2074  *     STOCK_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2075  *         duration\_period_{y} \cdot & \sum_{h} STOCK\_CHG_{n,c,l,y,h} \\
2076  *                                    & + STOCK_{n,c,l,y+1}
2077  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 41
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2078  ***
2079  STOCKS_BALANCE(node,commodity,level,year)$( map_stocks(node,commodity,level,year) )..
2080      STOCK(node,commodity,level,year)$( NOT first_period(year) )
2081      + commodity_stock(node,commodity,level,year) =E=
2082      duration_period(year) * SUM(time$( map_commodity(node,commodity,level,year,time) ),
2083           STOCK_CHG(node,commodity,level,year,time) )
2084      + SUM(year2$( seq_period(year,year2) ), STOCK(node,commodity,level,year2) ) ;
2085   
2086  ***
2087  * Equation STORAGE_BALANCE
2088  * """""""""""""""""""""""
2089  * This constraint ensures the inter-temporal balance of commodity stocks.
2090  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2091  *
2092  *  .. math::
2093  *     STORAGE_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2094  *         duration\_period_{y} \cdot & \sum_{h} STORAGE\_CHG_{n,c,l,y,h} \\
2095  *                                    & + STORAGE_{n,c,l,y+1}
2096  *
2097  ***
2098   
2099  Parameter
2100      storage_to_activity(time)
2101                           /  1   31,
2102                              2   28
2103                              3   31
2104                              4   30
2105                              5   31
2106                              6   30
2107                              7   31
2108                              8   31
2109                              9   30
2110                              10  31
2111                              11  30
2112                              12  31 /;
2113   
2114  set first_time_stg(year_all,time) /2020.1/;
2115  parameter commodity_storage(node,commodity,level,year_all,time);
2116   
2117  commodity_storage(node,commodity,level,'2020','1') = ( bound_storage_up(node,commodity,level,'2020','1') + bound_storage_lo(node,commodity,level,'2020','1') )/2;
2118   
2119  STORAGE_BALANCE(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2120      STORAGE(node,commodity,level,year,time)
2121  * decide whether want to use commodity stock or make a new parameter
2122      - commodity_storage(node,commodity,level,year,time) =E=
2123  *    SUM(time2$( map_commodity(node,commodity,level,year,time2) ),
2124         ( storage_to_activity(time)*STORAGE_CHG(node,commodity,level,year,time) )
2125      + SUM((time2,year2)$seq_year_time(year2,year,time2,time), STORAGE(node,commodity,level,year2,time2) * (1 - storage_loss(node,commodity,level,year2,time2)) ) ;
2126   
2127  STORAGE_BOUND_UP(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2128      STORAGE(node,commodity,level,year,time) =L= bound_storage_up(node,commodity,level,year,time) ;
2129  * might be possible to add here the CAP of a storage_expansio technology, that increases the maximum storage limit
2130   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 42
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2131  STORAGE_BOUND_LO(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2132  *    STORAGE(node,commodity,level,year,time) =G= 0 ;
2133      STORAGE(node,commodity,level,year,time) =G= bound_storage_lo(node,commodity,level,year,time) ;
2134   
2135  *----------------------------------------------------------------------------------------------------------------------*
2136  ***
2137  * Technology section
2138  * ------------------
2139  *
2140  * Technical and engineering constraints
2141  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2142  *
2143  * Equation CAPACITY_CONSTRAINT
2144  * """"""""""""""""""""""""""""
2145  * This constraint ensures that the actual activity of a technology at a node/time cannot exceed available (maintained)
2146  * capacity summed over all vintages, including the technology capacity factor :math:`capacity\_factor_{n,t,y,t}`.
2147  *
2148  *  .. math::
2149  *     \sum_{m} ACT_{n,t,y^V,y,m,h}
2150  *         \leq duration\_time_{h} \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^V,y}
2151  *         \quad t \ \in \ T^{INV}
2152  *
2153  * where :math:`T^{INV} \subseteq T` is the set of all technologies
2154  * for which investment decisions and capacity constraints are relevant.
2155  ***
2156  CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,inv_tec,year,time)
2157          AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2158      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) )
2159          =L= duration_time(time) * capacity_factor(node,inv_tec,vintage,year,time) * CAP(node,inv_tec,vintage,year) ;
2160   
2161  ***
2162  * Equation CAPACITY_MAINTENANCE
2163  * """"""""""""""""""""""""""""""
2164  * This constraint deals with fixed costs for operation and maintainance (O&M) of technology capacity_maintainance.
2165  * Capacity must be maintained over time until decommissioning (no mothballing), and fixed O\&M costs must be paid
2166  * immediately after commissioning.
2167  *
2168  *  .. math::
2169  *     CAP_{n,t,y^V,y} \leq
2170  *     remaining\_capacity_{n,t,y^V,y} \cdot
2171  *     \left\{ \begin{array}{ll}
2172  *         duration\_period_{y^V} \cdot historical\_new\_capacity_{n,t,y^V} \quad & \text{if } y \ \text{is first model period} \\
2173  *         duration\_period_{y^V} \cdot CAP\_NEW_{n,t,y^V} \quad & \text{if } y = y^V \\
2174  *         CAP_{n,t,y^V,y-1} & \text{if } y > y^V \text{ and }
2175  *                                  |y| - |y^V| < technical\_lifetime_{n,t,y^V} \end{array} \right\}
2176  *         \quad \forall \ t \in T^{INV}
2177  *
2178  * The current formulation does not account for construction time in the constraints, but only adds a mark-up
2179  * to the investment costs in the objective function.
2180  ***
2181  CAPACITY_MAINTENANCE(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year) )..
2182      CAP(node,inv_tec,vintage,year) =L=
2183  * discount the capacity in case the technical lifetime ends within a period
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 43
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2184      remaining_capacity(node,inv_tec,vintage,year) * (
2185  * historical installation (built before start of model horizon)
2186          ( duration_period(vintage) * historical_new_capacity(node,inv_tec,vintage)
2187              )$( historical(vintage) AND first_period(year) )
2188  * new capacity built in the current period (vintage == year)
2189          + ( duration_period(vintage) * CAP_NEW(node,inv_tec,vintage)
2190              )$( year_order(year) EQ year_order(vintage) AND NOT historical(vintage) )
2191  * total installed capacity at the end of the previous period
2192          + SUM(year2$( seq_period(year2,year) AND map_tec_lifetime(node,inv_tec,vintage,year2) ),
2193              CAP(node,inv_tec,vintage,year2) )
2194      ) ;
2195   
2196  ***
2197  * Equation OPERATION_CONSTRAINT
2198  * """""""""""""""""""""""""""""
2199  * This constraint provides an upper bound on the total operation of installed capacity over a year.
2200  *
2201  *   .. math::
2202  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h}
2203  *          \leq operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,m,\text{'year'}} \cdot CAP_{n,t,y^V,y}
2204  *
2205  * This constraint is only active if :math:`operation\_factor_{n,t,y^V,y} < 1`.
2206  ***
2207  OPERATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2208          AND operation_factor(node,inv_tec,vintage,year) < 1 )..
2209      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =L=
2210          operation_factor(node,inv_tec,vintage,year) * capacity_factor(node,inv_tec,vintage,year,'year')
2211          * CAP(node,inv_tec,vintage,year) ;
2212   
2213  ***
2214  * Equation MIN_UTILIZATION_CONSTRAINT
2215  * """""""""""""""""""""""""""""""""""
2216  * This constraint provides a lower bound on the total utilization of installed capacity over a year.
2217  *
2218  *   .. math::
2219  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y}
2220  *
2221  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y^V,y}` is defined.
2222  ***
2223  MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2224          AND min_utilization_factor(node,inv_tec,vintage,year) )..
2225      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =G=
2226          min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_tec,vintage,year) ;
2227   
2228  ***
2229  * Constraints representing the firm capacity requirement
2230  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2231  * The following constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
2232  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
2233  *
2234  * The firm capacity a technology provides depends on their reliability factor per rating.
2235  * The rating are defined depending on the share the single technology provides to the
2236  * system. The reliablitiy factor of conventional powerplants is equal to 1. Therefore
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 44
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2237  * they provide their nameplate capacity as firm capacity.
2238  * The reliability factor of wind and solar dependens on the share they have in the
2239  * energy system. Therefore their reliability factor depend on the rating.
2240  *
2241  * Equation COMMODITY_USE_LEVEL
2242  * """"""""""""""""""""""""""""
2243  * This constraint defines the COMMODITY_USE_LEVEL as summed consumption of a
2244  * commodity at a certain level during one year.
2245  *
2246  *   .. math::
2247  *      COMMODITY\_USE_{n,c,l,y} = \sum_{n,t,y^V,m,h} input_{n,t,y^V,y,m,n,c,l,h,h} \cdot \\
2248  *                duration\_time\_rel_{h,h} \cdot ACT_{n,t,y^V,y,m,h}
2249  *
2250  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
2251  * The auxiliary variable :math:`COMMODITY\_USE_{n,c,l,y}` is only required
2252  * for the equations :math:`FIRM\_CAPACITY\_CONSTRAINT` and :math:`FIRM\_CAPACITY\_SHARE`.
2253  ***
2254   
2255  COMMODITY_USE_LEVEL(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
2256      COMMODITY_USE(node,commodity,level,year)
2257      =E= SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
2258                                                      AND map_tec_lifetime(location,tec,vintage,year) ),
2259                  input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2260                  * duration_time_rel(time,time2)
2261                  * ACT(location,tec,vintage,year,mode,time2) )
2262  ;
2263   
2264  ***
2265  * Equation FIRM_CAPACITY_CONSTRAINT
2266  * """""""""""""""""""""""""""""""""
2267  * This constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
2268  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
2269  *
2270  *   .. math::
2271  *      \sum_{t, q \substack{t \in T^{INV} \\ y^V \leq y} } reliability\_factor_{n,t,y,c,l,h,q} \cdot
2272  *                CAP\_FIRM_{n,t,c,l,y,q} \geq \\
2273  *         peak\_load\_factor_{n,c,l,y,h} \cdot COMMODITY\_USE_{n,c,l,y}
2274  *
2275  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
2276  ***
2277  FIRM_CAPACITY_CONSTRAINT(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
2278      SUM((inv_tec,rating), CAP_FIRM(node,inv_tec,commodity,level,year,rating)
2279                          * reliability_factor(node,inv_tec,year,commodity,level,time,rating) )
2280      =G= peak_load_factor(node,commodity,level,year,time) * COMMODITY_USE(node,commodity,level,year)
2281  ;
2282   
2283  ***
2284  * Equation FIRM_CAPACITY_SHARE
2285  * """"""""""""""""""""""""""""
2286  * Limits the firm capacity per rating to the size of the penetration bin of this rating.
2287  *
2288  *   .. math::
2289  *      CAP\_FIRM_{n,t,c,l,y,q} \leq rating\_bin_{n,t,y,c,l,h,q} \cdot COMMODITY\_USE_{n,c,l,y}
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 45
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2290  *
2291  * This constraint is only active if :math:`reliability\_bin_{n,t,y,c,l,t,q}` is defined.
2292  ***
2293  FIRM_CAPACITY_SHARE(node,inv_tec,commodity,level,year,rating,time)$(
2294          rating_bin(node,inv_tec,year,commodity,level,time,rating) ) ..
2295      CAP_FIRM(node,inv_tec,commodity,level,year,rating)
2296      =L= rating_bin(node,inv_tec,year,commodity,level,time,rating) * COMMODITY_USE(node,commodity,level,year)
2297  ;
2298   
2299  ***
2300  * .. _reliability_constraint:
2301  *
2302  * Equation FIRM_CAPACITY_PROVISION
2303  * """"""""""""""""""""""""""""""""
2304  * Limits the firm capacity of the renewables technologies to the total installed capacity of each technology.
2305  *
2306  *   .. math::
2307  *      \sum_{r,h} CAP\_FIRM_{n,t,c,l,y,q} \leq \sum_{y^V \leq y} CAP_{n,t,y^Y,y} \quad \forall t \in T^{INV}
2308  *
2309  * This constraint is only active if :math:`reliability\_factor_{n,t,y,c,l,h,q}` is defined.
2310  ***
2311  FIRM_CAPACITY_PROVISION(node,inv_tec,year,commodity,level)$(
2312          SUM(rating, map_rating(node,inv_tec,commodity,level,rating,year) ) )..
2313      SUM( (rating,time)$( map_rating(node,inv_tec,commodity,level,rating,year) AND
2314                     reliability_factor(node,inv_tec,year,commodity,level,time,rating) ) ,
2315           CAP_FIRM(node,inv_tec,commodity,level,year,rating) )
2316      =L= SUM(vintage$( map_tec_lifetime(node,inv_tec,vintage,year) ), CAP(node,inv_tec,vintage,year) )
2317  ;
2318   
2319  ***
2320  * .. _flexibility_constraint:
2321  *
2322  * Equation OPERATING_RESERVE_CONSTRAINT
2323  * """""""""""""""""""""""""""""""""""""
2324  * This constraint ensures that, in each sub-annual time slice, there is a sufficient share of flexible technologies in
2325  * the power generation mix. This heading is a placeholder for a new formulation using the extended index set structure.
2326  ***
2327   
2328   
2329  ***
2330  * Bounds on capacity and activity
2331  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2332  *
2333  * Equation NEW_CAPACITY_BOUND_UP
2334  * """"""""""""""""""""""""""""""
2335  * This constraint provides upper bounds on new capacity installation.
2336  *
2337  *   .. math::
2338  *      CAP\_NEW_{n,t,y} \leq bound\_new\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2339  *
2340  ***
2341  NEW_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_new_capacity_up(node,inv_tec,year) )..
2342      CAP_NEW(node,inv_tec,year) =L= bound_new_capacity_up(node,inv_tec,year)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 46
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2343  * + SLACK_CAP_NEW_BOUND_UP(node,inv_tec,year)
2344  ;
2345   
2346  ***
2347  * Equation NEW_CAPACITY_BOUND_LO
2348  * """"""""""""""""""""""""""""""
2349  * This constraint provides lower bounds on new capacity installation.
2350  *
2351  *   .. math::
2352  *      CAP\_NEW_{n,t,y} \geq bound\_new\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2353  *
2354  ***
2355  NEW_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_new_capacity_lo(node,inv_tec,year) )..
2356      CAP_NEW(node,inv_tec,year) =G= bound_new_capacity_lo(node,inv_tec,year)
2357  * - SLACK_CAP_NEW_BOUND_LO(node,inv_tec,year)
2358  ;
2359   
2360  ***
2361  * Equation TOTAL_CAPACITY_BOUND_UP
2362  * """"""""""""""""""""""""""""""""
2363  * This constraint gives upper bounds on the total installed capacity of a technology in a specific year of operation
2364  * summed over all vintages.
2365  *
2366  *   .. math::
2367  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \leq bound\_total\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2368  *
2369  ***
2370  TOTAL_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_total_capacity_up(node,inv_tec,year) )..
2371      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
2372          CAP(node,inv_tec,vintage,year) )
2373      =L= bound_total_capacity_up(node,inv_tec,year)
2374  * + SLACK_CAP_TOTAL_BOUND_UP(node,inv_tec,year)
2375  ;
2376   
2377  ***
2378  * Equation TOTAL_CAPACITY_BOUND_LO
2379  * """"""""""""""""""""""""""""""""
2380  * This constraint gives lower bounds on the total installed capacity of a technology.
2381  *
2382  *   .. math::
2383  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \geq bound\_total\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2384  *
2385  ***
2386  TOTAL_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_total_capacity_lo(node,inv_tec,year) )..
2387      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
2388          CAP(node,inv_tec,vintage,year) )
2389       =G= bound_total_capacity_lo(node,inv_tec,year)
2390  * - SLACK_CAP_TOTAL_BOUND_LO(node,inv_tec,year)
2391  ;
2392   
2393  ***
2394  * Equation ACTIVITY_BOUND_UP
2395  * """"""""""""""""""""""""""
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 47
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2396  * This constraint provides lower bounds of a technology activity by mode, summed over all vintages.
2397  *
2398  *   .. math::
2399  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,m,y,h}
2400  *
2401  ***
2402  ACTIVITY_BOUND_UP(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time)
2403          AND is_bound_activity_up(node,tec,year,mode,time) )..
2404      SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), ACT(node,tec,vintage,year,mode,time) ) =L=
2405      bound_activity_up(node,tec,year,mode,time)
2406  * + SLACK_ACT_BOUND_UP(node,tec,year,mode,time)
2407  ;
2408   
2409  ***
2410  * Equation ACTIVITY_BOUND_LO
2411  * """"""""""""""""""""""""""
2412  * This constraint provides lower bounds of a technology activity by mode summed over all vintages.
2413  *
2414  *   .. math::
2415  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,m,h}
2416  *
2417  * We assume that :math:`bound\_activity\_lo_{n,t,y,m,h} = 0`
2418  * unless explicitly stated otherwise.
2419  ***
2420  ACTIVITY_BOUND_LO(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time) )..
2421      SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), ACT(node,tec,vintage,year,mode,time) ) =G=
2422      bound_activity_lo(node,tec,year,mode,time)
2423  * - SLACK_ACT_BOUND_LO(node,tec,year,mode,time)
2424  ;
2425   
2426  *----------------------------------------------------------------------------------------------------------------------*
2427  ***
2428  * Constraints on shares of technologies and commodities
2429  * -----------------------------------------------------
2430  * This section allows to include upper and lower bounds on the shares of modes used by a technology
2431  * or the shares of commodities produced or consumed by groups of technologies.
2432  *
2433  * Share constraints on activity by mode
2434  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2435  * Equation SHARES_MODE_UP
2436  * """""""""""""""""""""""
2437  * This constraint provides upper bounds of the share of the activity of one mode
2438  * of a technology. For example, it could limit the share of heat that can be produced
2439  * in a combined heat and electricity power plant.
2440  *
2441  *   .. math::
2442  *     ACT_{n^L,t,y^V,y,m,h^A}
2443  *     \leq share\_mode\_up_{s,n,y,m,h} \cdot
2444  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
2445  *
2446  ***
2447  $ONTEXT
       SHARE_CONSTRAINT_MODE_UP(shares,node,tec,mode,year,time)$(
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 48
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


          map_tec_act(node,tec,year,mode,time) AND
          share_mode_up(shares,node,tec,mode,year,time)
      )..
      * activity of mode to be constrained
          SUM(
              vintage$( map_tec_lifetime(node,tec,vintage,year) ),
              ACT(node,tec,vintage,year,mode,time)
          )
          =L=
          share_mode_up(shares,node,tec,mode,year,time) *
      * activity aggregated over all modes
          SUM(
              (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
              ACT(node,tec,vintage,year,mode2,time)
          ) ;
       
      ***
      * Equation SHARES_MODE_LO
      * """""""""""""""""""""""
      * This constraint provides lower bounds of the share of the activity of one mode of a technology.
      *
      *   .. math::
      *     ACT_{n^L,t,y^V,y,m,h^A}
      *     \geq share\_mode\_lo_{s,n,y,m,h} \cdot
      *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
      *
      ***
      SHARE_CONSTRAINT_MODE_LO(shares,node,tec,mode,year,time)$(
          map_tec_act(node,tec,year,mode,time) AND
          share_mode_lo(shares,node,tec,mode,year,time)
      )..
      * activity of mode to be constrained
          SUM(
              vintage$( map_tec_lifetime(node,tec,vintage,year) ),
              ACT(node,tec,vintage,year,mode,time)
          )
          =G=
          share_mode_lo(shares,node,tec,mode,year,time) *
      * activity aggregated over all modes
          SUM(
              (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
              ACT(node,tec,vintage,year,mode2,time)
          ) ;
2492  $OFFTEXT
2493   
2494  ***
2495  * Share constraints on commodities
2496  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2497  * These constraints allow to set upper and lower bound on the quantity of commodities produced or consumed by a group
2498  * of technologies relative to the commodities produced or consumed by another group.
2499  *
2500  * The implementation is generic and flexible, so that any combination of commodities, levels, technologies and nodes
2501  * can be put in relation to any other combination.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 49
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2502  *
2503  * The notation :math:`S^{share}` represents the mapping set `map_shares_commodity_share` denoting all technology types,
2504  * nodes, commodities and levels to be included in the numerator, and :math:`S^{total}` is
2505  * the equivalent mapping set `map_shares_commodity_total` for the denominator.
2506  *
2507  * Equation SHARE_CONSTRAINT_COMMODITY_UP
2508  * """"""""""""""""""""""""""""""""""""""
2509  *   .. math::
2510  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
2511  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2512  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
2513  *      & \geq
2514  *        share\_commodity\_up_{s,n,y,h} \cdot
2515  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
2516  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2517  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
2518  *
2519  * This constraint is only active if :math:`share\_commodity\_up_{s,n,y,h}` is defined.
2520  ***
2521  $ONTEXT
       SHARE_CONSTRAINT_COMMODITY_UP(shares,node_share,year,time)$( share_commodity_up(shares,node_share,year,time) )..
      * activity by type_tec_share technologies with map_shares_generic_share entries and a specific mode
          SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
              ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) OR
                 map_shares_commodity_share(shares,node_share,node,type_tec_share,'all',commodity,level) ) AND
              cat_tec(type_tec_share,tec) AND
              map_tec_act(location,tec,year,mode,time2) AND
              map_tec_lifetime(location,tec,vintage,year)
          ),
              (
                  output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
                  input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
              ) *
              duration_time_rel(time,time2) *
              ACT(location,tec,vintage,year,mode,time2)
          )
          =L=
          share_commodity_up(shares,node_share,year,time) * (
      * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
          SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
              ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) OR
                 map_shares_commodity_total(shares,node_share,node,type_tec_total,'all',commodity,level) ) AND
              cat_tec(type_tec_total,tec) AND
              map_tec_act(location,tec,year,mode,time2) AND
              map_tec_lifetime(location,tec,vintage,year)
          ),
              (
                  output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
                  input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
              ) *
              duration_time_rel(time,time2) *
              ACT(location,tec,vintage,year,mode,time2)
          ) ) ;
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 50
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2555  $OFFTEXT
2556   
2557  ***
2558  * Equation SHARE_CONSTRAINT_COMMODITY_LO
2559  * """"""""""""""""""""""""""""""""""""""
2560  *   .. math::
2561  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
2562  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2563  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
2564  *      & \leq
2565  *        share\_commodity\_lo_{s,n,y,h} \cdot
2566  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
2567  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2568  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
2569  *
2570  * This constraint is only active if :math:`share\_commodity\_lo_{s,n,y,h}` is defined.
2571  ***
2572  SHARE_CONSTRAINT_COMMODITY_LO(shares,node_share,year,time)$( share_commodity_lo(shares,node_share,year,time) )..
2573  * total input and output by `type_tec_share` technologies mapped to respective commodity, level and node
2574      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
2575           map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level)  AND
2576          cat_tec(type_tec_share,tec) AND
2577          map_tec_act(location,tec,year,mode,time2) AND
2578          map_tec_lifetime(location,tec,vintage,year)
2579      ),
2580          (
2581              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
2582              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2583          ) *
2584          duration_time_rel(time,time2) *
2585          ACT(location,tec,vintage,year,mode,time2)
2586      )
2587      =G=
2588      share_commodity_lo(shares,node_share,year,time) * (
2589  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
2590      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
2591           map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level)  AND
2592          cat_tec(type_tec_total,tec) AND
2593          map_tec_act(location,tec,year,mode,time2) AND
2594          map_tec_lifetime(location,tec,vintage,year)
2595      ),
2596          (
2597              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
2598              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2599          ) *
2600          duration_time_rel(time,time2) *
2601          ACT(location,tec,vintage,year,mode,time2)
2602      ) ) ;
2603   
2604  ***
2605  * .. _dynamic_constraints:
2606  *
2607  * Dynamic constraints on market penetration
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 51
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2608  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2609  * The constraints in this section specify dynamic upper and lower bounds on new capacity and activity,
2610  * i.e., constraints on market penetration and rate of expansion or phase-out of a technology.
2611  *
2612  * The formulation directly includes the option for 'soft' relaxations of dynamic constraints
2613  * (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
2614  *
2615  * Equation NEW_CAPACITY_CONSTRAINT_UP
2616  * """""""""""""""""""""""""""""""""""
2617  * The level of new capacity additions cannot be greater than an initial value (compounded over the period duration),
2618  * annual growth of the existing 'capital stock', and a "soft" relaxation of the upper bound.
2619  *
2620  *  .. math::
2621  *     CAP\_NEW_{n,t,y}
2622  *         \leq & ~ initial\_new\_capacity\_up_{n,t,y}
2623  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} - 1 }
2624  *                        { growth\_new\_capacity\_up_{n,t,y} } \\
2625  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
2626  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} \\
2627  *              & + CAP\_NEW\_UP_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_up_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
2628  *         & \quad \forall \ t \ \in \ T^{INV}
2629  *
2630  * Here, :math:`|y|` is the number of years in period :math:`y`, i.e., :math:`duration\_period_{y}`.
2631  ***
2632  NEW_CAPACITY_CONSTRAINT_UP(node,inv_tec,year)$( map_tec(node,inv_tec,year)
2633          AND is_dynamic_new_capacity_up(node,inv_tec,year) )..
2634  * actual new capacity
2635      CAP_NEW(node,inv_tec,year) =L=
2636  * initial new capacity (compounded over the duration of the period)
2637          initial_new_capacity_up(node,inv_tec,year) * (
2638              ( ( POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
2639                  / growth_new_capacity_up(node,inv_tec,year) )$( growth_new_capacity_up(node,inv_tec,year) )
2640                + ( duration_period(year) )$( NOT growth_new_capacity_up(node,inv_tec,year) )
2641              )
2642  * growth of 'capital stock' from previous period
2643          + SUM(year_all2$( seq_period(year_all2,year) ),
2644              CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
2645                + historical_new_capacity(node,inv_tec,year_all2) )
2646                # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2647              * POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) )
2648  * optional relaxation for calibration and debugging
2649  * + SLACK_CAP_NEW_DYNAMIC_UP(node,inv_tec,year)
2650  ;
2651   
2652  * GAMS implementation comment:
2653  * The sums in the constraint have to be over `year_all2` (not `year2`) to also get the dynamic effect from historical
2654  * new capacity. If one would sum over `year2`, periods prior to the first model year would be ignored.
2655   
2656  ***
2657  * Equation NEW_CAPACITY_CONSTRAINT_LO
2658  * """""""""""""""""""""""""""""""""""
2659  * This constraint gives dynamic lower bounds on new capacity.
2660  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 52
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2661  *  .. math::
2662  *     CAP\_NEW_{n,t,y}
2663  *         \geq & - initial\_new\_capacity\_lo_{n,t,y}
2664  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} }
2665  *                        { growth\_new\_capacity\_lo_{n,t,y} } \\
2666  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
2667  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} \\
2668  *              & - CAP\_NEW\_LO_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_lo_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
2669  *         & \quad \forall \ t \ \in \ T^{INV}
2670  *
2671  ***
2672  NEW_CAPACITY_CONSTRAINT_LO(node,inv_tec,year)$( map_tec(node,inv_tec,year)
2673          AND is_dynamic_new_capacity_lo(node,inv_tec,year) )..
2674  * actual new capacity
2675      CAP_NEW(node,inv_tec,year) =G=
2676  * initial new capacity (compounded over the duration of the period)
2677          - initial_new_capacity_lo(node,inv_tec,year) * (
2678              ( ( POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
2679                  / growth_new_capacity_lo(node,inv_tec,year) )$( growth_new_capacity_lo(node,inv_tec,year) )
2680                + ( duration_period(year) )$( NOT growth_new_capacity_lo(node,inv_tec,year) )
2681              )
2682  * growth of 'capital stock' from previous period
2683          + SUM(year_all2$( seq_period(year_all2,year) ),
2684                  CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
2685                  + historical_new_capacity(node,inv_tec,year_all2)
2686                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2687              ) * POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) )
2688  * optional relaxation for calibration and debugging
2689  * - SLACK_CAP_NEW_DYNAMIC_LO(node,inv_tec,year)
2690  ;
2691   
2692   
2693  ***
2694  * Equation ACTIVITY_CONSTRAINT_UP
2695  * """""""""""""""""""""""""""""""
2696  * This constraint gives dynamic upper bounds on the market penetration of a technology activity.
2697  *
2698  *  .. math::
2699  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
2700  *         \leq & ~ initial\_activity\_up_{n,t,y,h}
2701  *             \cdot \frac{ \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 }
2702  *                        { growth\_activity\_up_{n,t,y,h} } \\
2703  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
2704  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
2705  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} \\
2706  *             & + ACT\_UP_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
2707  *
2708  ***
2709  ACTIVITY_CONSTRAINT_UP(node,tec,year,time)$( map_tec_time(node,tec,year,time)
2710          AND is_dynamic_activity_up(node,tec,year,time) )..
2711  * actual activity (summed over modes)
2712      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
2713              ACT(node,tec,vintage,year,mode,time) ) =L=
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 53
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2714  * initial activity (compounded over the duration of the period)
2715          initial_activity_up(node,tec,year,time) * (
2716              ( ( POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
2717                  / growth_activity_up(node,tec,year,time) )$( growth_activity_up(node,tec,year,time) )
2718                + ( duration_period(year) )$( NOT growth_activity_up(node,tec,year,time) )
2719              )
2720  * growth of 'capital stock' from previous period
2721          + SUM((year_all2)$( seq_period(year_all2,year) ),
2722              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
2723                                   AND model_horizon(year_all2) ),
2724                          ACT(node,tec,vintage,year_all2,mode,time) )
2725                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
2726                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2727                  )
2728              * POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) )
2729  * optional relaxation for calibration and debugging
2730  * + SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
2731  ;
2732   
2733  ***
2734  * Equation ACTIVITY_CONSTRAINT_LO
2735  * """""""""""""""""""""""""""""""
2736  * This constraint gives dynamic lower bounds on the market penetration of a technology activity.
2737  *
2738  *  .. math::
2739  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
2740  *         \geq & - initial\_activity\_lo_{n,t,y,h}
2741  *             \cdot \frac{ \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 }
2742  *                        { growth\_activity\_lo_{n,t,y,h} } \\
2743  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
2744  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
2745  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} \\
2746  *             & - ACT\_LO_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
2747  *
2748  ***
2749  ACTIVITY_CONSTRAINT_LO(node,tec,year,time)$( map_tec_time(node,tec,year,time)
2750          AND is_dynamic_activity_lo(node,tec,year,time) )..
2751  * actual activity (summed over modes)
2752      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
2753              ACT(node,tec,vintage,year,mode,time) ) =G=
2754  * initial activity (compounded over the duration of the period)
2755          - initial_activity_lo(node,tec,year,time) * (
2756              ( ( POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
2757                  / growth_activity_lo(node,tec,year,time) )$( growth_activity_lo(node,tec,year,time) )
2758                + ( duration_period(year) )$( NOT growth_activity_lo(node,tec,year,time) )
2759              )
2760  * growth of 'capital stock' from previous period
2761          + SUM((year_all2)$( seq_period(year_all2,year) ),
2762              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
2763                                   AND model_horizon(year_all2)),
2764                          ACT(node,tec,vintage,year_all2,mode,time) )
2765                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
2766                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 54
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2767                  )
2768              * POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) )
2769  * optional relaxation for calibration and debugging
2770  * - SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
2771  ;
2772   
2773  *----------------------------------------------------------------------------------------------------------------------*
2774  ***
2775  * Emission section
2776  * ----------------
2777  *
2778  * Auxiliary variable for aggregate emissions
2779  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2780  *
2781  * Equation EMISSION_EQUIVALENCE
2782  * """""""""""""""""""""""""""""
2783  * This constraint simplifies the notation of emissions aggregated over different technology types
2784  * and the land-use model emulator. The formulation includes emissions from all sub-nodes :math:`n^L` of :math:`n`.
2785  *
2786  *   .. math::
2787  *      EMISS_{n,e,\widehat{t},y} =
2788  *          \sum_{n^L \in N(n)} \Bigg(
2789  *              \sum_{t \in T(\widehat{t}),y^V \leq y,m,h }
2790  *                  emission\_factor_{n^L,t,y^V,y,m,e} \cdot ACT_{n^L,t,y^V,y,m,h} \\
2791  *              + \sum_{s} \ land\_emission_{n^L,s,y,e} \cdot LAND_{n^L,s,y}
2792  *                   \text{ if } \widehat{t} \in \widehat{T}^{LAND} \Bigg)
2793  *
2794  ***
2795  EMISSION_EQUIVALENCE(node,emission,type_tec,year)..
2796      EMISS(node,emission,type_tec,year)
2797      =E=
2798      SUM(location$( map_node(node,location) ),
2799  * emissions from technology activity
2800          SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
2801              AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
2802          emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
2803  * emissions from land use if 'type_tec' is included in the dynamic set 'type_tec_land'
2804  *        + SUM(land_scenario$( type_tec_land(type_tec) ),
2805  *            land_emission(location,land_scenario,year,emission) * LAND(location,land_scenario,year) )
2806        ) ;
2807   
2808  ***
2809  * Bound on emissions
2810  * ^^^^^^^^^^^^^^^^^^
2811  *
2812  * Equation EMISSION_CONSTRAINT
2813  * """"""""""""""""""""""""""""
2814  * This constraint enforces upper bounds on emissions (by emission type). For all bounds that include multiple periods,
2815  * the parameter :math:`bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}` is scaled to represent average annual
2816  * emissions over all years included in the year-set :math:`\widehat{y}`.
2817  *
2818  * The formulation includes historical emissions and allows to model constraints ranging over both the model horizon
2819  * and historical periods.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 55
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2820  *
2821  *   .. math::
2822  *      \frac{
2823  *          \sum_{y' \in Y(\widehat{y}), e \in E(\widehat{e})}
2824  *              \begin{array}{l}
2825  *                  duration\_period_{y'} \cdot emission\_scaling_{\widehat{e},e} \cdot \\
2826  *                  \Big( EMISS_{n,e,\widehat{t},y'} + \sum_{m} historical\_emission_{n,e,\widehat{t},y'} \Big)
2827  *              \end{array}
2828  *          }
2829  *        { \sum_{y' \in Y(\widehat{y})} duration\_period_{y'} }
2830  *      \leq bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}
2831  *
2832  ***
2833  EMISSION_CONSTRAINT(node,type_emission,type_tec,type_year)$is_bound_emission(node,type_emission,type_tec,type_year)..
2834      SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
2835          duration_period(year_all2) * emission_scaling(type_emission,emission) *
2836              ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
2837                  + historical_emission(node,emission,type_tec,year_all2) )
2838        )
2839      / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
2840      =L= bound_emission(node,type_emission,type_tec,type_year) ;
2841   
2842  *----------------------------------------------------------------------------------------------------------------------*
2843  ***
2844  * .. _section_of_generic_relations:
2845  *
2846   
2847  *----------------------------------------------------------------------------------------------------------------------*
2848  * model statements                                                                                                     *
2849  *----------------------------------------------------------------------------------------------------------------------*
2850   
2851  Model MESSAGE_LP /
2852      OBJECTIVE
2853      COST_ACCOUNTING_NODAL
2854      COMMODITY_BALANCE
2855      COMMODITY_BALANCE_FULL
2856      STOCKS_BALANCE
2857      STORAGE_BALANCE
2858      STORAGE_BOUND_LO
2859      STORAGE_BOUND_UP
2860      CAPACITY_CONSTRAINT
2861      CAPACITY_MAINTENANCE
2862      OPERATION_CONSTRAINT
2863      MIN_UTILIZATION_CONSTRAINT
2864      COMMODITY_USE_LEVEL
2865      FIRM_CAPACITY_CONSTRAINT
2866      FIRM_CAPACITY_PROVISION
2867      FIRM_CAPACITY_SHARE
2868      NEW_CAPACITY_BOUND_UP
2869      NEW_CAPACITY_BOUND_LO
2870      TOTAL_CAPACITY_BOUND_UP
2871      TOTAL_CAPACITY_BOUND_LO
2872      ACTIVITY_BOUND_UP
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 56
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2873      ACTIVITY_BOUND_LO
2874      NEW_CAPACITY_CONSTRAINT_UP
2875      NEW_CAPACITY_CONSTRAINT_LO
2876      ACTIVITY_CONSTRAINT_UP
2877      ACTIVITY_CONSTRAINT_LO
2878      EMISSION_EQUIVALENCE
2879      EMISSION_CONSTRAINT
2880      SHARE_CONSTRAINT_COMMODITY_LO
2881  / ;
2882   
2883  MESSAGE_LP.holdfixed = 1 ;
2884  MESSAGE_LP.optfile = 1 ;
2885  MESSAGE_LP.optcr = 0 ;
2886   
2887   
2888   
2889   
2890   
2891  *----------------------------------------------------------------------------------------------------------------------*
2892  * solve statements (including the loop for myopic or rolling-horizon optimization)                                     *
2893  *----------------------------------------------------------------------------------------------------------------------*
2894   
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_solve.gms
2895  $INCLUDE MESSAGE/model_solve.gms
2896  ***
2897  * Solve statement workflow
2898  * ========================
2899  * This page is generated from the auto-documentation in ``MESSAGE/model_solve.gms``.
2900  *
2901  * This part of the code includes the perfect-foresight, myopic and rolling-horizon model solve statements
2902  * including the required accounting of investment costs beyond the model horizon.
2903  ***
2904   
2905  ***
2906  * Perfect-foresight model
2907  * ~~~~~~~~~~~~~~~~~~~~~~~
2908  * For the perfect foresight version of |MESSAGEix|, include all years in the model horizon and solve the entire model.
2909  * This is the standard option; the GAMS global variable ``%foresight%=0`` by default.
2910  *
2911  * .. math::
2912  *    \min_x OBJ = \sum_{y \in Y} OBJ_y(x_y)
2913  ***
2914   
2915  * reset year in case it was set by MACRO to include the base year before
2916      year(year_all) = no ;
2917  * include all model periods in the optimization horizon (excluding historical periods prior to 'first_period')
2918      year(year_all)$( model_horizon(year_all) ) = yes ;
2919   
2920  * write a status update to the log file, solve the model
2921      put_utility 'log' /'+++ Solve the perfect-foresight version of MESSAGEix +++ ' ;
2922      Solve MESSAGE_LP using LP minimizing OBJ ;
2923   
2924  * write model status summary
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 57
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2925      status('perfect_foresight','modelstat') = MESSAGE_LP.modelstat ;
2926      status('perfect_foresight','solvestat') = MESSAGE_LP.solvestat ;
2927      status('perfect_foresight','resUsd')    = MESSAGE_LP.resUsd ;
2928      status('perfect_foresight','objEst')    = MESSAGE_LP.objEst ;
2929      status('perfect_foresight','objVal')    = MESSAGE_LP.objVal ;
2930   
2931  * write an error message if model did not solve to optimality
2932      IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
2933          put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
2934          ABORT "MESSAGEix did not solve to optimality!"
2935      ) ;
2936   
2937  * rescale the dual of the emission constraint to account that the constraint is defined on the average year, not total
2938  EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)$(
2939          EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) ) =
2940      EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) / sum(year$( cat_year(type_year,year) ), 1 ) ;
2941   
2942  * assign auxiliary variables DEMAND, PRICE_COMMODITY and PRICE_EMISSION for integration with MACRO and reporting
2943      DEMAND.l(node,commodity,level,year,time) = demand_fixed(node,commodity,level,year,time) ;
2944      PRICE_COMMODITY.l(node,commodity,level,year,time) = COMMODITY_BALANCE_FULL.m(node,commodity,level,year,time)
2945          / discountfactor(year) ;
2946      PRICE_EMISSION.l(node,type_emission,type_tec,year)$( SUM(type_year$( cat_year(type_year,year) ), 1 ) ) =
2947              SMAX(type_year$( cat_year(type_year,year) ),
2948                  - EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) / discountfactor(year) ) ;
2949      PRICE_EMISSION.l(node,type_emission,type_tec,year)$(
2950          PRICE_EMISSION.l(node,type_emission,type_tec,year) = - inf ) = 0 ;
2951   
2952  *----------------------------------------------------------------------------------------------------------------------*
2953  * post-processing and export to gdx                                                                                    *
2954  *----------------------------------------------------------------------------------------------------------------------*
2955   
2956  * calculation of commodity import costs by node, commodity and year
2957  * import_cost(node2, commodity, year) =
2958  *          SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
2959  *            AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
2960  * import into node2 from other nodes
2961  *          input(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
2962  *        * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
2963  *        * COMMODITY_BALANCE.M(node,commodity,level,year,time) / discountfactor(year) )
2964  *;
2965   
2966  * calculation of commodity export costs by node, commodity and year
2967  *export_cost(node2, commodity, year) =
2968  *          SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
2969  *            AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
2970  * export from node2 to other market
2971  *          output(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
2972  *        * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
2973  *        * COMMODITY_BALANCE.M(node,commodity,level,year,time) / discountfactor(year) )
2974  *;
2975   
2976  * net commodity trade costs by node and year
2977  *trade_cost(node2, year) = SUM(commodity, import_cost(node2, commodity, year) - export_cost(node2, commodity, year)) ;
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 58
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2978   
2979  * reporting of net total costs (excluding emission taxes) as result of MESSAGE run
2980  *COST_NODAL_NET.L(location,year) =
2981  *    COST_NODAL.L(location,year) + trade_cost(location,year)
2982  * subtract emission taxes applied at any higher nodal level (via map_node set)
2983  *    - sum((type_emission,emission,type_tec,type_year,node)$( emission_scaling(type_emission,emission)
2984  *            AND map_node(node,location) AND cat_year(type_year,year) ),
2985  *        emission_scaling(type_emission,emission) * tax_emission(node,type_emission,type_tec,type_year)
2986  *        * EMISS.L(location,emission,type_tec,year) )
2987  *;
2988   
2989  * include MESSAGE reporting
INCLUDE    C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/reporting.gms
2990  $INCLUDE MESSAGE/reporting.gms
2991  ***
2992  * Standard output reports
2993  * =======================
2994  * This page is generated from the auto-documentation in ``MESSAGE/reporting.gms``.
2995  *
2996  * This part of the code contains the definitions and scripts for a number of standard output reports.
2997  * These default reports will be created after every MESSAGE run.
2998  ***
2999   
3000  *----------------------------------------------------------------------------------------------------------------------*
3001  * The following parts are quick-and-dirty reporting 'flags'
3002  *----------------------------------------------------------------------------------------------------------------------*
3003   
3004  Set
3005      report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)
3006      report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)
3007  ;
3008   
3009  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time) = no ;
3010  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)$(
3011      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
3012      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9) ) = yes ;
3013   
3014  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time) = no ;
3015  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)$(
3016      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
3017      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) ) = yes ;
3018   
3019   
3020  * dump all input data, processed data and results to a gdx file
3021  execute_unload "output\MSGoutput_multiple_SDG.gdx"
3022   
3023  put_utility 'log' / /"+++ End of MESSAGEix (stand-alone) run - have a nice day! +++ " ;
3024   
3025  *----------------------------------------------------------------------------------------------------------------------*
3026  * end of file - have a nice day!                                                                                       *
3027  *----------------------------------------------------------------------------------------------------------------------*
3028   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 59
The MESSAGEix Integrated Assessment Model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE_run.gms
     2       58 INCLUDE        1      58  .C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_setup.gms
     3       72 IF EXIST       2      14  .C:\Users\vinca\Documents\Github\indus_ix\model\data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx
     4      125 INCLUDE        2      67  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/auxiliary_settings.gms
     5      165 INCLUDE        2      70  ..C:\Users\vinca\Documents\Github\indus_ix\model\version.gms
     6      184 INCLUDE        2      71  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/version_check.gms
     7      192 GDXIN          6       8  ..C:\Users\vinca\Documents\Github\indus_ix\model\data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx
     8      204 INCLUDE        2      74  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/sets_maps_def.gms
     9      559 INCLUDE        2      75  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/parameter_def.gms
    10     1175 INCLUDE        2      78  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/data_load.gms
    11     1184 GDXIN         10       9  ..C:\Users\vinca\Documents\Github\indus_ix\model\data\MSGdata_multiple_SDG_EF.F_IT.T_EM.T_S6.T_S7.T_S2.T.gdx
    12     1233 INCLUDE       10      58  ...C:\Users\vinca\Documents\Github\indus_ix\model\includes/period_parameter_assignment.gms
    13     1447 INCLUDE        2      81  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/scaling_investment_costs.gms
    14     1626 INCLUDE        2      87  ..C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_core.gms
    15     2895 INCLUDE        1      65  .C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/model_solve.gms
    16     2990 INCLUDE        1     105  .C:\Users\vinca\Documents\Github\indus_ix\model\MESSAGE/reporting.gms


COMPILATION TIME     =        0.047 SECONDS     17 MB  24.9.1 r63795 WEX-WEI
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/09/19 17:25:00 Page 60
The MESSAGEix Integrated Assessment Model
Model Statistics    SOLVE MESSAGE_LP Using LP From line 2922


MODEL STATISTICS

BLOCKS OF EQUATIONS          29     SINGLE EQUATIONS      927,700
BLOCKS OF VARIABLES           8     SINGLE VARIABLES      835,357
NON ZERO ELEMENTS    33,505,874


GENERATION TIME      =       47.797 SECONDS  2,897 MB  24.9.1 r63795 WEX-WEI


EXECUTION TIME       =       50.844 SECONDS  2,897 MB  24.9.1 r63795 WEX-WEI

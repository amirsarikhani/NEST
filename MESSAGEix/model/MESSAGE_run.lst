GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 1
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


   2  $ONDOLLAR
   3  $ONTEXT
       
         Copyright 2017 IIASA Energy Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system optimization model MESSAGEix
      For the most recent version of this code, please visit https://github.com/iiasa/message_ix.
      For a comprehensive documentation of the MESSAGEix framework and the ix modeling platform,
      please visit http://www.iiasa.ac.at/message_ix/.
       
      Please cite as:
       
          Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp,
          Clara Orthofer, Michael Pimmer, Keywan Riahi, and Volker Krey.
          The MESSAGEix Integrated Assessment model and the ix modeling platform.
          in preparation.
       
  31  $OFFTEXT
  32   
  33  ***
  34  * Run script for |MESSAGEix| (stand-alone)
  35  * ========================================
  36  * This page is generated from the auto-documentation in ``model/MESSAGE_run.gms``.
  37  *
  38  * This is |MESSAGEix| version |version|. The version number must match the version number
  39  * of the ``ixmp`` ``MESSAGE``-scheme specifications used for exporting data and importing results.
  40  *
  41  * This file contains the workflow of a |MESSAGEix|-standalone run. It can be called:
  42  *  - Via the scientific programming API's using the packages/libraries ``ixmp`` and ``message_ix``,
  43  *    calling the method ``solve()`` of the ``ixmp``.Scenario class (see the tutorials).
  44  *  - using the file ``MESSAGE_master.gms`` with the option ``$SETGLOBAL macromode "none"``,
  45  *    where the input data file name and other options are stated explicitly, or
  46  *  - directly from the command line, with the input data file name
  47  *    and other options specific as command line parameters, e.g.
  48  *
  49  *    ``gams MESSAGE_run.gms --in="<data-file>" [--out="<output-file>"]``
  50  *
  51  * By default, the data file (in gdx format) should be located in the ``model/data`` folder
  52  * and be named in the format ``MsgData_<name>.gdx``. Upon completion of the GAMS execution,
  53  * a results file ``<output-file>`` will be written
  54  * (or ``model\output\MsgOutput.gdx`` if ``--out`` is not provided).
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 2
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


  55  ***
  56   
  57  $EOLCOM #
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_setup.gms
  58  $INCLUDE MESSAGE/model_setup.gms
  59  *----------------------------------------------------------------------------------------------------------------------*
  60  * sanity check of model run parameters, set defaults if not specified                                                  *
  61  *----------------------------------------------------------------------------------------------------------------------*
  62   
  63  * set # as end-of-line comment; all text after # is ignored
  64  * (for proper display in GAMS IDE, this needs to be specified in the options, too)
  65   
  66  *----------------------------------------------------------------------------------------------------------------------*
  67  * sanity check of model run parameters, set defaults if not specified                                                  *
  68  *----------------------------------------------------------------------------------------------------------------------*
  69   
  70  * a datastructure name is mandatory to load the gdx file - abort the run if not specified or file does not exist
  71  $IF NOT SET in       $ABORT "no input data file provided!"
  72  $IF NOT EXIST 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx' $ABORT "input GDX file 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx' does not exist!"
  73  $SETGLOBAL iter "output/MsgIterationReport"
  74  $IF NOT SET out      $SETGLOBAL out "output/MsgOutput.gdx"
  75   
  76  ** define the time horizon over which the model optimizes (perfect foresight, myopic or rolling horizon) **
  77  * perfect foresight - 0 (assumed as default if not specified
  78  * myopic optimization (period-by-period, recursive-dynamic without any foresight) - 1
  79  * rolling horizon (period-by-period, recursive-dynamic with limited foresight - 'number of years of foresight'
  80  $SETGLOBAL foresight "0"
  81   
  82  ** specify optional additional calibration output **
  83  $SETGLOBAL calibration ""
  84  * mark with * to include detailed calibration information in outputs and get an extended GAMS listing (.lst) file
  85   
  86  ** debugging mode settings for support and assistance during model development and calibration **
  87  * assume that all debugging options are deactivated by default
  88  * mark as "*" to deactivate, mark as "" to activate
  89   
  90  * set auxiliary upper and lower bounds on the actitivity variables to prevent unbounded models
  91  $SETGLOBAL AUX_BOUNDS "*"
  92  $SETGLOBAL AUX_BOUND_VALUE "1e9"
  93   
  94  * include relaxations for specific constraint blocks to identify infeasibilities during model development/calibration
  95  * by adding 'slack' variables in the constraints and associated penalty factors in the objective function
  96  $SETGLOBAL SLACK_COMMODITY_EQUIVALENCE "*"
  97   
  98  $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
  99  $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
 100  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
 101  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
 102  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
 103  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
 104   
 105  $SETGLOBAL SLACK_ACT_BOUND_UP "*"
 106  $SETGLOBAL SLACK_ACT_BOUND_LO "*"
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 3
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 107  $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
 108  $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
 109   
 110  $SETGLOBAL SLACK_LAND_SCEN_UP "*"
 111  $SETGLOBAL SLACK_LAND_SCEN_LO "*"
 112  $SETGLOBAL SLACK_LAND_TYPE_UP "*"
 113  $SETGLOBAL SLACK_LAND_TYPE_LO "*"
 114   
 115  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
 116  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 117   
 118  *----------------------------------------------------------------------------------------------------------------------*
 119  * initialize sets, mappings, parameters, load data, do pre-processing                                                  *
 120  *----------------------------------------------------------------------------------------------------------------------*
 121   
 122  ** load auxiliary settings from include file (solver options, resource/time limits, prefered solvers) **
 123  * recommended only for advanced users
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/auxiliary_settings.gms
 124  $INCLUDE MESSAGE/auxiliary_settings.gms
 125  *----------------------------------------------------------------------------------------------------------------------*
 126  * auxiliary settings and defintions                                                                                    *
 127  *----------------------------------------------------------------------------------------------------------------------*
 128   
 129  * initialise logfile settings - this allows to write status messages to the logfile
 130  file logfile / '' / ;
 131  put logfile ;
 132   
 133  * get yourself a short listing file
 134  option limrow = 0 ;     # number of rows (equations) reported in lst file
 135  option limcol = 0 ;     # number of columns reported in lst file
 136  option solprint = off ; # solver's solution output printed
 137  option savepoint = 0 ;  # creates a result gdx file after every solve
 138  * this is done manually in this code to have the database name in the gdx file name and to save the file in a sub-folder
 139   
 140  option ITERLIM = 1e8 ;  # iteration limit
 141  option RESLIM = 1e6 ;   # resource limit (in seconds; 1e6 is approximately 11 days)
 142  * solver comments for QCP and PATH:
 143  * - GUROBI, CPLEX and MINOS are fast
 144  * - CONOPT is slower, but (in non-linear problems) usually more helpful to identify the feasibility problems
 145  * general comment: sometimes, first using one solver and then another (using the previous solution as starting point)
 146  * helps even if the previous run did not solve to optimality
 147  option LP = CPLEX ;
 148  option NLP = CONOPT ;
 149  option MCP = PATH ;
 150   
 151  *option solveopt=clear ;# remove results of previous runs in memory
 152  option solveopt=merge ; # keep results of previous runs in memory
 153  $SETENV GdxCompress 1   # reduces the size of the gdx export file
 154   
 155  $ONTEXT
      $ONLISTING
      option limrow = 1e6 ;   # number of rows (equations) reported in lst file
      option limcol = 1e6 ;   # number of columns reported in lst file
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 4
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


      option solprint = on ;  # solver's solution output printed
      $ONTEXT
 161  $OFFTEXT
 162   
 163  * check that the version of MESSAGEix and the ixToolbox used for exporting the data to gdx match
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\version.gms
 164  $INCLUDE version.gms
 165  * This file specifies the release version number of MESSAGEix.
 166  * The version number must match the MESSAGEix-scheme version number
 167  * in the compiled `ixmp.jar`.
 168   
 169  * !!! DO NOT CHANGE VALUES IN THIS FILE MANUALLY !!!
 170   
 171  * Changes have to be done by pulling the respective version
 172  * from the Github repository at https://github.com/iiasa/message_ix,
 173  * or by updating the `message_ix` package
 174  * using `conda update -c conda-forge message-ix`.
 175   
 176  $SETGLOBAL VERSION_MAJOR "1"
 177  $SETGLOBAL VERSION_MINOR "0"
 178  $SETGLOBAL VERSION_MICRO "0"
 179   
 180  * This file is imported by `message_ix/__init__.py`.
 181  * In the documentation rst files, the tag ``|version|`` in any mark-up docstring
 182  * is replaced by '%VERSION_MAJOR%.%VERSION_MINOR%'.
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/version_check.gms
 183  $INCLUDE MESSAGE/version_check.gms
 184   
 185  *----------------------------------------------------------------------------------------------------------------------*
 186  * load ixmp MESSAGE-scheme version number from the input gdx and check whether it matches the MESSAGEix version number *
 187  *----------------------------------------------------------------------------------------------------------------------*
 188   
 189  Parameter MESSAGE_ix_version(*);
 190   
GDXIN   C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx
 191  $GDXIN 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx'
--- LOAD  MESSAGE_ix_version = 103:MESSAGE_ix_version
 192  $LOAD MESSAGE_IX_version
 193  $GDXIN
 194   
 195  IF ( NOT ( MESSAGE_IX_version("major") = 1 AND MESSAGE_IX_version("minor") = 0 ),
 196      put_utility 'log' / '***';
 197      put_utility 'log' / '*** Abort "The MESSAGEix version and the MESSAGE-scheme definition in the installed ixmp package do not match!"';
 198      put_utility 'log' / '***';
 199      abort "Incompatible versions of MESSAGEix and ixmp";
 200  ) ;
 201   
 202  ** initialize sets, mappings, parameters
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/sets_maps_def.gms
 203  $INCLUDE MESSAGE/sets_maps_def.gms
 204  ***
 205  * .. _sets_maps_def:
 206  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 5
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 207  * Sets and mappings definition
 208  * =============================
 209  * This page is generated from the auto-documentation in ``MESSAGE/sets_maps_def.gms``.
 210  *
 211  * This file contains the definition of all sets and mappings used in |MESSAGEix|.
 212  ***
 213   
 214  * indices to mapping sets will always be in the following order:
 215  * lvl_spatial, lvl_temporal,
 216  * node_location, tec, year_vintage, year_actual, mode, commodity, level, grade,
 217  * node_origin/destination, emission, time_actual), time_origin/destination, rating
 218   
 219  * allows sets to be empty
 220  $ONEMPTY
 221   
 222  *----------------------------------------------------------------------------------------------------------------------*
 223  * Set definitions                                                                                                      *
 224  *----------------------------------------------------------------------------------------------------------------------*
 225   
 226  ***
 227  * Sets in the |MESSAGEix| implementation
 228  * --------------------------------------
 229  *
 230  * .. list-table::
 231  *    :widths: 20 12 68
 232  *    :header-rows: 1
 233  *
 234  *    * - Set name
 235  *      - Notation
 236  *      - Explanatory comments
 237  *    * - node [#node]_
 238  *      - :math:`n \in N`
 239  *      - regions, countries, grid cells
 240  *    * - commodity
 241  *      - :math:`c \in C`
 242  *      - resources, electricity, water, land availability, etc.
 243  *    * - level
 244  *      - :math:`l \in L`
 245  *      - levels of the reference energy system or supply chain (primary, secondary, ... , useful)
 246  *    * - grade
 247  *      - :math:`g \in G`
 248  *      - grades of resource quality in the extraction & mining sector
 249  *    * - technology [tec]
 250  *      - :math:`t \in T`
 251  *      - | technologies that use input commodities to produce outputs;
 252  *        | the short-hand notation "tec" is used in the GAMS implementation
 253  *    * - mode [#mode]_
 254  *      - :math:`m \in M`
 255  *      - modes of operation for specific technologies
 256  *    * - emission
 257  *      - :math:`e \in E`
 258  *      - greenhouse gases, pollutants, etc.
 259  *    * - land_scenario
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 6
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 260  *      - :math:`s \in S`
 261  *      - scenarios of land use (for land-use model emulator)
 262  *    * - land_type
 263  *      - :math:`u \in U`
 264  *      - land-use types (e.g., field, forest, pasture)
 265  *    * - year [year_all] [#year_all]_ [#period_year]_
 266  *      - :math:`y \in Y`
 267  *      - model horizon (including historical periods for vintage structure of installed capacity
 268  *        and dynamic constraints)
 269  *    * - time [#time]_
 270  *      - :math:`h \in H`
 271  *      - subannual time periods (seasons, days, hours)
 272  *    * - relation [#relations]_
 273  *      - :math:`r \in R`
 274  *      - set of generic linear constraints
 275  *    * - rating
 276  *      - :math:`q \in Q`
 277  *      - identifies the 'quality' of the renewable energy potential
 278  *    * - lvl_spatial
 279  *      -
 280  *      - set of spatial hierarchy levels (global, region, country, grid cell)
 281  *    * - lvl_temporal
 282  *      -
 283  *      - set of temporal hierarchy levels (year, season, day, hour)
 284  *
 285  * .. [#node] The set ``node`` includes spatial units across all levels of spatial disaggregation
 286  *    (global, regions, countries, basins, grid cells).
 287  *    The hierarchical mapping is implemented via the mapping set ``map_spatial_hierarchy``.
 288  *    This set always includes an element 'World' when initializing a ``MESSAGE``-scheme ``ixmp``.Scenario.
 289  *
 290  * .. [#mode] For example, high electricity or high heat production modes of operation for combined heat and power plants.
 291  *
 292  * .. [#year_all] In the |MESSAGEix| implementation in GAMS, the set ``year_all`` denotes the "superset"
 293  *    of the entire horizon (historical and model horizon), and the set ``year`` is a dynamic subset of ``year_all``.
 294  *    This facilitates an efficient implementation of the historical capacity build-up and
 295  *    the (optional) recursive-dynamic solution approach.
 296  *    When working with a ``MESSAGE``-scheme ``ixmp``.Scenario via the API, the set of all periods is called ``year``
 297  *    for a more concise notation.
 298  *    The specification of the model horizon is implemented using the mapping set ``cat_year``
 299  *    and the type "firstmodelyear".
 300  *
 301  * .. _period_year_footnote:
 302  *
 303  * .. [#period_year] In |MESSAGEix|, the key of an element in set ``year`` identifies *the last year* of the period,
 304  *    i.e., in a set :math:`year = [2000, 2005, 2010, 2015]`,
 305  *    the period '2010' comprises the years :math:`[2006, .. ,2010]`.
 306  *
 307  * .. [#time] The set ``time`` collects all sub-annual temporal units across all levels of temporal disaggregation.
 308  *    In a ``MESSAGE``-scheme ``ixmp``.Scenario, this set always includes an element "year",
 309  *    and the duration of that element is 1 (:math:`duration\_time_{'year'} = 1`).
 310  *
 311  * .. [#relations] A generic formulation of linear constraints is implemented in |MESSAGEix|, see :ref:`section_of_generic_relations`.
 312  *    This feature can be used for testing and development, but specific new use cases should be implemented
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 7
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 313  *    by specific equations and parameters.
 314  ***
 315   
 316  Sets
 317      node            world - regions - countries - grid cells
 318      commodity       resources - electricity - water - land availability - etc.
 319      level           levels of the reference energy system or supply chain ( primary - secondary - ... - useful )
 320      sector          sectors (for integration with MACRO)
 321      grade           grades of extraction of raw materials
 322      tec             technologies
 323      mode            modes of operation
 324      emission        greenhouse gases - pollutants - etc.
 325      land_scenario   scenarios of land use (for land-use model emulator)
 326      land_type       types of land use
 327      year_all        years (over entire model horizon)
 328      year (year_all) years included in a model instance (for myopic or rolling-horizon optimization)
 329      time            subannual time periods (seasons - days - hours)
 330      shares          share constraint relations
 331      relation        generic linear relations
 332      lvl_spatial     hierarchical levels of spatial resolution
 333      lvl_temporal    hierarchical levels of temporal resolution
 334      rating          identifies the 'quality' of the renewable energy potential (bins acc. to Sullivan)
 335  ;
 336   
 337  * definition of aliases
 338  Alias(node,location);
 339  Alias(node,subnode);
 340  Alias(node,node2);
 341  Alias(node,node_share);
 342  Alias(node,node3);
 343  Alias(tec,tec2);
 344  Alias(commodity,commodity2);
 345  Alias(level,level2);
 346  Alias(emission,emission2);
 347  Alias(year_all,vintage);
 348  Alias(year_all,year_all2);
 349  Alias(year_all,year_all3);
 350  Alias(year,year2);
 351  Alias(year,year3);
 352  Alias(time,time2);
 353  Alias(time,time_act);
 354  Alias(time,time_od);
 355   
 356  *----------------------------------------------------------------------------------------------------------------------*
 357  * Category types and mappings                                                                                                       *
 358  *----------------------------------------------------------------------------------------------------------------------*
 359   
 360  ***
 361  * Category types and mappings
 362  * ---------------------------
 363  *
 364  * This feature is used to easily implement aggregation across groups of set elements.
 365  * For example, by setting an upper bound over an emission type, the constraint enforces
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 8
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 366  * that the sum over all emission species mapped to that type via the mapping set ``cat_emission``
 367  * satisfies that upper bound.
 368  *
 369  * .. list-table::
 370  *    :widths: 25 15 60
 371  *    :header-rows: 1
 372  *
 373  *    * - Set name
 374  *      - Notation
 375  *      - Explanatory comments
 376  *    * - level_resource (level) [#level_res]_
 377  *      - :math:`l \in L^{RES} \subseteq L`
 378  *      - levels related to `fossil resources` representation
 379  *    * - level_renewable (level) [#level_res]_
 380  *      - :math:`l \in L^{REN} \subseteq L`
 381  *      - levels related to `renewables` representation
 382  *    * - type_node [#type_node]_
 383  *      - :math:`\widehat{n} \in \widehat{N}`
 384  *      - Category types for nodes
 385  *    * - cat_node (type_node,node)
 386  *      - :math:`n \in N(\widehat{n})`
 387  *      - Category mapping between node types and nodes
 388  *    * - type_tec [#type_tec]_
 389  *      - :math:`\widehat{t} \in \widehat{T}`
 390  *      - Category types for technologies
 391  *    * - cat_tec (type_tec,tec)
 392  *      - :math:`t \in T(\widehat{t})`
 393  *      - Category mapping between tec types and technologies
 394  *    * - inv_tec (tec) [#inv_tec]_
 395  *      - :math:`t \in T^{INV} \subseteq T`
 396  *      - Specific subset of investment technologies
 397  *    * - renewable_tec (tec) [#renewable_tec]_
 398  *      - :math:`t \in T^{REN} \subseteq T`
 399  *      - Specific subset of renewable-energy technologies
 400  *    * - type_emission
 401  *      - :math:`\widehat{e} \in \widehat{E}`
 402  *      - Category types for emissions (greenhouse gases, pollutants, etc.)
 403  *    * - cat_emission (type_emission,emission)
 404  *      - :math:`e \in E(\widehat{e})`
 405  *      - Category mapping between emission types and emissions
 406  *    * - type_tec_land (type_tec) [#type_tec_land]_
 407  *      - :math:`\widehat{t} \in \widehat{T}^{LAND} \subseteq \widehat{T}`
 408  *      - Mapping set of technology types and land use
 409  *
 410  * .. [#level_res] The constraint ``EXTRACTION_EQUIVALENCE`` is active only for the levels included in this set,
 411  *    and the constraint ``COMMODITY_BALANCE`` is deactivated for these levels.
 412  *
 413  * .. [#type_node] The element "economy" is added by default as part of the ``MESSAGE``-scheme ``ixmp``.Scenario.
 414  *
 415  * .. [#type_tec] The element "all" in ``type_tec`` and the associated mapping to all technologies in the set ``cat_tec``
 416  *    are added by default as part of the ``MESSAGE``-scheme ``ixmp``.Scenario.
 417  *
 418  * .. [#inv_tec] The auxiliary set ``inv_tec`` (subset of ``technology``) is a short-hand notation for all technologies
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 05/20/20 11:22:49 Page 9
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 419  *    with defined investment costs. This activates the investment cost part in the objective function and the
 420  *    constraints for all technologies where investment decisions are relevant.
 421  *    It is added by default when exporting ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 422  *
 423  * .. [#renewable_tec] The auxiliary set ``renewable_tec`` (subset of ``technology``) is a short-hand notation
 424  *    for all technologies with defined parameters relevant for the equations in the "Renewable" section.
 425  *    It is added by default when exporting ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 426  *
 427  * .. [#type_tec_land] The mapping set ``type_tec_land`` is a dynamic subset of ``type_tec`` and specifies whether
 428  *    emissions from the land-use model emulator module are included when aggregrating over a specific technology type.
 429  *    The element "all" is added by default in a ``MESSAGE``-scheme ``ixmp``.Scenario.
 430  ***
 431   
 432  * category types and mappings
 433  Sets
 434      type_node                               types of nodes
 435      cat_node(type_node,node)                mapping of nodes to respective categories
 436      type_tec                                types of technologies
 437      cat_tec(type_tec,tec)                   mapping of technologies to respective categories
 438      inv_tec(tec)                            technologies that have explicit investment and capacity decision variables
 439      type_year                               types of year aggregations
 440      cat_year(type_year,year_all)            mapping of years to respective categories
 441      type_emission                           types of emission aggregations
 442      cat_emission(type_emission,emission)    mapping of emissions to respective categories
 443      full_balance(commodity)                 for full commodity balance
 444      balance_equality(commodity,level)       mapping of commodities-level where the supply-demand balance must be maintained with equality
 445      crop_growing_time(tec,time)             mapping crops and their growing periods
 446      crop_gro_first_time(tec,time)
 447  ;
 448   
 449  Alias(type_tec,type_tec_share);
 450  Alias(type_tec,type_tec_total);
 451   
 452  *----------------------------------------------------------------------------------------------------------------------*
 453  * Mapping sets                                                                                                         *
 454  *----------------------------------------------------------------------------------------------------------------------*
 455   
 456  ***
 457  * Mappings sets
 458  * -------------
 459  *
 460  * These sets are generated automatically when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx using the API.
 461  * They are used in the GAMS model to reduce model size by excluding non-relevant variables and equations
 462  * (e.g., actitivity of a technology outside of its technical lifetime).
 463  *
 464  * .. list-table::
 465  *    :widths: 25 15 60
 466  *    :header-rows: 1
 467  *
 468  *    * - Set name
 469  *      - Notation
 470  *      - Explanatory comments
 471  *    * - map_node(node,location)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 10
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 472  *      -
 473  *      - mapping of nodes across hierarchy levels (location is in node)
 474  ***
 475   
 476  Sets
 477      map_node(node,location)                     mapping of nodes across hierarchy levels (location is in node)
 478      map_time(time,time2)                        mapping of time periods across hierarchy levels (time2 is in time)
 479   
 480      map_rating(node,tec,commodity,level,rating,year_all) mapping of technologues to ratings bin assignment
 481   
 482      map_commodity(node,commodity,level,year_all,time)    mapping of commodity-level to node and time
 483      map_stocks(node,commodity,level,year_all)    mapping of commodity-level to node and time
 484      map_storage(node,commodity,level,year_all,time)   mapping of commodity-level to node and time
 485   
 486      map_tec(node,tec,year_all)                   mapping of technology to node and years
 487      map_tec_time(node,tec,year_all,time)         mapping of technology to temporal dissagregation (time)
 488      map_tec_mode(node,tec,year_all,mode)         mapping of technology to modes
 489      map_tec_act(node,tec,year_all,mode,time)     mapping of technology to modes AND temporal dissagregation
 490   
 491      map_spatial_hierarchy(lvl_spatial,node,node)    mapping of spatial resolution to nodes (last index is 'parent')
 492      map_temporal_hierarchy(lvl_temporal,time,time)  mapping of temporal resolution to time (last index is 'parent')
 493   
 494      map_shares_commodity_share(shares,node,
 495          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (numerator)
 496      map_shares_commodity_total(shares,node,
 497          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (denominator)
 498   
 499  ;
 500   
 501  * additional sets created in GAMS to make notation more concise
 502  Sets
 503      map_tec_lifetime(node,tec,vintage,year_all)  mapping of technologies to periods within technical lifetime
 504  ;
 505   
 506  *----------------------------------------------------------------------------------------------------------------------*
 507  * Mapping sets (flags) for bounds                                                                                             *
 508  *----------------------------------------------------------------------------------------------------------------------*
 509   
 510  ***
 511  * Mapping sets (flags) for bounds
 512  * -------------------------------
 513  *
 514  * There are a number of mappings sets generated when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx.
 515  * They are used as 'flags' to indicate whether a constraint is active.
 516  * The names of these sets follow the format ``is_<constraint>_<dir>``.
 517  *
 518  * Such mapping sets are necessary because GAMS does not distinguish between 0 and 'no value assigned',
 519  * i.e., it cannot differentiate between a bound of 0 and 'no bound assigned'.
 520  ***
 521   
 522  Sets
 523      is_bound_extraction_up(node,commodity,grade,year_all) flag whether upper bound exists for extraction of commodity
 524      is_bound_new_capacity_up(node,tec,year_all)      flag whether upper bound exists for new capacity
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 11
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 525      is_bound_new_capacity_lo(node,tec,year_all)      flag whether lower bound exists for new capacity
 526      is_bound_total_capacity_up(node,tec,year_all)    flag whether upper bound exists for total installed capacity
 527      is_bound_total_capacity_lo(node,tec,year_all)    flag whether lower bound exists for total installed capacity
 528      is_bound_activity_up(node,tec,year_all,mode,time) flag whether upper bound exists for a technology activity
 529  *   is_bound_activity_lo(node,tec,year_all,mode,time) flag whether lower bound exists for a technology activity
 530  * this last flag is not required because the lower bound defaults to zero unless explicitly specified otherwise
 531   
 532      is_dynamic_new_capacity_up(node,tec,year_all)    flag whether upper dynamic constraint exists for new capacity (investment)
 533      is_dynamic_new_capacity_lo(node,tec,year_all)    flag whether lower dynamic constraint exists for new capacity (investment)
 534      is_dynamic_activity_up(node,tec,year_all,time)   flag whether upper dynamic constraint exists for a technology (activity)
 535      is_dynamic_activity_lo(node,tec,year_all,time)   flag whether lower dynamic constraint exists for a technology (activity)
 536   
 537      is_bound_emission(node,type_emission,type_tec,type_year) flag whether emissions bound exists
 538  ;
 539   
 540  *----------------------------------------------------------------------------------------------------------------------*
 541  * Mapping sets (flags) for fixed variables                                                                             *
 542  *----------------------------------------------------------------------------------------------------------------------*
 543   
 544  ***
 545  * Mapping sets (flags) for fixed variables
 546  * ----------------------------------------
 547  *
 548  * Similar to the mapping sets for bounds, there are mapping sets to indicate whether decision variables
 549  * are pre-defined to a specific value, usually taken from a solution of another model instance.
 550  * This can be used to represent imperfect foresight where a policy shift or parameter change is introduced in later years.
 551  * The names of these sets follow the format ``is_fixed_<variable>``.
 552  ***
 553   
 554  Sets
 555      is_fixed_stock(node,commodity,level,year_all)          flag whether stock variable is fixed
 556      is_fixed_storage(node,commodity,level,year_all,time)   flag whether storage variable is fixed
 557      is_fixed_new_capacity(node,tec,year_all)               flag whether new capacity variable is fixed
 558      is_fixed_capacity(node,tec,vintage,year_all)           flag whether maintained capacity variable is fixed
 559      is_fixed_activity(node,tec,vintage,year_all,mode,time) flag whether activity variable is fixed
 560  ;
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/parameter_def.gms
 561  $INCLUDE MESSAGE/parameter_def.gms
 562  ***
 563  * .. _parameter_def:
 564  *
 565  * Parameter definition
 566  * ====================
 567  * This page is generated from the auto-documentation in ``MESSAGE/parameter_def.gms``.
 568  *
 569  * This file contains the definition of all parameters used in |MESSAGEix|.
 570  *
 571  * In |MESSAGEix|, all parameters are understood as yearly values, not as per (multi-year) period.
 572  * This provides flexibility when changing the resolution of the model horizon (i.e., the set ``year``).
 573  *
 574  * Parameters written in *italics* are auxiliary parameters
 575  * that are either generated automatically when exporting a ``MESSAGE``-scheme ``ixmp``.Scenario to gdx
 576  * or that are computed during the pre-processing stage in GAMS.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 12
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 577  ***
 578   
 579  ***
 580  * General parameters of the |MESSAGEix| implementation
 581  * ----------------------------------------------------
 582  *
 583  * .. list-table::
 584  *    :widths: 25 20 55
 585  *    :header-rows: 1
 586  *
 587  *    * - Parameter name
 588  *      - Index dimensions
 589  *      - Explanatory comments
 590  *    * - *duration_period* (:math:`|y|`) [#short_dur]_
 591  *      - ``year``
 592  *      - duration of multi-year period (in number of years) [#year_auto]_
 593  *    * - duration_time
 594  *      - ``time``
 595  *      - duration of sub-annual time slices (relative to 1) [#duration_time_year]_
 596  *    * - *duration_time_rel*
 597  *      - ``time`` | ``time``
 598  *      - relative duration between sub-annual time slices [#df_auto]_
 599  *    * - interestrate
 600  *      - ``year``
 601  *      - economy-wide interest rate or social discount rate
 602  *    * - *discountfactor*
 603  *      - ``year``
 604  *      -  cumulative discount factor over period duration [#df_auto]_
 605  *
 606  * .. [#short_dur] The short-hand notation :math:`|y|` is used for the parameters :math:`duration\_period_y`
 607  *    in the mathematical model documentation for exponents.
 608  *
 609  * .. [#year_auto] The values for this parameter are computed automatically when exporting a ``MESSAGE``-scheme
 610  *    ``ixmp``.Scenario to gdx.
 611  *    Note that in |MESSAGEix|, the elements of the ``year`` set are understood to be the last year in a period,
 612  *    see :ref:`this footnote <period_year_footnote>`.
 613  *
 614  * .. [#duration_time_year] The element 'year' in the set of subannual time slices ``time`` has the value of 1.
 615  *    This value is assigned by default when creating a new ``ixmp``.Scenario based on the ``MESSAGE`` scheme.
 616  *
 617  * .. [#df_auto] This parameter is computed during the GAMS execution.
 618  ***
 619   
 620  Parameters
 621  * general parameters
 622      duration_period(year_all)      duration of one multi-year period (in years)
 623      duration_time(time)            duration of one time slice (relative to 1)
 624      duration_period_sum(year_all,year_all2)  number of years between two periods ('year_all' must precede 'year_all2')
 625      duration_time_rel(time,time2)  relative duration of subannual time period ('time2' relative to parent 'time')
 626      interestrate(year_all)         interest rate (to compute discount factor)
 627      discountfactor(*)              cumulative discount facor
 628      df_period(year_all)            cumulative discount factor
 629      df_year(year_all)              cumulative discount factor
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 13
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 630  ;
 631   
 632  ***
 633  * Parameters of the `Resources` section
 634  * -------------------------------------
 635  *
 636  * .. list-table::
 637  *    :widths: 25 75
 638  *    :header-rows: 1
 639  *
 640  *    * - Parameter name
 641  *      - Index dimensions
 642  *    * - resource_volume
 643  *      - ``node`` | ``commodity`` | ``grade``
 644  *    * - resource_cost
 645  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 646  *    * - resource_remaining
 647  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 648  *    * - bound_extraction_up
 649  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 650  *    * - commodity_stock [#stock]_
 651  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 652  *    * - historical_extraction [#hist]_
 653  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 654  *
 655  * .. [#stock] This parameter allows (exogenous) additions to the commodity stock over the model horizon,
 656  *    e.g., precipitation that replenishes the water table.
 657  *
 658  * .. [#hist] Historical values of new capacity and activity can be used for parametrising the vintage structure
 659  *    of existing capacity and implement dynamic constraints in the first model period.
 660  *
 661  ***
 662   
 663  Parameter
 664  * resource and commodity parameters
 665      bound_extraction_up(node,commodity,grade,year_all)  upper bound on extraction of resources by grade
 666      commodity_stock(node,commodity,level,year_all)      exogenous (initial) quantity of commodity in stock
 667  ;
 668   
 669  ***
 670  * Parameters of the `Demand` section
 671  * ----------------------------------
 672  *
 673  * .. list-table::
 674  *    :widths: 30 70
 675  *    :header-rows: 1
 676  *
 677  *    * - Parameter name
 678  *      - Index dimensions
 679  *    * - demand [demand_fixed] [#demand]_
 680  *      - ``node`` | ``commodity`` | ``level`` | ``year`` | ``time``
 681  *    * - peak_load_factor [#peakload]_
 682  *      - ``node`` | ``commodity`` | ``year``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 14
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 683  *
 684  * .. [#demand] The parameter ``demand`` in a ``MESSAGE``-scheme ``ixmp``.Scenario is translated
 685  *    to the parameter ``demand_fixed`` in the MESSAGE implementation in GAMS. The variable ``DEMAND`` is introduced
 686  *    as an auxiliary reporting variable; it equals ``demand_fixed`` in a `MESSAGE`-standalone run and reports
 687  *    the final demand including the price response in an iterative `MESSAGE-MACRO` solution.
 688  *
 689  * .. [#peakload] The parameters ``peak_load_factor`` and ``reliability_factor`` are based on the formulation proposed
 690  *    by Sullivan et al., 2013 :cite:`sullivan_VRE_2013`. It is used in :ref:`reliability_constraint`.
 691  *
 692  ***
 693   
 694  Parameter
 695      demand_fixed(node,commodity,level,year_all,time) exogenous demand levels
 696      peak_load_factor(node,commodity,level,year_all,time)       maximum peak load factor for reliability constraint of firm capacity
 697  ;
 698   
 699  ***
 700  * Parameters of the `Technology` section
 701  * --------------------------------------
 702  *
 703  * Input/output mapping, costs and engineering specifications
 704  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 705  *
 706  * .. list-table::
 707  *    :widths: 25 75
 708  *    :header-rows: 1
 709  *
 710  *    * - Parameter name
 711  *      - Index names
 712  *    * - input [#tecvintage]_
 713  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 714  *        ``node_origin`` | ``commodity`` | ``level`` | ``time`` | ``time_origin``
 715  *    * - output [#tecvintage]_
 716  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 717  *        ``node_dest`` | ``commodity`` | ``level`` | ``time`` | ``time_dest``
 718  *    * - inv_cost [#tecvintage]_
 719  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 720  *    * - fix_cost [#tecvintage]_
 721  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 722  *    * - var_cost [#tecvintage]_
 723  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
 724  *    * - levelized_cost [#levelizedcost]_
 725  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``time``
 726  *    * - construction_time
 727  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 728  *    * - technical_lifetime
 729  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 730  *    * - capacity_factor [#tecvintage]_
 731  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``time``
 732  *    * - operation_factor [#tecvintage]_
 733  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 734  *    * - min_utilization_factor [#tecvintage]_
 735  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 15
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 736  *    * - rating_bin [#rating]_
 737  *      - ``node`` | ``technology`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 738  *    * - reliability_factor [#peakload]_
 739  *      - ``node`` | ``technology`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 740  *    * - flexibility_factor
 741  *      - ``node_loc`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 742  *    * - renewable_capacity_factor
 743  *      - ``node_loc`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 744  *    * - renewable_potential
 745  *      - ``node`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 746  *    * - emission_factor
 747  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``emission``
 748  *
 749  * .. [#tecvintage] Fixed and variable cost parameters and technical specifications are indexed over both
 750  *    the year of construction (vintage) and the year of operation (actual).
 751  *    This allows to represent changing technology characteristics depending on the age of the plant.
 752  *
 753  * .. [#levelizedcost] The parameter ``levelized_cost`` is computed in the GAMS pre-processing under the assumption of
 754  *    full capacity utilization until the end of the technical lifetime.
 755  *
 756  * .. [#construction] The construction time only has an effect on the investment costs; in |MESSAGEix|,
 757  *    each unit of new-built capacity is available instantaneously at the beginning of the model period.
 758  *
 759  * .. [#rating] The upper bound of a contribution by any technology to the constraints on system reliability
 760  *    (:ref:`reliability_constraint`) and flexibility (:ref:`flexibility_constraint`) can depend on the share
 761  *    of the technology output in the total commodity use at a specific level.
 762  ***
 763   
 764  Parameters
 765  * technology input-output mapping and costs parameters
 766      input(node,tec,vintage,year_all,mode,node,commodity,level,time,time)  relative share of input per unit of activity
 767      output(node,tec,vintage,year_all,mode,node,commodity,level,time,time) relative share of output per unit of activity
 768      inv_cost(node,tec,year_all)                         investment costs (per unit of new capacity)
 769      fix_cost(node,tec,vintage,year_all)                 fixed costs per year (per unit of capacity maintained)
 770      var_cost(node,tec,vintage,year_all,mode,time)       variable costs of operation (per unit of capacity maintained)
 771      levelized_cost(node,tec,year_all,time)              levelized costs (per unit of new capacity)
 772   
 773  * engineering parameters
 774      construction_time(node,tec,vintage)                     duration of construction of new capacity (in years)
 775      technical_lifetime(node,tec,vintage)                    maximum technical lifetime (from year of construction)
 776      capacity_factor(node,tec,vintage,year_all,time)         capacity factor by subannual time slice
 777      operation_factor(node,tec,vintage,year_all)             yearly total operation factor
 778      min_utilization_factor(node,tec,vintage,year_all)       yearly minimum utilization factor
 779      emission_factor(node,tec,year_all,year_all,mode,emission) emission intensity of activity
 780      rating_bin(node,tec,year_all,commodity,level,time,rating) maximum share of technology in commodity use per rating
 781      reliability_factor(node,tec,year_all,commodity,level,time,rating) reliability of a technology (per rating)
 782      flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating) contribution of technologies towards operation flexibility constraint
 783  ;
 784   
 785  ***
 786  * Bounds on capacity and activity
 787  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 788  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 16
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 789  * The following parameters specify upper and lower bounds on new capacity, total installed capacity, and activity.
 790  *
 791  * .. list-table::
 792  *    :widths: 20 80
 793  *    :header-rows: 1
 794  *
 795  *    * - Parameter name
 796  *      - Index names
 797  *    * - bound_new_capacity_up
 798  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 799  *    * - bound_new_capacity_lo
 800  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 801  *    * - bound_total_capacity_up
 802  *      - ``node_loc`` | ``tec`` | ``year_act``
 803  *    * - bound_total_capacity_lo
 804  *      - ``node_loc`` | ``tec`` | ``year_act``
 805  *    * - bound_activity_up
 806  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 807  *    * - bound_activity_lo
 808  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 809  *
 810  * The bounds on activity are implemented as the aggregate over all vintages in a specific period
 811  * (cf. Equation ``ACTIVITY_BOUND_UP`` and ``ACTIVITY_BOUND_LO``).
 812  ***
 813   
 814  Parameters
 815      bound_new_capacity_up(node,tec,year_all)         upper bound on new capacity
 816      bound_new_capacity_lo(node,tec,year_all)         lower bound on new capacity
 817      bound_total_capacity_up(node,tec,year_all)       upper bound on total installed capacity
 818      bound_total_capacity_lo(node,tec,year_all)       lower bound on total installed capacity
 819      bound_activity_up(node,tec,year_all,mode,time)   upper bound on activity (aggregated over all vintages)
 820      bound_activity_lo(node,tec,year_all,mode,time)   lower bound on activity
 821      bound_storage_up(node,commodity,level,year_all,time)   upper bound on stocks
 822      bound_storage_lo(node,commodity,level,year_all,time)   lower bound on stocks
 823      storage_loss(node,commodity,level,year_all,time)       losses from storage
 824  ;
 825   
 826  ***
 827  * Dynamic constraints on capacity and activity
 828  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 829  *
 830  * The following parameters specify constraints on the growth of new capacity and activity, i.e., market penetration.
 831  *
 832  * .. list-table::
 833  *    :widths: 30 70
 834  *    :header-rows: 1
 835  *
 836  *    * - Parameter name
 837  *      - Index names
 838  *    * - initial_new_capacity_up
 839  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 840  *    * - growth_new_capacity_up [#mpx]_
 841  *      - ``node_loc`` | ``tec`` | ``year_vtg``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 17
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 842  *    * - soft_new_capacity_up [#mpx]_
 843  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 844  *    * - initial_new_capacity_lo
 845  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 846  *    * - growth_new_capacity_lo [#mpx]_
 847  *      - ``node_loc`` | ``tec_actual`` | ``year_vtg``
 848  *    * - soft_new_capacity_lo [#mpx]_
 849  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 850  *    * - initial_activity_up [#mpa]_
 851  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 852  *    * - growth_activity_up [#mpx]_ [#mpa]_
 853  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 854  *    * - soft_activity_up [#mpx]_
 855  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 856  *    * - initial_activity_lo [#mpa]_
 857  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 858  *    * - growth_activity_lo [#mpx]_ [#mpa]_
 859  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 860  *    * - soft_activity_lo [#mpx]_
 861  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 862  *
 863  * .. [#mpx] All parameters related to the dynamic constraints are understood as the bound on the rate
 864  *    of growth/decrease, not as in percentage points and not as (1+growth rate).
 865  *
 866  * .. [#mpa] The dynamic constraints are not indexed over modes in the |MESSAGEix| implementation.
 867  *
 868  ***
 869   
 870  Parameters
 871      initial_new_capacity_up(node,tec,year_all)     dynamic upper bound on new capacity (fixed initial term)
 872      growth_new_capacity_up(node,tec,year_all)      dynamic upper bound on new capacity (growth rate)
 873      soft_new_capacity_up(node,tec,year_all)        soft relaxation of dynamic upper bound on new capacity (growth rate)
 874   
 875      initial_new_capacity_lo(node,tec,year_all)     dynamic lower bound on new capacity (fixed initial term)
 876      growth_new_capacity_lo(node,tec,year_all)      dynamic lower bound on new capacity (growth rate)
 877      soft_new_capacity_lo(node,tec,year_all)        soft relaxation of dynamic lower bound on new capacity (growth rate)
 878   
 879      initial_activity_up(node,tec,year_all,time)    dynamic upper bound on activity (fixed initial term)
 880      growth_activity_up(node,tec,year_all,time)     dynamic upper bound on activity (growth rate)
 881      soft_activity_up(node,tec,year_all,time)       soft relaxation of dynamic upper bound on activity (growth rate)
 882   
 883      initial_activity_lo(node,tec,year_all,time)    dynamic lower bound on activity (fixed initial term)
 884      growth_activity_lo(node,tec,year_all,time)     dynamic lower bound on activity (growth rate)
 885      soft_activity_lo(node,tec,year_all,time)       soft relaxation of dynamic lower bound on activity (growth rate)
 886  ;
 887   
 888  ***
 889  * Cost parameters for 'soft' relaxations of dynamic constraints
 890  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 891  *
 892  * The implementation of |MESSAGEix| includes the functionality for 'soft' relaxations of dynamic constraints on
 893  * new-built capacity and activity (see Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
 894  * Refer to the section :ref:`dynamic_constraints`.
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 18
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 895  *
 896  * .. list-table::
 897  *    :widths: 20 80
 898  *    :header-rows: 1
 899  *
 900  *    * - Parameter name
 901  *      - Index names
 902  *    * - abs_cost_new_capacity_soft_up
 903  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 904  *    * - abs_cost_new_capacity_soft_lo
 905  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 906  *    * - level_cost_new_capacity_soft_up
 907  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 908  *    * - level_cost_new_capacity_soft_lo
 909  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 910  *    * - abs_cost_activity_soft_up
 911  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 912  *    * - abs_cost_activity_soft_lo
 913  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 914  *    * - level_cost_activity_soft_up
 915  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 916  *    * - level_cost_activity_soft_lo
 917  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
 918  *
 919  ***
 920   
 921  ***
 922  * Historical capacity and activity values
 923  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 924  *
 925  * Historical data on new capacity and activity levels are included in |MESSAGEix| for
 926  * correct accounting of the vintage portfolio and a seamless implementation of dynamic constraints from
 927  * historical years to model periods.
 928  *
 929  * .. list-table::
 930  *    :widths: 35 65
 931  *    :header-rows: 1
 932  *
 933  *    * - Parameter name
 934  *      - Index names
 935  *    * - historical_new_capacity [#hist]_
 936  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 937  *    * - historical_activity [#hist]_
 938  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 939  *
 940  ***
 941   
 942  Parameters
 943      historical_new_capacity(node,tec,year_all)           historical new capacity
 944      historical_activity(node,tec,year_all,mode,time)     historical acitivity
 945  ;
 946   
 947  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 19
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 948  * Auxiliary investment cost parameters and multipliers
 949  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 950  * Documentation not yet included.
 951  ***
 952   
 953  Parameters
 954      construction_time_factor(node,tec,year_all) scaling factor to account for construction time of new capacity
 955      remaining_capacity(node,tec,year_all,year_all) scaling factor to account for remaining capacity in period
 956      end_of_horizon_factor(node,tec,year_all)    multiplier for value of investment at end of model horizon
 957      beyond_horizon_lifetime(node,tec,year_all)  remaining technical lifetime at the end of model horizon
 958      beyond_horizon_factor(node,tec,year_all)    discount factor of remaining lifetime beyond model horizon
 959  ;
 960   
 961  *----------------------------------------------------------------------------------------------------------------------*
 962  * Emissions                                                                                                            *
 963  *----------------------------------------------------------------------------------------------------------------------*
 964   
 965  ***
 966  * Parameters of the `Emission` section
 967  * ------------------------------------
 968  *
 969  * The implementation of |MESSAGEix| includes a flexible and versatile accounting of emissions across different
 970  * categories and species, with the option to define upper bounds and taxes on various (aggregates of) emissions
 971  * and pollutants), (sets of) technologies, and (sets of) years.
 972  *
 973  * .. list-table::
 974  *    :widths: 25 75
 975  *    :header-rows: 1
 976  *
 977  *    * - Parameter name
 978  *      - Index dimensions
 979  *    * - historical_emission [#hist]_
 980  *      - ``node`` | ``emission`` | ``type_tec`` | ``year``
 981  *    * - emission_scaling [#em_scaling]_
 982  *      - ``type_emission`` | ``emission``
 983  *    * - bound_emission
 984  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
 985  *    * - tax_emission
 986  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
 987  *
 988  * .. [#em_scaling] The parameters ``emission_scaling`` allows to efficiently aggregate different emissions/pollutants
 989  *    and set bounds or taxes on various categories.
 990  ***
 991   
 992  Parameters
 993      historical_emission(node,emission,type_tec,year_all)    historical emissions by technology type (including land)
 994      emission_scaling(type_emission,emission)                scaling factor to harmonize bounds or taxes across tpes
 995      bound_emission(node,type_emission,type_tec,type_year)   upper bound on emissions
 996      tax_emission(node,type_emission,type_tec,type_year)     emission tax
 997  ;
 998   
 999  *----------------------------------------------------------------------------------------------------------------------*
1000  * Land-use model emulator                                                                                              *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 20
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1001  *----------------------------------------------------------------------------------------------------------------------*
1002   
1003  ***
1004  * Parameters of the `Land-Use model emulator` section
1005  * ---------------------------------------------------
1006  *
1007  * The implementation of |MESSAGEix| includes a land-use model emulator, which draws on exogenous land-use scenarios
1008  * (provided by another model) to derive supply of commodities (e.g., biomass) and emissions
1009  * from agriculture and forestry.
1010  *
1011  * .. list-table::
1012  *    :widths: 25 75
1013  *    :header-rows: 1
1014  *
1015  *    * - Parameter name
1016  *      - Index dimensions
1017  *    * - historical_land [#hist]_
1018  *      - ``node`` | ``land_scenario`` | ``year``
1019  *    * - land_cost
1020  *      - ``node`` | ``land_scenario`` | ``year``
1021  *    * - land_input
1022  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1023  *    * - land_output
1024  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1025  *    * - land_use
1026  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1027  *    * - land_emission
1028  *      - ``node`` | ``land_scenario`` | ``year`` | ``emission``
1029  *    * - initial_land_scen_up
1030  *      - ``node`` | ``land_scenario`` | ``year``
1031  *    * - growth_land_scen_up
1032  *      - ``node`` | ``land_scenario`` | ``year``
1033  *    * - initial_land_scen_lo
1034  *      - ``node`` |  ``land_scenario`` | ``year``
1035  *    * - growth_land_scen_lo
1036  *      - ``node`` | ``land_scenario`` | ``year``
1037  *    * - initial_land_up
1038  *      - ``node`` | ``year`` | ``land_type``
1039  *    * - dynamic_land_up
1040  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1041  *    * - growth_land_up
1042  *      - ``node`` | ``year`` | ``land_type``
1043  *    * - initial_land_lo
1044  *      - ``node`` | ``year`` | ``land_type``
1045  *    * - dynamic_land_lo
1046  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1047  *    * - growth_land_lo
1048  *      - ``node`` | ``year`` | ``land_type``
1049  *
1050  ***
1051  ***
1052  * Parameters of the `Share Constraints` section
1053  * ---------------------------------------------
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 21
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1054  *
1055  * Share constraints define the share of a given commodity to be active on a certain level
1056  *
1057  * .. list-table::
1058  *    :widths: 25 75
1059  *    :header-rows: 1
1060  *
1061  *    * - Parameter name
1062  *      - Index dimensions
1063  *    * - share_commodity_up
1064  *      - ``shares`` | ``node_share`` | ``year_act`` | ``time``
1065  *    * - share_commodity_lo
1066  *      - ``shares`` | ``node`` | ``year_act`` | ``time``
1067  *    * - share_mode_up
1068  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1069  *    * - share_mode_lo
1070  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1071  *
1072  ***
1073   
1074  Parameters
1075      share_commodity_up(shares,node,year_all,time)    upper bound of commodity share constraint
1076      share_commodity_lo(shares,node,year_all,time)    lower bound of commodity share constraint
1077  *    share_mode_up(shares,node,tec,mode,year_all,time)    upper bound of mode share constraint
1078  *    share_mode_lo(shares,node,tec,mode,year_all,time)    lower bound of mode share constraint
1079  ;
1080   
1081  *----------------------------------------------------------------------------------------------------------------------*
1082  * Generic linear relations                                                                                       *
1083  *----------------------------------------------------------------------------------------------------------------------*
1084   
1085  ***
1086  * Parameters of the `Relations` section
1087  * -------------------------------------
1088  *
1089  * Generic linear relations are implemented in |MESSAGEix|.
1090  * This feature is intended for development and testing only - all new features should be implemented
1091  * as specific new mathematical formulations and associated sets & parameters.
1092  *
1093  * .. list-table::
1094  *    :widths: 25 75
1095  *    :header-rows: 1
1096  *
1097  *    * - Parameter name
1098  *      - Index dimensions
1099  *    * - relation_upper
1100  *      - ``relation`` | ``node_rel`` | ``year_rel``
1101  *    * - relation_lower
1102  *      - ``relation`` | ``node_rel`` | ``year_rel``
1103  *    * - relation_cost
1104  *      - ``relation`` | ``node_rel`` | ``year_rel``
1105  *    * - relation_new_capacity
1106  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 22
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1107  *    * - relation_total_capacity
1108  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1109  *    * - relation_activity
1110  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``node_loc`` | ``tec`` | ``year_act`` | ``mode``
1111  *
1112  ***
1113   
1114  *----------------------------------------------------------------------------------------------------------------------*
1115  * Fixed variable values                                                                                                *
1116  *----------------------------------------------------------------------------------------------------------------------*
1117   
1118  ***
1119  * Fixed variable values
1120  * ---------------------
1121  *
1122  * The following parameters allow to set variable values to a specific value.
1123  * The value is usually taken from a solution of another model instance
1124  * (e.g., scenarios where a shock sets in later to mimick imperfect foresight).
1125  *
1126  * The fixed values do not override any upper or lower bounds that may be defined,
1127  * so fixing variables to values outside of that range will yield an infeasible model.
1128  *
1129  * .. list-table::
1130  *    :widths: 25 75
1131  *    :header-rows: 1
1132  *
1133  *    * - Parameter name
1134  *      - Index dimensions
1135  *    * - fixed_extraction
1136  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
1137  *    * - fixed_stock
1138  *      - ``node`` | ``commodity`` | ``level`` | ``year``
1139  *    * - fixed_new_capacity
1140  *      - ``node`` | ``technology`` | ``year_vtg``
1141  *    * - fixed_capacity
1142  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act``
1143  *    * - fixed_activity
1144  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
1145  *    * - fixed_land
1146  *      - ``node`` | ``land_scenario`` | ``year``
1147  *
1148  * Note that the variable :math:`STOCK\_CHG` is determined implicitly by the :math:`STOCK` variable
1149  * and therefore does not need to be explicitly fixed.
1150  ***
1151   
1152  Parameters
1153      fixed_stock(node,commodity,level,year_all)          fixed stock level
1154      fixed_new_capacity(node,tec,year_all)               fixed new-built capacity
1155      fixed_capacity(node,tec,vintage,year_all)           fixed maintained capacity
1156      fixed_activity(node,tec,vintage,year_all,mode,time) fixed activity level
1157  ;
1158   
1159  *----------------------------------------------------------------------------------------------------------------------*
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 23
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1160  * Auxiliary reporting parameters                                                                                       *
1161  *----------------------------------------------------------------------------------------------------------------------*
1162   
1163  Parameters
1164      trade_cost(node, year_all)              net of commodity import costs and commodity export revenues by node and year
1165      import_cost(node, commodity, year_all)  import costs by commodity and node and year
1166      export_cost(node, commodity, year_all)  export revenues by commodity and node and year
1167  ;
1168   
1169  *----------------------------------------------------------------------------------------------------------------------*
1170  * Auxiliary parameters for GAMS workflow                                                                               *
1171  *----------------------------------------------------------------------------------------------------------------------*
1172   
1173  Parameters
1174      ctr               counter parameter for loops
1175      status(*,*)       model solution status parameter for log writing
1176  ;
1177   
1178  ** load data from gdx, run processing scripts of auxiliary parameters
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/data_load.gms
1179  $INCLUDE MESSAGE/data_load.gms
1180   
1181  *----------------------------------------------------------------------------------------------------------------------*
1182  * load sets and parameters from dataset gdx                                                                            *
1183  *----------------------------------------------------------------------------------------------------------------------*
1184   
1185  put_utility 'log' /"+++ Importing data from 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx'... +++ " ;
1186   
1187  * all sets and general parameters from the gdx file
GDXIN   C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx
1188  $GDXIN 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx'
--- LOAD  node = 50:node
--- LOAD  tec = 53:technology
--- LOAD  year_all = 66:year
--- LOAD  commodity = 6:commodity
--- LOAD  level = 34:level
--- LOAD  grade = 17:grade
--- LOAD  mode = 49:mode
--- LOAD  time = 54:time
--- LOAD  rating = 51:rating
1189  $LOAD node, tec=technology, year_all=year, commodity, level, grade, mode, time, rating
--- LOAD  emission = 9:emission
1190  $LOAD emission
--- LOAD  lvl_spatial = 35:lvl_spatial
--- LOAD  lvl_temporal = 36:lvl_temporal
--- LOAD  map_spatial_hierarchy = 41:map_spatial_hierarchy
--- LOAD  map_temporal_hierarchy = 47:map_temporal_hierarchy
1191  $LOAD lvl_spatial, lvl_temporal, map_spatial_hierarchy, map_temporal_hierarchy
--- LOAD  map_node = 38:map_node
--- LOAD  map_time = 48:map_time
--- LOAD  map_commodity = 37:map_commodity
--- LOAD  map_stocks = 42:map_stocks
--- LOAD  map_tec = 44:map_tec
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 24
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


--- LOAD  map_tec_time = 46:map_tec_time
--- LOAD  map_tec_mode = 45:map_tec_mode
1192  $LOAD map_node, map_time, map_commodity, map_stocks, map_tec, map_tec_time, map_tec_mode
--- LOAD  map_storage = 43:map_storage
1193  $LOAD map_storage
--- LOAD  type_tec = 57:type_tec
--- LOAD  cat_tec = 4:cat_tec
--- LOAD  type_year = 65:type_year
--- LOAD  cat_year = 5:cat_year
--- LOAD  type_emission = 55:type_emission
--- LOAD  cat_emission = 2:cat_emission
1194  $LOAD type_tec, cat_tec, type_year, cat_year, type_emission, cat_emission
--- LOAD  inv_tec = 18:inv_tec
1195  $LOAD inv_tec
--- LOAD  balance_equality = 1:balance_equality
1196  $LOAD balance_equality
--- LOAD  shares = 52:shares
1197  $LOAD shares
--- LOAD  crop_growing_time = 8:crop_growing_time
--- LOAD  crop_gro_first_time = 7:crop_gro_first_time
1198  $LOAD crop_growing_time, crop_gro_first_time
1199  $GDXIN
1200   
1201  Execute_load 'data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx'
1202  * general parameters
1203  duration_period, duration_time, interestrate,
1204  * technology technical-engineering parameters and economic costs
1205  input, output, construction_time, technical_lifetime
1206  capacity_factor, operation_factor, min_utilization_factor, inv_cost, fix_cost, var_cost,
1207  * upper and lower bounds on new capacity investment, total installed capacity and activity (including mapping sets)
1208  is_bound_new_capacity_up, is_bound_new_capacity_lo, bound_new_capacity_up, bound_new_capacity_lo,
1209  is_bound_total_capacity_up, is_bound_total_capacity_lo, bound_total_capacity_up, bound_total_capacity_lo,
1210  is_bound_activity_up, bound_activity_up, bound_activity_lo, bound_storage_lo, bound_storage_up, storage_loss,
1211  * dynamic constraints on new capacity investment and activity of technologies
1212  is_dynamic_new_capacity_up, initial_new_capacity_up, growth_new_capacity_up,
1213  is_dynamic_new_capacity_lo, initial_new_capacity_lo, growth_new_capacity_lo,
1214  is_dynamic_activity_up, initial_activity_up, growth_activity_up,
1215  is_dynamic_activity_lo, initial_activity_lo, growth_activity_lo,
1216  * parameters for reliability, flexibility and renewable potential constraints
1217  rating_bin, reliability_factor, peak_load_factor,
1218  * share constraints
1219  map_shares_commodity_share,map_shares_commodity_total,share_commodity_lo,share_commodity_up
1220  * emission factors, bounds and taxes on emissions (including mapping sets)
1221  historical_emission, emission_factor, emission_scaling, is_bound_emission, bound_emission, tax_emission,
1222  * historical values of new capacity investment, activity and extraction
1223  historical_new_capacity, historical_activity,
1224  * energy stocks
1225  commodity_stock,
1226  * demand parameters
1227  demand_fixed=demand
1228  * fixing variables to pre-specified values
1229  is_fixed_stock, is_fixed_new_capacity, is_fixed_capacity, is_fixed_activity,
1230  fixed_stock, fixed_new_capacity, fixed_capacity, fixed_activity
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 25
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1231  ;
1232   
1233  *----------------------------------------------------------------------------------------------------------------------*
1234  * assignment and computation of MESSAGE-specific auxiliary parameters                                                  *
1235  *----------------------------------------------------------------------------------------------------------------------*
1236   
1237  * get assignment of auxiliary parameter for period mappings and duration
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\includes/period_parameter_assignment.gms
1238  $INCLUDE includes/period_parameter_assignment.gms
1239  *----------------------------------------------------------------------------------------------------------------------*
1240  * assignment and computation of auxiliary parameters                                                                   *
1241  *----------------------------------------------------------------------------------------------------------------------*
1242   
1243  * additional sets and parameters created in GAMS to make notation more concise for myopic/rolling-horizon optimization
1244  Sets
1245      historical(year_all)             set of periods prior to the start of the model horizon
1246      model_horizon(year_all)          set of periods included in the model horizon
1247      macro_horizon(year_all)          set of periods included in the MACRO model horizon
1248      seq_period(year_all,year_all2)    mapping of one period ('year_all') to the next ('year_all2')
1249      map_period(year_all,year_all2)    mapping of one period ('year_all') to itself and all subsequent periods ('year_all2')
1250      first_period(year_all)           flag for first period in model horizon
1251      last_period(year_all)            flag for last period in model horizon
1252      macro_initial_period(year_all)   flag for period in model horizon in which to initialize model parameters in (period prior to first model period) - used in MACRO
1253      macro_base_period(year_all)      flag for base year period in model horizon (period prior to first model period) - used in MACRO
1254      seq_time(time,time2)             mapping of one time period ('time') to the next ('time2')
1255      first_time(time)                 flag for first time in model horizon
1256      last_time(time)                  flag for last time in model horizon
1257      seq_year_time(year_all,year_all2,time,time2)
1258  ;
1259   
1260  Parameter
1261      duration_period_sum(year_all,year_all2) number of years between two periods ('year_all' must precede 'year_all2')
1262      duration_time_rel(time,time2)         relative duration of subannual time period ('time2' relative to parent 'time')
1263      elapsed_years(year_all)    elapsed years since the start of the model horizon (not including 'year_all' period)
1264      remaining_years(year_all)  remaining years until the end of the model horizon (including last period)
1265      year_order(year_all)       order for members of set 'year_all'
1266  ;
1267   
1268  *----------------------------------------------------------------------------------------------------------------------*
1269  * assignment auxiliary dynamic sets                                                                                    *
1270  *----------------------------------------------------------------------------------------------------------------------*
1271   
1272  ** treatment of periods **
1273   
1274  * sanity checks to ensure that not more than one period is assigned to the first- and lastyear categories
1275  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ) > 1 ,
1276      abort "There is more than one period assigned as category 'firstmodelyear'!" ) ;
1277  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ) > 1 ,
1278      abort "There is more than one period assigned as category 'lastmodelyear'!" ) ;
1279  if ( sum(year_all$( cat_year("initializeyear_macro",year_all) ), 1 ) > 1 ,
1280      abort "There is more than one period assigned as category 'initializeyear_macro'!" ) ;
1281   
1282  * mapping of sequence of periods over the model horizon
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 26
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1283  seq_period(year_all,year_all2)$( ORD(year_all) + 1 = ORD(year_all2) ) = yes ;
1284  map_period(year_all,year_all2)$( ORD(year_all) <= ORD(year_all2) ) = yes ;
1285  set subtime(time) /1*12/;
1286  alias (subtime,subtime2);
1287  *loop(time,
1288  *subtime(time) = yes$map_temporal_hierarchy('sub_1',time,'year')
1289  *);
1290  seq_time(subtime,subtime2)$( ORD(subtime) + 1 = ORD(subtime2) ) = yes ;
1291  seq_year_time(year_all,year_all2,subtime,subtime2)$(ORD(year_all) = ORD(year_all2) AND   seq_time(subtime,subtime2)) = YES;
1292  * define first and last time periods
1293  first_time(subtime)$( ORD(subtime) = 1) = yes ;
1294  last_time(subtime)$( ORD(subtime) = CARD(subtime) ) = yes ;
1295  seq_year_time(year_all,year_all2,last_time(subtime),first_time(subtime2))$(seq_period(year_all,year_all2)) = YES;
1296   
1297  * dynamic sets (singleton) with first and last periods in model horizon of MESSAGEix (for easier reference)
1298  first_period(year_all) = no ;
1299  first_period(year_all)$( cat_year("firstmodelyear",year_all) ) = yes ;
1300  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ),
1301      last_period(year_all)$( cat_year("lastmodelyear",year_all) ) = yes;
1302  else
1303      last_period(year_all)$( ORD(year_all) = CARD(year_all) ) = yes ;
1304  ) ;
1305   
1306  * dynamic sets for MACRO initialization and base periods
1307  macro_initial_period(year_all) = no ;
1308  macro_initial_period(year_all)$( cat_year("initializeyear_macro",year_all) ) = yes ;
1309  macro_base_period(year_all) = no ;
1310  macro_base_period(year_all)$( ORD(year_all) = sum(year_all2$( first_period(year_all2) ), ORD(year_all2) - 1 ) )  = yes ;
1311   
1312  * assign set of historical years, the model horizon and the MACRO hoizon (includes 'macro_base_period')
1313  historical(year_all)$( ORD(year_all) < sum(year_all2$cat_year("firstmodelyear",year_all2), ORD(year_all2) ) ) = yes ;
1314  model_horizon(year_all) = no ;
1315  model_horizon(year_all)$( ORD(year_all) >= sum(year_all2$first_period(year_all2), ORD(year_all2) )
1316      AND ORD(year_all) <= sum(year_all2$last_period(year_all2), ORD(year_all2) ) ) = yes ;
1317  macro_horizon(year_all) = no ;
1318  macro_horizon(year_all)$macro_base_period(year_all) = yes;
1319  macro_horizon(year_all)$model_horizon(year_all) = yes;
1320   
1321  *----------------------------------------------------------------------------------------------------------------------*
1322  * assignment of (cumulative) discount factors over time                                                                *
1323  *----------------------------------------------------------------------------------------------------------------------*
1324   
1325  * simple method to compute discount factor (but this approach implicitly assumes a constant interest rate)
1326  *discountfactor(year_all) = POWER( 1 / ( 1+interestrate(year_all) ), sum(year_all2$( ORD(year_all2) < ORD(year_all) ),
1327  *    duration_period(year_all2) ) ) ;
1328   
1329  * compute per-year discount factor (using a recursive method) - set to 1 by default (interest rate = 0)
1330  discountfactor(year_all) = 1 ;
1331   
1332  * recursively compute the per-year discount factor
1333  loop(year_all$( ORD(year_all) > 1 ),
1334      discountfactor(year_all) =
1335          sum(year_all2$( seq_period(year_all2,year_all) ), discountfactor(year_all2)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 27
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1336              * POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) ) ;
1337  ) ;
1338   
1339  * store the per-year discount factor for later use in the file 'MESSAGE/scaling_investment_costs.gms'
1340  discountfactor('last_year') = sum(last_period, discountfactor(last_period) ) ;
1341   
1342  * multiply per-year discount factor by discounted period duration
1343  discountfactor(year_all) =
1344      discountfactor(year_all) * (
1345  * multiply the per-year discount factor by the geometric series of over the duration of the period
1346          ( ( 1 - POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) )
1347              / ( 1 - 1 / ( 1 + interestrate(year_all) ) ) )$( interestrate(year_all) )
1348  * if interest rate = 0, multiply by the number of years in that period
1349          + ( duration_period(year_all) )$( interestrate(year_all) eq 0 ) )
1350  ;
1351   
1352  *----------------------------------------------------------------------------------------------------------------------*
1353  * assignment of auxiliary parameters for duration of periods                                                           *
1354  *----------------------------------------------------------------------------------------------------------------------*
1355   
1356  * define order of set 'year_all' (to use as equivalent of ORD operator on the dynamic set year (subset of 'year_all') )
1357  year_order(year_all) = ORD(year_all) ;
1358   
1359  * auxiliary parameters for duration between periods (years) - not including the final period 'year_all2'
1360  duration_period_sum(year_all,year_all2) =
1361      SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < ORD(year_all2) ) , duration_period(year_all3) ) ;
1362   
1363  * auxiliary parameter for duration since the first year of the model horizon - not including the period 'year_all'
1364  elapsed_years(year_all) = sum(first_period, duration_period_sum(first_period,year_all) ) ;
1365   
1366  * auxiliary parameter for duration until the end of the model horizon - including the last period
1367  remaining_years(year_all) = SUM(year_all2$( ORD(year_all) <= ORD(year_all2) ) , duration_period(year_all2) ) ;
1368   
1369  * compute auxiliary parameters for relative duration of subannual time periods
1370  duration_time_rel(time,time2)$( map_time(time,time2) ) = duration_time(time2) / duration_time(time) ;
1371   
1372  ** mapping and other stuff for technologies **
1373   
1374  * assign an additional mapping set for technologies to nodes, modes and subannual time slices (for shorter reference)
1375  map_tec_act(node,tec,year_all,mode,time)$( map_tec_time(node,tec,year_all,time) AND
1376     map_tec_mode(node,tec,year_all,mode) ) = yes ;
1377   
1378  * mapping of technology lifetime to all 'current' periods (for all non-investment technologies)
1379  map_tec_lifetime(node,tec,year_all,year_all)$( map_tec(node,tec,year_all) ) = yes ;
1380   
1381  * mapping of technology lifetime to all periods 'year_all' which are within the economic lifetime
1382  * (if built in period 'vintage')
1383  map_tec_lifetime(node,tec,vintage,year_all)$( map_tec(node,tec,vintage) AND map_tec(node,tec,year_all)
1384      AND map_period(vintage,year_all)
1385      AND duration_period_sum(vintage,year_all) < technical_lifetime(node,tec,vintage) ) = yes ;
1386   
1387  * mapping of technology lifetime to all periods 'year_all' which were built prior to the beginning of the model horizon
1388  map_tec_lifetime(node,tec,historical,year_all)$( map_tec(node,tec,year_all) AND map_period(historical,year_all)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 28
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1389      AND historical_new_capacity(node,tec,historical)
1390      AND duration_period_sum(historical,year_all)
1391          < sum(first_period, technical_lifetime(node,tec,first_period) ) ) = yes ;
1392   
1393  * mapping of technologies to commodities and ratings
1394  map_rating(node,inv_tec,commodity,level,rating,year_all)$(
1395      SUM(time, reliability_factor(node,inv_tec,year_all,commodity,level,time,rating) ) ) = yes;
1396   
1397  * set the default capacity factor for technologies where no parameter value is provided in the input data
1398  capacity_factor(node,tec,year_all2,year_all,time)$( map_tec_time(node,tec,year_all,time)
1399      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT capacity_factor(node,tec,year_all2,year_all,time) ) = 1 ;
1400   
1401  * assign the yearly average capacity factor (used in equation OPERATION_CONSTRAINT)
1402  capacity_factor(node,tec,year_all2,year_all,'year') =
1403      sum(time$map_tec_time(node,tec,year_all,time), duration_time(time)
1404          * capacity_factor(node,tec,year_all2,year_all,time) ) ;
1405   
1406  * set the default operation factor for technologies where no parameter value is provided in the input data
1407  operation_factor(node,tec,year_all2,year_all)$( map_tec(node,tec,year_all)
1408      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT operation_factor(node,tec,year_all2,year_all) ) = 1 ;
1409   
1410  * set the emission scaling parameter to 1 if only one emission is included in a category
1411  emission_scaling(type_emission,emission)$( cat_emission(type_emission,emission)
1412          and not emission_scaling(type_emission,emission) ) = 1 ;
1413   
1414  *----------------------------------------------------------------------------------------------------------------------*
1415  * sanity checks on the data set                                                                                        *
1416  *----------------------------------------------------------------------------------------------------------------------*
1417   
1418  Parameter check ;
1419   
1420  * check whether all relevant technology/vintage/year combinations have positove input/output values assigned
1421  *loop((node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ),
1422  *    if ( sum( (mode,node2,commodity,level,time,time2),
1423  *            input(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2)
1424  *            + output(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2) ) eq 0 ,
1425  *        put_utility 'log'/" Warning: No input or output not defined for '"node.tl:0"|"tec.tl:0"|"vintage.tl:0"|"year_all.tl:0"' !" ;
1426  *    ) ;
1427  *) ;
1428   
1429  * check that the economic and technical lifetime are defined and consistent for all investment technologies
1430  loop((node,inv_tec,model_horizon)$( map_tec(node,inv_tec,model_horizon) ),
1431      if ( technical_lifetime(node,inv_tec,model_horizon) <= 0 ,
1432          put_utility 'log'/" Error: Technical lifetime not defined for '"node.tl:0"|"inv_tec.tl:0"|"model_horizon.tl:0"' !" ;
1433          check = 1 ;
1434      ) ;
1435  ) ;
1436  if (check,
1437      abort "There is a problem with the definition of the technical lifetime!" ;
1438  ) ;
1439   
1440  * check for validity of temporal resolution
1441  * loop(lvl_temporal,
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 29
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1442  *     loop(time2$( sum(time, map_temporal_hierarchy(lvl_temporal,time,time2) ) ),
1443  *         check = 1$( sum( time$( map_temporal_hierarchy(lvl_temporal,time,time2) ),
1444  *             duration_time(time) ) ne duration_time(time2) ) ;
1445  *     ) ;
1446  * ) ;
1447  * if (check,
1448  *     abort "There is a problem in the definition of the temporal resolution!" ;
1449  * );
1450   
1451  ** compute auxiliary parameters for capacity and investment cost accounting
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/scaling_investment_costs.gms
1452  $INCLUDE MESSAGE/scaling_investment_costs.gms
1453  ***
1454  * Auxiliary investment parameters
1455  * ===============================
1456  * This page is generated from the auto-documentation mark-up in ``MESSAGE/scaling_investment_costs.gms``.
1457  *
1458  ***
1459   
1460  * compute the scaling investment parameters for all periods in the model horizon
1461  year(year_all)$( model_horizon(year_all) ) = yes ;
1462   
1463  * compute the technical lifetime remaining beyond the overall model horizon
1464  beyond_horizon_lifetime(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
1465      technical_lifetime(node,inv_tec,vintage) - remaining_years(vintage) ;
1466  beyond_horizon_lifetime(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) < 0 ) = 0 ;
1467   
1468  ***
1469  * Levelized capital costs
1470  * -----------------------
1471  * For the 'soft' relaxations of the dynamic constraints and the associated penalty factor in the objective function,
1472  * we need to compute the parameter :math:`levelized\_cost_{n,t,y}`.
1473  *
1474  * .. math::
1475  *    levelized\_cost_{n,t,m,y,h} := \
1476  *        & inv\_cost_{n,t,y} \cdot \frac{ interestrate_{y} \cdot \left( 1 + interestrate_{y} \right)^{|y|} }
1477  *                                      { \left( 1 + interestrate_{y} \right)^{|y|} - 1 } \\
1478  *        & + fix\_cost_{n,t,y,y} \cdot \frac{ 1 }{ \sum_{h'} duration\_time_{h'} \cdot capacity\_factor_{n,t,y,y,h'} } \\
1479  *        & + var\_cost_{n,t,y,y,m,h}
1480  *
1481  * where :math:`|y| = technical\_lifetime_{n,t,y}`. This formulation implicitly assumes constant fixed
1482  * and variable costs over time.
1483  *
1484  * **Warning:** All soft relaxations of the dynamic activity constraint are
1485  * disabled if the levelized costs are negative!
1486  ***
1487   
1488  levelized_cost(node,tec,year,time)$( map_tec_time(node,tec,year,time) AND inv_tec(tec) ) =
1489      inv_cost(node,tec,year)
1490          * (
1491  * compute discounted annualized investment costs if interest rate > 0
1492              ( interestrate(year)
1493                  * ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 30
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1494                  / ( ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year) - 1 )
1495                )$( interestrate(year) )
1496  * if interest rate = 0, annualized investment costs are total investment costs divided by technical lifetime
1497              + ( 1 / technical_lifetime(node,tec,year) )$( interestrate(year) eq 0 )
1498            )
1499  * add (proportional) fixed and variable costs, assuming that these remain constant over the technical lifetime
1500      + ( fix_cost(node,tec,year,year) /
1501            sum(time2$( map_tec_time(node,tec,year,time2) ),
1502               duration_time(time2) * capacity_factor(node,tec,year,year,time2) )
1503          )$( fix_cost(node,tec,year,year) )
1504      + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,tec,year,year,mode,time) )
1505  ;
1506   
1507  ***
1508  * Construction time accounting
1509  * ----------------------------
1510  * If the construction of new capacity takes a significant amount of time,
1511  * investment costs have to be scaled up accordingly to account for the higher capital costs.
1512  *
1513  * .. math::
1514  *    construction\_time\_factor_{n,t,y} = \left( 1 + interestrate_y \right)^{|y|}
1515  *
1516  * where :math:`|y| = construction\_time_{n,t,y}`. If no construction time is specified, the default value of the
1517  * investment cost scaling factor defaults to 1. The model assumes that the construction time only plays a role
1518  * for the investment costs, i.e., each unit of new-built capacity is available instantaneously.
1519  *
1520  * **Comment:** This formulation applies the discount rate of the vintage year
1521  * (i.e., the year in which the new capacity becomes operational).
1522  ***
1523   
1524  * set default construction_time_factor to 1
1525  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) ) = 1;
1526   
1527  * compute the construction_time_factor
1528  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) AND construction_time(node,inv_tec,year) ) =
1529       ( 1 + interestrate(year) ) ** construction_time(node,inv_tec,year) ;
1530   
1531  ***
1532  * Investment costs beyond the model horizon
1533  * -----------------------------------------
1534  * If the technical lifetime of a technology exceeds the model horizon :math:`Y^{model}`, the model has to add
1535  * a scaling factor to the investment costs (:math:`end\_of\_horizon\_factor_{n,t,y}`). Assuming a constant
1536  * stream of revenue (marginal value of the capacity constraint), this can be computed by annualizing investment costs
1537  * from the condition that in an optimal solution, the investment costs must equal the discounted future revenues,
1538  * if the investment variable :math:`CAP\_NEW_{n,t,y} > 0`:
1539  *
1540  * .. math::
1541  *    inv\_cost_{n,t,y^V} = \sum_{y \in Y^{lifetime}_{n,t,y^V}} discountfactor_{y} \cdot \beta_{n,t},
1542  *
1543  * Here, :math:`\beta_{n,t} > 0` is the dual variable to the capacity constraint (assumed constant over future periods)
1544  * and :math:`Y^{lifetime}_{n,t,y^V}` is the set of periods in the lifetime of a plant built in period :math:`y^V`.
1545  * Then, the scaling factor :math:`end\_of\_horizon\_factor_{n,t,y^V}` can be derived as follows:
1546  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 31
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1547  * .. math::
1548  *    end\_of\_horizon\_factor_{n,t,y^V} :=
1549  *    \frac{\sum_{y \in Y^{lifetime}_{n,t,y^V} \cap Y^{model}} discountfactor_{y} }
1550  *        {\sum_{y' \in Y^{lifetime}_{n,t,y^V}} discountfactor_{y'} + beyond\_horizon\_factor_{n,t,y^V} }
1551  *    \in (0,1],
1552  *
1553  * where the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` accounts for the discount factor beyond the
1554  * overall model horizon (the set :math:`Y` in contrast to the set :math:`Y^{model} \subseteq Y` of the periods
1555  * included in the current model iteration (see the page on the recursive-dynamic model solution approach).
1556  *
1557  * .. math::
1558  *    beyond\_horizon\_lifetime_{n,t,y^V} :=  \max \Big\{ 0,
1559  *        economic\_lifetime_{n,t,y^V} - \sum_{y' \geq y^V} duration\_period_{y'} \Big\}
1560  *
1561  * .. math::
1562  *    beyond\_horizon\_factor_{n,t,y^V} :=
1563  *        discountfactor_{\widehat{y}} \cdot \frac{1}{ \left( 1 + interestrate_{\widehat{y}} \right)^{|\widehat{y}|} }
1564  *        \cdot \frac{ 1 - \left( \frac{1}{1 + interestrate_{\widehat{y}}} \right)^{|\widetilde{y}|}}
1565  *                   { 1 - \frac{1}{1 + interestrate_{\widehat{y}}}}
1566  *
1567  * where :math:`\widehat{y}` is the last period included in the overall model horizon,
1568  * :math:`|\widehat{y}| = period\_duration\_period_{\widehat{y}}`
1569  * and :math:`|\widetilde{y}| = beyond\_horizon\_lifetime_{n,t,y^V}`.
1570  *
1571  * If the interest rate is zero, i.e., :math:`interestrate_{\widehat{y}} = 0`,
1572  * the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` equals the remaining technical lifetime
1573  * beyond the model horizon and the parameter :math:`end\_of\_horizon\_factor_{n,t,y^V}` equals
1574  * the share of technical lifetime within the model horizon.
1575  ***
1576   
1577  * compute the cumulative discount factor of the technical lifetime remaining beyond the model horizon
1578  beyond_horizon_factor(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) )
1579      = sum(last_period,
1580  * compute the discount factor of the very last year (not period) in the model horizon
1581          discountfactor('last_year') * POWER( 1 / ( 1 + interestrate(last_period) ), duration_period(last_period) ) * (
1582  * multiply this by the geometric series of remaining technical lifetime if interestrate of last model period > 0
1583              (
1584                  ( 1 - POWER( 1 / ( 1 + interestrate(last_period) ), beyond_horizon_lifetime(node,inv_tec,vintage) ) )
1585                  / ( 1 - 1 / ( 1 + interestrate(last_period) ) )
1586              )$( interestrate(last_period) )
1587  * if interest rate = 0, multiply by remaining technical lifetime
1588              + ( beyond_horizon_lifetime(node,inv_tec,vintage) )$( interestrate(last_period) eq 0 )
1589          )
1590      ) ;
1591   
1592  * deterine the parameter end_of_horizon_factor used for scaling investment costs to account for
1593  * technical lifetime beyond the model horizon
1594  end_of_horizon_factor(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
1595      sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), discountfactor(year_all)  )
1596      / ( sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), discountfactor(year_all) )
1597          + beyond_horizon_factor(node,inv_tec,vintage) ) ;
1598   
1599  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 32
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1600  * **Possible extension:** Instead of assuming :math:`\beta_{n,t}` to be constant over time, one could include
1601  * a simple (linear) projection of :math:`\beta_{n,t,y}` beyond the end of the model horizon. However, this would likely
1602  * require to include the computation of dual variables endogenously, and thus a mixed-complementarity formulation of
1603  * the model.
1604  ***
1605   
1606  ***
1607  * Remaining installed capacity
1608  * ----------------------------
1609  * The model has to take into account that the technical lifetime of a technology may not coincide with the cumulative
1610  * period duration. Therefore, the model introduces the parameter :math:`remaining\_capacity_{n,t,y^V,y}`
1611  * as a factor of remaining technical lifetime in the last period of operation divided by the duration of that period.
1612  *
1613  ***
1614   
1615  # set default to 1 (assume that the full capacity is available over the entire period)
1616  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ) = 1 ;
1617   
1618  # if technical lifetime ends in the respective period, set remaining_capacity factor as share of lifetime in that period
1619  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all)
1620          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) < duration_period(year_all) )
1621          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) > 0 ) )
1622      = ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) ) / duration_period(year_all) ;
1623   
1624  * unassign the dynamic set 'year'
1625  year(year_all) = no;
1626   
1627  *----------------------------------------------------------------------------------------------------------------------*
1628  * variable and equation definition, model declaration                                                                  *
1629  *----------------------------------------------------------------------------------------------------------------------*
1630   
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_core.gms
1631  $INCLUDE MESSAGE/model_core.gms
1632  ***
1633  * Mathematical formulation (core model)
1634  * =====================================
1635  * This page is generated from the auto-documentation mark-up in ``MESSAGE/model_core.gms``.
1636  *
1637  * The |MESSAGEix| systems-optimization model minimizes total costs
1638  * while satisfying given demand levels for commodities/services
1639  * and considering a broad range of technical/engineering constraints and societal restrictions
1640  * (e.g. bounds on greenhouse gas emissions, pollutants).
1641  * Demand levels are static (i.e. non-elastic), but the demand response can be integrated by linking |MESSAGEix|
1642  * to the single sector general-economy MACRO model included in this framework.
1643  *
1644  * For the complete list of sets, mappings and parameters,
1645  * refer to the auto-documentation pages :ref:`sets_maps_def` and :ref:`parameter_def`.
1646  ***
1647   
1648  *----------------------------------------------------------------------------------------------------------------------*
1649  * Notation declaration                                                                                                 *
1650  *----------------------------------------------------------------------------------------------------------------------*
1651   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 33
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1652  ***
1653  * Notation declaration
1654  * --------------------
1655  * The following short notation is used in the mathematical description relative to the GAMS code:
1656  *
1657  * Mathematical notation of sets
1658  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1659  * ================================== ===================================================================================
1660  * Math notation                      GAMS set & index notation
1661  * ================================== ===================================================================================
1662  * :math:`n \in N`                    node (across spatial hierarchy levels)
1663  * :math:`y \in Y`                    year (all periods including historical and model horizon)
1664  * :math:`y \in Y^M \subset Y`        time periods included in model horizon
1665  * :math:`y \in Y^H \subset Y`        historical time periods (prior to first model period)
1666  * :math:`c \in C`                    commodity
1667  * :math:`l \in L`                    level
1668  * :math:`g \in G`                    grade
1669  * :math:`t \in T`                    technology (a.k.a tec)
1670  * :math:`h \in H`                    time (subannual time periods)
1671  * :math:`m \in M`                    mode
1672  * :math:`e \in E`                    emission, pollutants
1673  * :math:`s \in S`                    scenarios of land use (for land-use model emulator)
1674  * :math:`u \in U`                    land-use types
1675  * :math:`r \in R`                    set of generic relations (linear constraints)
1676  * :math:`t \in T^{INV} \subseteq T`  all technologies with investment decisions and capacity constraints
1677  * :math:`t \in T^{REN} \subseteq T`  all technologies which draw their input from the renewable level
1678  * :math:`n \in N(\widehat{n})`       all nodes that are subnodes of node :math:`\widehat{n}`
1679  * :math:`y \in Y(\widehat{y})`       all years mapped to the category ``type_year`` :math:`\widehat{y}`
1680  * :math:`t \in T(\widehat{t})`       all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`
1681  * :math:`e \in E(\widehat{e})`       all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`
1682  * ================================== ===================================================================================
1683  *
1684  ***
1685   
1686  *----------------------------------------------------------------------------------------------------------------------*
1687  * Variable definitions                                                                                                 *
1688  *----------------------------------------------------------------------------------------------------------------------*
1689   
1690  ***
1691  * Decision variables
1692  * ^^^^^^^^^^^^^^^^^^
1693  * ============================================= ========================================================================
1694  * Variable                                      Explanatory text
1695  * ============================================= ========================================================================
1696  * :math:`OBJ \in \mathbb{R}`                    Objective value of the optimization program
1697  * :math:`EXT_{n,c,g,y} \in \mathbb{R}_+`        Extraction of non-renewable/exhaustible resources from reserves
1698  * :math:`STOCK_{n,c,l,y} \in \mathbb{R}_+`      Quantity in stock (storage) at start of period :math:`y`
1699  * :math:`STOCK\_CHG_{n,c,l,y,h} \in \mathbb{R}` Input or output quantity into intertemporal commodity stock (storage)
1700  * :math:`REN_{n,t,c,g,y,h}`                     Activity of renewable technologies per grade
1701  * :math:`CAP\_NEW_{n,t,y} \in \mathbb{R}_+`     New installed capacity (yearly average over period duration
1702  * :math:`CAP_{n,t,y^V,y} \in \mathbb{R}_+`      Maintained capacity in year :math:`y` of vintage :math:`y^V`
1703  * :math:`ACT_{n,t,y^V,y,m,h} \in \mathbb{R}`    Activity of a technology (by vintage, mode, subannual time)
1704  * :math:`CAP\_NEW\_UP_{n,t,y} \in \mathbb{R}_+` Relaxation of upper dynamic constraint on new capacity
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 34
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1705  * :math:`CAP\_NEW\_LO_{n,t,y} \in \mathbb{R}_+` Relaxation of lower dynamic constraint on new capacity
1706  * :math:`CAP\_FIRM_{n,t,c,l,y,q}`                   Dispatchable capacity of renewable technologies per grade
1707  * :math:`ACT\_UP_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of upper dynamic constraint on activity [#ACT]_
1708  * :math:`ACT\_LO_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of lower dynamic constraint on activity [#ACT]_
1709  * :math:`LAND_{n,s,y} \in [0,1]`                Relative share of land-use scenario (for land-use model emulator)
1710  * :math:`EMISS_{n,e,\widehat{t},y}`             Auxiliary variable for aggregate emissions by technology type
1711  * :math:`REL_{r,n,y} \in \mathbb{R}`            Auxiliary variable for left-hand side of relations (linear constraints)
1712  * :math:`COMMODITY\_USE_{n,c,l,y}`              Auxiliary variable for amount of commodity used at specific level
1713  * ============================================= ========================================================================
1714  *
1715  * The index :math:`y^V` is the year of construction (vintage) wherever it is necessary to
1716  * clearly distinguish between year of construction and the year of operation.
1717  *
1718  * All decision variables are by year, not by (multi-year) period, except :math:`STOCK_{n,c,l,y}`.
1719  * In particular, the new capacity variable :math:`CAP\_NEW_{n,t,y}` has to be multiplied by the number of years
1720  * in a period :math:`|y| = duration\_period_{y}` to determine the available capacity in subsequent periods.
1721  * This formulation gives more flexibility when it comes to using periods of different duration
1722  * (more intuitive comparison across different periods).
1723  *
1724  * The current model framework allows both input or output normalized formulation.
1725  * This will affect the parametrization, see Section :ref:`efficiency_output` for more details.
1726  *
1727  * .. [#ACT] The dynamic activity constraints are implemented as summed over all modes;
1728  *    therefore, the variables for the relaxation are not indexed over the set ``mode``.
1729  *
1730  ***
1731   
1732  Variables
1733      OBJ objective value of the optimisation problem
1734  ;
1735   
1736  Positive Variables
1737  * commodity in inter-temporal stock
1738      STOCK(node,commodity,level,year_all) total quantity in intertemporal stock (storage)
1739  * commodity in inter-temporal stock
1740      STORAGE(node,commodity,level,year_all,time) total quantity in intertemporal stock (storage) considering intra-year time steps (time)
1741  * investment and capacity variables
1742      CAP_NEW(node,tec,year_all)       new capacity by year
1743      CAP(node,tec,vintage,year_all)   total installed capacity by year
1744      CAP_FIRM(node,tec,commodity,level,year_all,rating)   renewable firm capacity
1745  * variables for soft relaxation of dynamic activity constraints
1746      CAP_NEW_UP(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (upwards)
1747      CAP_NEW_LO(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (downwards)
1748      ACT_UP(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (upwards)
1749      ACT_LO(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (downwards)
1750   
1751  Variables
1752  * intertemporal stock variables (input or output quantity into the stock)
1753      STOCK_CHG(node,commodity,level,year_all,time) annual input into and output from stocks of commodities
1754  * intertemporal stock variables (input or output quantity into the stock)
1755      STORAGE_CHG(node,commodity,level,year_all,time) input into and output from stocks of commodities in time frame year-time
1756  * technology activity variables (can be negative for some technologies, upper and lower bounds stated explicitly)
1757      ACT(node,tec,vintage,year_all,mode,time)     activity of technology by mode-year-timeperiod
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 35
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1758  * auxiliary variables for finrm-capacity formulation
1759      COMMODITY_USE(node,commodity,level,year_all) total amount of a commodity & level that was used or consumed
1760  * nodal system costs over time
1761      COST_NODAL(node, year_all)                   system costs at the node level over time
1762  * auxiliary variable for aggregate emissions by technology type and land-use model emulator
1763      EMISS(node,emission,type_tec,year_all)       aggregate emissions by technology type and land-use model emulator
1764  ;
1765   
1766  ***
1767  * Auxiliary variables
1768  * ^^^^^^^^^^^^^^^^^^^
1769  * ============================================= ========================================================================
1770  * Variable                                      Explanatory text
1771  * ============================================= ========================================================================
1772  * :math:`DEMAND_{n,c,l,y,h} \in \mathbb{R}`     Demand level (in equilibrium with MACRO integration)
1773  * :math:`PRICE\_COMMODITY_{n,c,l,y,h}`          Commodity price (undiscounted marginals of COMMODITY_BALANCE constraint)
1774  * :math:`PRICE\_EMISSION_{n,e,\widehat{t},y}`   Emission price (undiscounted marginals of EMISSION_BOUND constraint)
1775  * :math:`COST\_NODAL\_NET_{n,y} \in \mathbb{R}` System costs at the node level net of energy trade revenues/cost
1776  * :math:`GDP_{n,y} \in \mathbb{R}`              gross domestic product (GDP) in market exchange rates for MACRO reporting
1777  * ============================================= ========================================================================
1778  *
1779  ***
1780   
1781  Variables
1782  * auxiliary variables for demand, prices, costs and GDP (for reporting when MESSAGE is run with MACRO)
1783      DEMAND(node,commodity,level,year_all,time) demand
1784      PRICE_COMMODITY(node,commodity,level,year_all,time)  commodity price (derived from marginals of COMMODITY_BALANCE constraint)
1785      PRICE_EMISSION(node,type_emission,type_tec,year_all) emission price (derived from marginals of EMISSION_BOUND constraint)
1786      COST_NODAL_NET(node,year_all)              system costs at the node level over time including effects of energy trade
1787      GDP(node,year_all)                         gross domestic product (GDP) in market exchange rates for MACRO reporting
1788  ;
1789   
1790   
1791  *----------------------------------------------------------------------------------------------------------------------*
1792  * auxiliary bounds on activity variables (debugging mode, avoid inter-vintage arbitrage, investment technology)                                                        *
1793  *----------------------------------------------------------------------------------------------------------------------*
1794   
1795  * include upper and lower bounds (to avoid unbounded models)
1796  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1797  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = -1e9 ;
1798  * ACT.up(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1799  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = 1e9 ;
1800   
1801  * to avoid "inter-vintage arbitrage" (across different vintages of technologies), all activities that
1802  * have positive upper bounds are assumed to be non-negative
1803  ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1804      AND map_tec_act(node,tec,year_all2,mode,time) AND bound_activity_lo(node,tec,year_all2,mode,time) >= 0 ) = 0 ;
1805  * previous implementation using upper bounds
1806  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
1807  *    AND map_tec_act(node,tec,year_all2,mode,time)
1808  *    AND ( NOT bound_activity_up(node,tec,year_all2,mode,time)
1809  *        OR bound_activity_up(node,tec,year_all2,mode,time) >= 0 ) ) = 0 ;
1810   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 36
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1811  * assume that all "investment" technologies must have non-negative activity levels
1812  ACT.lo(node,inv_tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,inv_tec,year_all,year_all2)
1813      AND map_tec_act(node,inv_tec,year_all2,mode,time) ) = 0 ;
1814   
1815  *----------------------------------------------------------------------------------------------------------------------*
1816  * fixing variables to pre-specified values                                                                             *
1817  *----------------------------------------------------------------------------------------------------------------------*
1818   
1819  STOCK.fx(node,commodity,level,year_all)$( is_fixed_stock(node,commodity,level,year_all) ) =
1820      fixed_stock(node,commodity,level,year_all) ;
1821  CAP_NEW.fx(node,tec,year_all)$( is_fixed_new_capacity(node,tec,year_all) ) =
1822      fixed_new_capacity(node,tec,year_all) ;
1823  CAP.fx(node,tec,vintage,year_all)$( is_fixed_capacity(node,tec,vintage,year_all) ) =
1824      fixed_capacity(node,tec,vintage,year_all) ;
1825  ACT.fx(node,tec,vintage,year_all,mode,time)$( is_fixed_activity(node,tec,vintage,year_all,mode,time) ) =
1826      fixed_activity(node,tec,vintage,year_all,mode,time) ;
1827   
1828  *----------------------------------------------------------------------------------------------------------------------*
1829  * auxiliary variables for debugging mode (identifying infeasibilities)                                                 *
1830  *----------------------------------------------------------------------------------------------------------------------*
1831   
1832  * slack variables for debugging
1833  Positive variables
1834      SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year_all,time) slack variable for commodity balance (upwards)
1835      SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year_all,time) slack variable for commodity balance (downwards)
1836      SLACK_CAP_NEW_BOUND_UP (node,tec,year_all)        slack variable for bound on new capacity (upwards)
1837      SLACK_CAP_NEW_BOUND_LO (node,tec,year_all)        slack variable for bound on new capacity (downwards)
1838      SLACK_CAP_TOTAL_BOUND_UP (node,tec,year_all)      slack variable for upper bound on total installed capacity
1839      SLACK_CAP_TOTAL_BOUND_LO (node,tec,year_all)      slack variable for lower bound on total installed capacity
1840      SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year_all)       slack variable for dynamic new capacity constraint (upwards)
1841      SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year_all)       slack variable for dynamic new capacity constraint (downwards)
1842      SLACK_ACT_BOUND_UP(node,tec,year_all,mode,time)   slack variable for upper bound on activity
1843      SLACK_ACT_BOUND_LO(node,tec,year_all,mode,time)   slack variable for lower bound on activity
1844      SLACK_ACT_DYNAMIC_UP(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (upwards)
1845      SLACK_ACT_DYNAMIC_LO(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (downwards)
1846  ;
1847   
1848  *----------------------------------------------------------------------------------------------------------------------*
1849  * equation definitions                                                                                                 *
1850  *----------------------------------------------------------------------------------------------------------------------*
1851   
1852  Equations
1853      OBJECTIVE                       objective value of the optimisation problem
1854      COST_ACCOUNTING_NODAL           cost accounting at node level over time
1855      COMMODITY_BALANCE_GT            commodity supply greater than or equal demand
1856      COMMODITY_BALANCE_LT            commodity supply lower than or equal demand
1857      STOCKS_BALANCE                  commodity inter-temporal balance of stocks
1858      STORAGE_BALANCE                 commodity inter-temporal balance of storage
1859      STORAGE_BOUND_UP                upper bound on storage level
1860      STORAGE_BOUND_LO                lower bound on storage level
1861      CAPACITY_CONSTRAINT             capacity constraint for technology (by sub-annual time slice)
1862      CAPACITY_MAINTENANCE            constraint for technology capacity maintainance
1863      OPERATION_CONSTRAINT            constraint on maximum yearly operation (scheduled down-time for maintainance)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 37
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1864      MIN_UTILIZATION_CONSTRAINT      constraint for minimum yearly operation (aggregated over the course of a year)
1865      COMMODITY_USE_LEVEL             defines the COMMODITY_USE as the amount of a commodity at a level that was consumed
1866      FIRM_CAPACITY_CONSTRAINT        constraint to maintaint sufficient firm (dispatchable) power generation capacity
1867      FIRM_CAPACITY_PROVISION         lower bound on CAP as the minimum installed capacity of each technology
1868      FIRM_CAPACITY_SHARE             upper bound of CAP_FIRM per rating to the size of the penetration bin of this rating
1869      NEW_CAPACITY_BOUND_UP           upper bound on technology capacity investment
1870      NEW_CAPACITY_BOUND_LO           lower bound on technology capacity investment
1871      TOTAL_CAPACITY_BOUND_UP         upper bound on total installed capacity
1872      TOTAL_CAPACITY_BOUND_LO         lower bound on total installed capacity
1873      NEW_CAPACITY_CONSTRAINT_UP      dynamic constraint for capacity investment (learning and spillovers upper bound)
1874      NEW_CAPACITY_CONSTRAINT_LO      dynamic constraint on capacity investment (lower bound)
1875      ACTIVITY_BOUND_UP               upper bound on activity summed over all vintages
1876      ACTIVITY_BOUND_LO               lower bound on activity summed over all vintages
1877      SHARE_CONSTRAINT_COMMODITY_UP   upper bounds on share constraints for commodities
1878      SHARE_CONSTRAINT_COMMODITY_LO   lower bounds on share constraints for commodities
1879  *    SHARE_CONSTRAINT_MODE_UP        upper bounds on share constraints for modes of a given technology
1880  *    SHARE_CONSTRAINT_MODE_LO        lower bounds on share constraints for modes of a given technology
1881      ACTIVITY_CONSTRAINT_UP          dynamic constraint on the market penetration of a technology activity (upper bound)
1882      ACTIVITY_CONSTRAINT_LO          dynamic constraint on the market penetration of a technology activity (lower bound)
1883      EMISSION_EQUIVALENCE            auxiliary equation to simplify the notation of emissions
1884      EMISSION_CONSTRAINT             nodal-regional-global constraints on emissions (by category)
1885      CONST_LAND_ACT                  area of crops is kept constant during growing periods
1886      CONST_LAND_ACT_0
1887  ;
1888   
1889  *----------------------------------------------------------------------------------------------------------------------*
1890  * equation statements                                                                                                  *
1891  *----------------------------------------------------------------------------------------------------------------------*
1892   
1893  ***
1894  * Objective function
1895  * ------------------
1896  *
1897  * The objective function of the |MESSAGEix| core model
1898  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1899  *
1900  * Equation OBJECTIVE
1901  * """"""""""""""""""
1902  *
1903  * The objective function (of the core model) minimizes total discounted systems costs including costs for emissions,
1904  * relaxations of dynamic constraints
1905  *
1906  * .. math::
1907  *    OBJ = \sum_{n,y \in Y^{M}} discountfactor_{y} \cdot COST\_NODAL_{n,y}
1908  *
1909  ***
1910   
1911  OBJECTIVE..
1912      OBJ =E= SUM((node,year), discountfactor(year) * COST_NODAL(node, year))
1913  ;
1914   
1915  ***
1916  * Regional system cost accounting function
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 38
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1917  * ----------------------------------------
1918  *
1919  * Accounting of regional system costs over time
1920  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1921  *
1922  * Equation COST_ACCOUNTING_NODAL
1923  * """"""""""""""""""""""""""""""
1924  *
1925  * Accounting of regional systems costs over time as well as costs for emissions (taxes),
1926  * land use (from the model land-use model emulator), relaxations of dynamic constraints,
1927  * and linear relations.
1928  *
1929  * .. math::
1930  *    COST\_NODAL_{n,y} & = \sum_{c,g} \ resource\_cost_{n,c,g,y} \cdot EXT_{n,c,g,y} \\
1931  *      & + \sum_{t} \
1932  *          \bigg( inv\_cost_{n,t,y} \cdot construction\_time\_factor_{n,t,y} \\
1933  *      & \quad \quad \quad \cdot end\_of\_horizon\_factor_{n,t,y} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
1934  *      & \quad \quad + \sum_{y^V \leq y} \ fix\_cost_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y} \\
1935  *      & \quad \quad + \sum_{\substack{y^V \leq y \\ m,h}} \ var\_cost_{n,t,y^V,y,m,h} \cdot ACT_{n,t,y^V,y,m,h} \\
1936  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_up_{n,t,y} \\
1937  *      & \quad \quad \quad
1938  *          + level\_cost\_new\_capacity\_soft\_up_{n,t,y} \cdot\ inv\_cost_{n,t,y}
1939  *          \Big) \cdot CAP\_NEW\_UP_{n,t,y} \\[4pt]
1940  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_lo_{n,t,y} \\
1941  *      & \quad \quad \quad
1942  *          + level\_cost\_new\_capacity\_soft\_lo_{n,t,y} \cdot\ inv\_cost_{n,t,y}
1943  *          \Big) \cdot CAP\_NEW\_LO_{n,t,y} \\[4pt]
1944  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_up_{n,t,y,m,h} \\
1945  *      & \quad \quad \quad
1946  *          + level\_cost\_activity\_soft\_up_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
1947  *          \Big) \cdot ACT\_UP_{n,t,y,h} \\
1948  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_lo_{n,t,y,m,h} \\
1949  *      & \quad \quad \quad
1950  *          + level\_cost\_activity\_soft\_lo_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
1951  *          \Big) \cdot ACT\_LO_{n,t,y,h} \bigg) \\
1952  *      & + \sum_{\substack{\widehat{e},\widehat{t} \\ e \in E(\widehat{e})}}
1953  *            emission\_scaling_{\widehat{e},e} \cdot \ emission\_tax_{n,\widehat{e},\widehat{t},y}
1954  *            \cdot EMISS_{n,e,\widehat{t},y} \\
1955  *      & + \sum_{r} relation\_cost_{r,n,y} \cdot REL_{r,n,y}
1956  ***
1957   
1958  COST_ACCOUNTING_NODAL(node, year)..
1959      COST_NODAL(node, year) =E=
1960  * technology capacity investment, maintainance, operational cost
1961      + SUM((tec)$( map_tec(node,tec,year) ),
1962              ( inv_cost(node,tec,year) * construction_time_factor(node,tec,year)
1963                  * end_of_horizon_factor(node,tec,year) * CAP_NEW(node,tec,year)
1964              + SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ),
1965                  fix_cost(node,tec,vintage,year) * CAP(node,tec,vintage,year) ) )$( inv_tec(tec) )
1966              + SUM((vintage,mode,time)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
1967                  var_cost(node,tec,vintage,year,mode,time) * ACT(node,tec,vintage,year,mode,time) )
1968              )
1969  * emission taxes (by parent node, type of technology, type of year and type of emission)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 39
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1970      + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
1971              AND cat_year(type_year,year) ),
1972          emission_scaling(type_emission,emission)
1973          * tax_emission(node,type_emission,type_tec,type_year)
1974          * EMISS(node,emission,type_tec,year) )
1975  * implementation of slack variables for constraints to aid in debugging
1976      + SUM((commodity,level,time)$( map_commodity(node,commodity,level,year,time) ), ( 0
1977  *   + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
1978  *   + SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
1979          ) * 1e6 )
1980      + SUM((tec)$( map_tec(node,tec,year) ), ( 0
1981  *    + 10 * SLACK_CAP_NEW_BOUND_UP(node,tec,year)
1982  *    + 10 * SLACK_CAP_NEW_BOUND_LO(node,tec,year)
1983  *  + 10 * SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year)
1984  *  + 10 * SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year)
1985  *  + 10 * SLACK_CAP_TOTAL_BOUND_UP(node,tec,year)
1986  *  + 10 * SLACK_CAP_TOTAL_BOUND_LO(node,tec,year)
1987          ) * ABS( 1000 + inv_cost(node,tec,year) ) )
1988      + SUM((tec,time)$( map_tec_time(node,tec,year,time) ), ( 0
1989  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_UP(node,tec,year,mode,time) )
1990  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_LO(node,tec,year,mode,time) )
1991  * + 10 * SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
1992  * + 10 * SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
1993          ) * ( 1e8
1994              + ABS( SUM(mode$map_tec_act(node,tec,year,mode,time), var_cost(node,tec,year,year,mode,time) ) )
1995              + fix_cost(node,tec,year,year) ) )
1996  ;
1997   
1998  ***
1999  * Here, :math:`n^L \in N(n)` are all nodes :math:`n^L` that are sub-nodes of node :math:`n`.
2000  * The subset of technologies :math:`t \in T(\widehat{t})` are all tecs that belong to category :math:`\widehat{t}`,
2001  * and similar notation is used for emissions :math:`e \in E`.
2002  ***
2003   
2004  *----------------------------------------------------------------------------------------------------------------------*
2005  ***
2006  * Resource and commodity section
2007  * ------------------------------
2008  *
2009  ***
2010  * Constraints on commodities and stocks
2011  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2012  *
2013  * Equation COMMODITY_BALANCE
2014  * """"""""""""""""""""""""""
2015  * Auxiliary COMMODITY_BALANCE
2016  * """""""""""""""""""""""""""
2017  * For the commodity balance constraints below, we introduce an auxiliary `COMMODITY_BALANCE`. This is implemented
2018  * as a GAMS `$macro` function.
2019  *
2020  *  .. math::
2021  *     \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} output_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2022  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,y^V,y,m,h^A} \\
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 40
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2023  *     - \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} input_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2024  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,m,y,h^A} \\
2025  *     + \ STOCK\_CHG_{n,c,l,y,h} & \\[4pt]
2026  *     + \ \sum_s \Big( land\_output_{n,s,y,c,l,h} - land\_input_{n,s,y,c,l,h} \Big) \cdot & LAND_{n,s,y} \\[4pt]
2027  *     - \ demand\_fixed_{n,c,l,y,h}
2028  *     & = COMMODITY\_BALANCE{n,c,l,y,h} \quad \forall \ l \notin (L^{RES}, l^{REN} \subseteq L
2029  *
2030  * The commodity balance constraint at the resource level is included in the `Equation RESOURCE_CONSTRAINT`_,
2031  * while at the renewable level, it is included in the `Equation RENEWABLES_EQUIVALENCE`_.
2032  ***
2033  $macro COMMODITY_BALANCE(node,commodity,level,year,time) (                                                             \
2034      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 \
2035              AND map_tec_lifetime(location,tec,vintage,year) ),                                                         \
2036  * import into node and output by all technologies located at 'location' sending to 'node' and 'time2' sending to 'time'
2037          output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         \
2038          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                                    \
2039  * export from node and input into technologies located at 'location' taking from 'node' and 'time2' taking from 'time'
2040          - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        \
2041          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  \
2042  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (storage)
2043      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              \
2044      - STORAGE_CHG(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )    \
2045  * final demand (exogenous parameter to be satisfied by the commodity system)
2046      - demand_fixed(node,commodity,level,year,time)                                                                     \
2047      )$( map_commodity(node,commodity,level,year,time) )
2048   
2049   
2050  * Equation COMMODITY_BALANCE_GT
2051  * """""""""""""""""""""""""""""
2052  * This constraint ensures that supply is greater or equal than demand for every commodity-level combination.
2053  *
2054  *  .. math::
2055  *     COMMODITY\_BALANCE{n,c,l,y,h} \geq 0
2056  *
2057  ***
2058  COMMODITY_BALANCE_GT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time) )..
2059      (SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)AND map_tec_lifetime(location,tec,vintage,year) ),output(location,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_rel(time,time2) * ACT(loca
      tion,tec,vintage,year,mode,time2)- input(location,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )+ STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commod
      ity,level,year) )- STORAGE_CHG(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )- demand_fixed(node,commodity,level,year,time))$( map_commodity(node,commodity,level,y
      ear,time) )
2060  * relaxation of constraints for debugging
2061  * + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2062       =G= 0 ;
2063   
2064  * Equation COMMODITY_BALANCE_LT
2065  * """""""""""""""""""""""""""""
2066  * This constraint ensures the supply is smaller than or equal to the demand for all commodity-level combinatio
2067  * given in the :math:`balance\_equality_{c,l}`. In combination withe constraint above, it ensures that supply
2068  * is (exactly) equal to demand.
2069  *
2070  *  .. math::
2071  *     COMMODITY\_BALANCE{n,c,l,y,h} \leq 0
2072  *
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 41
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2073  ***
2074  COMMODITY_BALANCE_LT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2075          AND balance_equality(commodity,level) )..
2076      (SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)AND map_tec_lifetime(location,tec,vintage,year) ),output(location,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_rel(time,time2) * ACT(loca
      tion,tec,vintage,year,mode,time2)- input(location,tec,vintage,year,mode,node,commodity,level,time2,time)* duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )+ STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commod
      ity,level,year) )- STORAGE_CHG(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )- demand_fixed(node,commodity,level,year,time))$( map_commodity(node,commodity,level,y
      ear,time) )
2077  * relaxation of constraints for debugging
2078  * - SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2079      =L= 0 ;
2080   
2081  ***
2082  * Equation STOCKS_BALANCE
2083  * """""""""""""""""""""""
2084  * This constraint ensures the inter-temporal balance of commodity stocks.
2085  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2086  *
2087  *  .. math::
2088  *     STOCK_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2089  *         duration\_period_{y} \cdot & \sum_{h} STOCK\_CHG_{n,c,l,y,h} \\
2090  *                                    & + STOCK_{n,c,l,y+1}
2091  *
2092  ***
2093  STOCKS_BALANCE(node,commodity,level,year)$( map_stocks(node,commodity,level,year) )..
2094      STOCK(node,commodity,level,year)$( NOT first_period(year) )
2095      + commodity_stock(node,commodity,level,year) =E=
2096      duration_period(year) * SUM(time$( map_commodity(node,commodity,level,year,time) ),
2097           STOCK_CHG(node,commodity,level,year,time) )
2098      + SUM(year2$( seq_period(year,year2) ), STOCK(node,commodity,level,year2) ) ;
2099   
2100  ***
2101  * Equation STORAGE_BALANCE
2102  * """""""""""""""""""""""
2103  * This constraint ensures the inter-temporal balance of commodity stocks.
2104  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2105  *
2106  *  .. math::
2107  *     STORAGE_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2108  *         duration\_period_{y} \cdot & \sum_{h} STORAGE\_CHG_{n,c,l,y,h} \\
2109  *                                    & + STORAGE_{n,c,l,y+1}
2110  *
2111  ***
2112   
2113  Parameter
2114      storage_to_activity(time)
2115                           /  1   31,
2116                              2   28
2117                              3   31
2118                              4   30
2119                              5   31
2120                              6   30
2121                              7   31
2122                              8   31
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 42
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2123                              9   30
2124                              10  31
2125                              11  30
2126                              12  31 /;
2127   
2128  set first_time_stg(year_all,time) /2020.1/;
2129  parameter commodity_storage(node,commodity,level,year_all,time);
2130   
2131  commodity_storage(node,commodity,level,'2020','1') = ( bound_storage_up(node,commodity,level,'2020','1') + bound_storage_lo(node,commodity,level,'2020','1') )/2;
2132   
2133  STORAGE_BALANCE(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2134      STORAGE(node,commodity,level,year,time)
2135  * decide whether want to use commodity stock or make a new parameter
2136      - commodity_storage(node,commodity,level,year,time) =E=
2137  *    SUM(time2$( map_commodity(node,commodity,level,year,time2) ),
2138         ( storage_to_activity(time)*STORAGE_CHG(node,commodity,level,year,time) )
2139      + SUM((time2,year2)$seq_year_time(year2,year,time2,time), STORAGE(node,commodity,level,year2,time2) * (1 - storage_loss(node,commodity,level,year2,time2)) ) ;
2140   
2141  STORAGE_BOUND_UP(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2142      STORAGE(node,commodity,level,year,time) =L= bound_storage_up(node,commodity,level,year,time) ;
2143  * might be possible to add here the CAP of a storage_expansio technology, that increases the maximum storage limit
2144   
2145  STORAGE_BOUND_LO(node,commodity,level,year,time)$( map_storage(node,commodity,level,year,time) AND bound_storage_up(node,commodity,level,year,time) )..
2146  *    STORAGE(node,commodity,level,year,time) =G= 0 ;
2147      STORAGE(node,commodity,level,year,time) =G= bound_storage_lo(node,commodity,level,year,time) ;
2148   
2149  *----------------------------------------------------------------------------------------------------------------------*
2150  ***
2151  * Technology section
2152  * ------------------
2153  *
2154  * Technical and engineering constraints
2155  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2156  *
2157  * Equation CAPACITY_CONSTRAINT
2158  * """"""""""""""""""""""""""""
2159  * This constraint ensures that the actual activity of a technology at a node/time cannot exceed available (maintained)
2160  * capacity summed over all vintages, including the technology capacity factor :math:`capacity\_factor_{n,t,y,t}`.
2161  *
2162  *  .. math::
2163  *     \sum_{m} ACT_{n,t,y^V,y,m,h}
2164  *         \leq duration\_time_{h} \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^V,y}
2165  *         \quad t \ \in \ T^{INV}
2166  *
2167  * where :math:`T^{INV} \subseteq T` is the set of all technologies
2168  * for which investment decisions and capacity constraints are relevant.
2169  ***
2170  CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,inv_tec,year,time)
2171          AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2172      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) )
2173          =L= duration_time(time) * capacity_factor(node,inv_tec,vintage,year,time) * CAP(node,inv_tec,vintage,year) ;
2174   
2175  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 43
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2176  * Equation CAPACITY_MAINTENANCE
2177  * """"""""""""""""""""""""""""""
2178  * This constraint deals with fixed costs for operation and maintainance (O&M) of technology capacity_maintainance.
2179  * Capacity must be maintained over time until decommissioning (no mothballing), and fixed O\&M costs must be paid
2180  * immediately after commissioning.
2181  *
2182  *  .. math::
2183  *     CAP_{n,t,y^V,y} \leq
2184  *     remaining\_capacity_{n,t,y^V,y} \cdot
2185  *     \left\{ \begin{array}{ll}
2186  *         duration\_period_{y^V} \cdot historical\_new\_capacity_{n,t,y^V} \quad & \text{if } y \ \text{is first model period} \\
2187  *         duration\_period_{y^V} \cdot CAP\_NEW_{n,t,y^V} \quad & \text{if } y = y^V \\
2188  *         CAP_{n,t,y^V,y-1} & \text{if } y > y^V \text{ and }
2189  *                                  |y| - |y^V| < technical\_lifetime_{n,t,y^V} \end{array} \right\}
2190  *         \quad \forall \ t \in T^{INV}
2191  *
2192  * The current formulation does not account for construction time in the constraints, but only adds a mark-up
2193  * to the investment costs in the objective function.
2194  ***
2195  CAPACITY_MAINTENANCE(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year) )..
2196      CAP(node,inv_tec,vintage,year) =L=
2197  * discount the capacity in case the technical lifetime ends within a period
2198      remaining_capacity(node,inv_tec,vintage,year) * (
2199  * historical installation (built before start of model horizon)
2200          ( duration_period(vintage) * historical_new_capacity(node,inv_tec,vintage)
2201              )$( historical(vintage) AND first_period(year) )
2202  * new capacity built in the current period (vintage == year)
2203          + ( duration_period(vintage) * CAP_NEW(node,inv_tec,vintage)
2204              )$( year_order(year) EQ year_order(vintage) AND NOT historical(vintage) )
2205  * total installed capacity at the end of the previous period
2206          + SUM(year2$( seq_period(year2,year) AND map_tec_lifetime(node,inv_tec,vintage,year2) ),
2207              CAP(node,inv_tec,vintage,year2) )
2208      ) ;
2209   
2210  ***
2211  * Equation OPERATION_CONSTRAINT
2212  * """""""""""""""""""""""""""""
2213  * This constraint provides an upper bound on the total operation of installed capacity over a year.
2214  *
2215  *   .. math::
2216  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h}
2217  *          \leq operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,m,\text{'year'}} \cdot CAP_{n,t,y^V,y}
2218  *
2219  * This constraint is only active if :math:`operation\_factor_{n,t,y^V,y} < 1`.
2220  ***
2221  OPERATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2222          AND operation_factor(node,inv_tec,vintage,year) < 1 )..
2223      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =L=
2224          operation_factor(node,inv_tec,vintage,year) * capacity_factor(node,inv_tec,vintage,year,'year')
2225          * CAP(node,inv_tec,vintage,year) ;
2226   
2227  ***
2228  * Equation MIN_UTILIZATION_CONSTRAINT
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 44
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2229  * """""""""""""""""""""""""""""""""""
2230  * This constraint provides a lower bound on the total utilization of installed capacity over a year.
2231  *
2232  *   .. math::
2233  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y}
2234  *
2235  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y^V,y}` is defined.
2236  ***
2237   
2238  MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2239          AND min_utilization_factor(node,inv_tec,vintage,year) )..
2240      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =G=
2241          min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_tec,vintage,year) ;
2242   
2243  ***
2244  * Constraints representing the firm capacity requirement
2245  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2246  * The following constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
2247  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
2248  *
2249  * The firm capacity a technology provides depends on their reliability factor per rating.
2250  * The rating are defined depending on the share the single technology provides to the
2251  * system. The reliablitiy factor of conventional powerplants is equal to 1. Therefore
2252  * they provide their nameplate capacity as firm capacity.
2253  * The reliability factor of wind and solar dependens on the share they have in the
2254  * energy system. Therefore their reliability factor depend on the rating.
2255  *
2256  * Equation COMMODITY_USE_LEVEL
2257  * """"""""""""""""""""""""""""
2258  * This constraint defines the COMMODITY_USE_LEVEL as summed consumption of a
2259  * commodity at a certain level during one year.
2260  *
2261  *   .. math::
2262  *      COMMODITY\_USE_{n,c,l,y} = \sum_{n,t,y^V,m,h} input_{n,t,y^V,y,m,n,c,l,h,h} \cdot \\
2263  *                duration\_time\_rel_{h,h} \cdot ACT_{n,t,y^V,y,m,h}
2264  *
2265  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
2266  * The auxiliary variable :math:`COMMODITY\_USE_{n,c,l,y}` is only required
2267  * for the equations :math:`FIRM\_CAPACITY\_CONSTRAINT` and :math:`FIRM\_CAPACITY\_SHARE`.
2268  ***
2269   
2270  COMMODITY_USE_LEVEL(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
2271      COMMODITY_USE(node,commodity,level,year)
2272      =E= SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
2273                                                      AND map_tec_lifetime(location,tec,vintage,year) ),
2274                  input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2275                  * duration_time_rel(time,time2)
2276                  * ACT(location,tec,vintage,year,mode,time2) )
2277  ;
2278   
2279  ***
2280  * Equation FIRM_CAPACITY_CONSTRAINT
2281  * """""""""""""""""""""""""""""""""
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 45
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2282  * This constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
2283  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
2284  *
2285  *   .. math::
2286  *      \sum_{t, q \substack{t \in T^{INV} \\ y^V \leq y} } reliability\_factor_{n,t,y,c,l,h,q} \cdot
2287  *                CAP\_FIRM_{n,t,c,l,y,q} \geq \\
2288  *         peak\_load\_factor_{n,c,l,y,h} \cdot COMMODITY\_USE_{n,c,l,y}
2289  *
2290  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
2291  ***
2292  FIRM_CAPACITY_CONSTRAINT(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
2293      SUM((inv_tec,rating), CAP_FIRM(node,inv_tec,commodity,level,year,rating)
2294                          * reliability_factor(node,inv_tec,year,commodity,level,time,rating) )
2295      =G= peak_load_factor(node,commodity,level,year,time) * COMMODITY_USE(node,commodity,level,year)
2296  ;
2297   
2298  ***
2299  * Equation FIRM_CAPACITY_SHARE
2300  * """"""""""""""""""""""""""""
2301  * Limits the firm capacity per rating to the size of the penetration bin of this rating.
2302  *
2303  *   .. math::
2304  *      CAP\_FIRM_{n,t,c,l,y,q} \leq rating\_bin_{n,t,y,c,l,h,q} \cdot COMMODITY\_USE_{n,c,l,y}
2305  *
2306  * This constraint is only active if :math:`reliability\_bin_{n,t,y,c,l,t,q}` is defined.
2307  ***
2308  FIRM_CAPACITY_SHARE(node,inv_tec,commodity,level,year,rating,time)$(
2309          rating_bin(node,inv_tec,year,commodity,level,time,rating) ) ..
2310      CAP_FIRM(node,inv_tec,commodity,level,year,rating)
2311      =L= rating_bin(node,inv_tec,year,commodity,level,time,rating) * COMMODITY_USE(node,commodity,level,year)
2312  ;
2313   
2314  ***
2315  * .. _reliability_constraint:
2316  *
2317  * Equation FIRM_CAPACITY_PROVISION
2318  * """"""""""""""""""""""""""""""""
2319  * Limits the firm capacity of the renewables technologies to the total installed capacity of each technology.
2320  *
2321  *   .. math::
2322  *      \sum_{r,h} CAP\_FIRM_{n,t,c,l,y,q} \leq \sum_{y^V \leq y} CAP_{n,t,y^Y,y} \quad \forall t \in T^{INV}
2323  *
2324  * This constraint is only active if :math:`reliability\_factor_{n,t,y,c,l,h,q}` is defined.
2325  ***
2326  FIRM_CAPACITY_PROVISION(node,inv_tec,year,commodity,level)$(
2327          SUM(rating, map_rating(node,inv_tec,commodity,level,rating,year) ) )..
2328      SUM( (rating,time)$( map_rating(node,inv_tec,commodity,level,rating,year) AND
2329                     reliability_factor(node,inv_tec,year,commodity,level,time,rating) ) ,
2330           CAP_FIRM(node,inv_tec,commodity,level,year,rating) )
2331      =L= SUM(vintage$( map_tec_lifetime(node,inv_tec,vintage,year) ), CAP(node,inv_tec,vintage,year) )
2332  ;
2333   
2334  ***
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 46
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2335  * .. _flexibility_constraint:
2336  *
2337  * Equation OPERATING_RESERVE_CONSTRAINT
2338  * """""""""""""""""""""""""""""""""""""
2339  * This constraint ensures that, in each sub-annual time slice, there is a sufficient share of flexible technologies in
2340  * the power generation mix. This heading is a placeholder for a new formulation using the extended index set structure.
2341  ***
2342   
2343   
2344  ***
2345  * Bounds on capacity and activity
2346  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2347  *
2348  * Equation NEW_CAPACITY_BOUND_UP
2349  * """"""""""""""""""""""""""""""
2350  * This constraint provides upper bounds on new capacity installation.
2351  *
2352  *   .. math::
2353  *      CAP\_NEW_{n,t,y} \leq bound\_new\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2354  *
2355  ***
2356  NEW_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_new_capacity_up(node,inv_tec,year) )..
2357      CAP_NEW(node,inv_tec,year) =L= bound_new_capacity_up(node,inv_tec,year)
2358  * + SLACK_CAP_NEW_BOUND_UP(node,inv_tec,year)
2359  ;
2360   
2361  ***
2362  * Equation NEW_CAPACITY_BOUND_LO
2363  * """"""""""""""""""""""""""""""
2364  * This constraint provides lower bounds on new capacity installation.
2365  *
2366  *   .. math::
2367  *      CAP\_NEW_{n,t,y} \geq bound\_new\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2368  *
2369  ***
2370  NEW_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_new_capacity_lo(node,inv_tec,year) )..
2371      CAP_NEW(node,inv_tec,year) =G= bound_new_capacity_lo(node,inv_tec,year)
2372  * - SLACK_CAP_NEW_BOUND_LO(node,inv_tec,year)
2373  ;
2374   
2375  ***
2376  * Equation TOTAL_CAPACITY_BOUND_UP
2377  * """"""""""""""""""""""""""""""""
2378  * This constraint gives upper bounds on the total installed capacity of a technology in a specific year of operation
2379  * summed over all vintages.
2380  *
2381  *   .. math::
2382  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \leq bound\_total\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2383  *
2384  ***
2385  TOTAL_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_total_capacity_up(node,inv_tec,year) )..
2386      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
2387          CAP(node,inv_tec,vintage,year) )
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 47
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2388      =L= bound_total_capacity_up(node,inv_tec,year)
2389  * + SLACK_CAP_TOTAL_BOUND_UP(node,inv_tec,year)
2390  ;
2391   
2392  ***
2393  * Equation TOTAL_CAPACITY_BOUND_LO
2394  * """"""""""""""""""""""""""""""""
2395  * This constraint gives lower bounds on the total installed capacity of a technology.
2396  *
2397  *   .. math::
2398  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \geq bound\_total\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
2399  *
2400  ***
2401  TOTAL_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_total_capacity_lo(node,inv_tec,year) )..
2402      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
2403          CAP(node,inv_tec,vintage,year) )
2404       =G= bound_total_capacity_lo(node,inv_tec,year)
2405  * - SLACK_CAP_TOTAL_BOUND_LO(node,inv_tec,year)
2406  ;
2407   
2408  ***
2409  * Equation ACTIVITY_BOUND_UP
2410  * """"""""""""""""""""""""""
2411  * This constraint provides lower bounds of a technology activity by mode, summed over all vintages.
2412  *
2413  *   .. math::
2414  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,m,y,h}
2415  *
2416  ***
2417  ACTIVITY_BOUND_UP(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time)
2418          AND is_bound_activity_up(node,tec,year,mode,time) )..
2419      SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), ACT(node,tec,vintage,year,mode,time) ) =L=
2420      bound_activity_up(node,tec,year,mode,time)
2421  * + SLACK_ACT_BOUND_UP(node,tec,year,mode,time)
2422  ;
2423   
2424  ***
2425  * Equation ACTIVITY_BOUND_LO
2426  * """"""""""""""""""""""""""
2427  * This constraint provides lower bounds of a technology activity by mode summed over all vintages.
2428  *
2429  *   .. math::
2430  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,m,h}
2431  *
2432  * We assume that :math:`bound\_activity\_lo_{n,t,y,m,h} = 0`
2433  * unless explicitly stated otherwise.
2434  ***
2435  ACTIVITY_BOUND_LO(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time) )..
2436      SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), ACT(node,tec,vintage,year,mode,time) ) =G=
2437      bound_activity_lo(node,tec,year,mode,time)
2438  * - SLACK_ACT_BOUND_LO(node,tec,year,mode,time)
2439  ;
2440   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 48
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2441  *----------------------------------------------------------------------------------------------------------------------*
2442  ***
2443  * Constraints on shares of technologies and commodities
2444  * -----------------------------------------------------
2445  * This section allows to include upper and lower bounds on the shares of modes used by a technology
2446  * or the shares of commodities produced or consumed by groups of technologies.
2447  *
2448  * Share constraints on activity by mode
2449  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2450  * Equation SHARES_MODE_UP
2451  * """""""""""""""""""""""
2452  * This constraint provides upper bounds of the share of the activity of one mode
2453  * of a technology. For example, it could limit the share of heat that can be produced
2454  * in a combined heat and electricity power plant.
2455  *
2456  *   .. math::
2457  *     ACT_{n^L,t,y^V,y,m,h^A}
2458  *     \leq share\_mode\_up_{s,n,y,m,h} \cdot
2459  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
2460  *
2461  ***
2462  $ONTEXT
       SHARE_CONSTRAINT_MODE_UP(shares,node,tec,mode,year,time)$(
          map_tec_act(node,tec,year,mode,time) AND
          share_mode_up(shares,node,tec,mode,year,time)
      )..
      * activity of mode to be constrained
          SUM(
              vintage$( map_tec_lifetime(node,tec,vintage,year) ),
              ACT(node,tec,vintage,year,mode,time)
          )
          =L=
          share_mode_up(shares,node,tec,mode,year,time) *
      * activity aggregated over all modes
          SUM(
              (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
              ACT(node,tec,vintage,year,mode2,time)
          ) ;
       
      ***
      * Equation SHARES_MODE_LO
      * """""""""""""""""""""""
      * This constraint provides lower bounds of the share of the activity of one mode of a technology.
      *
      *   .. math::
      *     ACT_{n^L,t,y^V,y,m,h^A}
      *     \geq share\_mode\_lo_{s,n,y,m,h} \cdot
      *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
      *
      ***
      SHARE_CONSTRAINT_MODE_LO(shares,node,tec,mode,year,time)$(
          map_tec_act(node,tec,year,mode,time) AND
          share_mode_lo(shares,node,tec,mode,year,time)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 49
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


      )..
      * activity of mode to be constrained
          SUM(
              vintage$( map_tec_lifetime(node,tec,vintage,year) ),
              ACT(node,tec,vintage,year,mode,time)
          )
          =G=
          share_mode_lo(shares,node,tec,mode,year,time) *
      * activity aggregated over all modes
          SUM(
              (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
              ACT(node,tec,vintage,year,mode2,time)
          ) ;
2507  $OFFTEXT
2508   
2509  ***
2510  * Share constraints on commodities
2511  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2512  * These constraints allow to set upper and lower bound on the quantity of commodities produced or consumed by a group
2513  * of technologies relative to the commodities produced or consumed by another group.
2514  *
2515  * The implementation is generic and flexible, so that any combination of commodities, levels, technologies and nodes
2516  * can be put in relation to any other combination.
2517  *
2518  * The notation :math:`S^{share}` represents the mapping set `map_shares_commodity_share` denoting all technology types,
2519  * nodes, commodities and levels to be included in the numerator, and :math:`S^{total}` is
2520  * the equivalent mapping set `map_shares_commodity_total` for the denominator.
2521  *
2522  * Equation SHARE_CONSTRAINT_COMMODITY_UP
2523  * """"""""""""""""""""""""""""""""""""""
2524  *   .. math::
2525  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
2526  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2527  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
2528  *      & \geq
2529  *        share\_commodity\_up_{s,n,y,h} \cdot
2530  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
2531  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2532  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
2533  *
2534  * This constraint is only active if :math:`share\_commodity\_up_{s,n,y,h}` is defined.
2535  ***
2536   
2537   SHARE_CONSTRAINT_COMMODITY_UP(shares,node_share,year,time)$( share_commodity_up(shares,node_share,year,time) )..
2538  * activity by type_tec_share technologies with map_shares_generic_share entries and a specific mode
2539      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
2540          ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) ) AND
2541          cat_tec(type_tec_share,tec) AND
2542          map_tec_act(location,tec,year,mode,time2) AND
2543          map_tec_lifetime(location,tec,vintage,year)
2544      ),
2545          (
2546              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 50
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2547              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2548          ) *
2549          duration_time_rel(time,time2) *
2550          ACT(location,tec,vintage,year,mode,time2)
2551      )
2552      =L=
2553      share_commodity_up(shares,node_share,year,time) * (
2554  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
2555      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
2556          ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) ) AND
2557          cat_tec(type_tec_total,tec) AND
2558          map_tec_act(location,tec,year,mode,time2) AND
2559          map_tec_lifetime(location,tec,vintage,year)
2560      ),
2561          (
2562              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
2563              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2564          ) *
2565          duration_time_rel(time,time2) *
2566          ACT(location,tec,vintage,year,mode,time2)
2567      ) ) ;
2568   
2569   
2570  ***
2571  * Equation SHARE_CONSTRAINT_COMMODITY_LO
2572  * """"""""""""""""""""""""""""""""""""""
2573  *   .. math::
2574  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
2575  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2576  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
2577  *      & \leq
2578  *        share\_commodity\_lo_{s,n,y,h} \cdot
2579  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
2580  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
2581  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
2582  *
2583  * This constraint is only active if :math:`share\_commodity\_lo_{s,n,y,h}` is defined.
2584  ***
2585  SHARE_CONSTRAINT_COMMODITY_LO(shares,node_share,year,time)$( share_commodity_lo(shares,node_share,year,time) )..
2586  * total input and output by `type_tec_share` technologies mapped to respective commodity, level and node
2587      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
2588           map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level)  AND
2589          cat_tec(type_tec_share,tec) AND
2590          map_tec_act(location,tec,year,mode,time2) AND
2591          map_tec_lifetime(location,tec,vintage,year)
2592      ),
2593          (
2594              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
2595              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2596          ) *
2597          duration_time_rel(time,time2) *
2598          ACT(location,tec,vintage,year,mode,time2)
2599      )
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 51
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2600      =G=
2601      share_commodity_lo(shares,node_share,year,time) * (
2602  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
2603      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
2604           map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level)  AND
2605          cat_tec(type_tec_total,tec) AND
2606          map_tec_act(location,tec,year,mode,time2) AND
2607          map_tec_lifetime(location,tec,vintage,year)
2608      ),
2609          (
2610              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
2611              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
2612          ) *
2613          duration_time_rel(time,time2) *
2614          ACT(location,tec,vintage,year,mode,time2)
2615      ) ) ;
2616   
2617  ***
2618  * .. _dynamic_constraints:
2619  *
2620  * Dynamic constraints on market penetration
2621  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2622  * The constraints in this section specify dynamic upper and lower bounds on new capacity and activity,
2623  * i.e., constraints on market penetration and rate of expansion or phase-out of a technology.
2624  *
2625  * The formulation directly includes the option for 'soft' relaxations of dynamic constraints
2626  * (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
2627  *
2628  * Equation NEW_CAPACITY_CONSTRAINT_UP
2629  * """""""""""""""""""""""""""""""""""
2630  * The level of new capacity additions cannot be greater than an initial value (compounded over the period duration),
2631  * annual growth of the existing 'capital stock', and a "soft" relaxation of the upper bound.
2632  *
2633  *  .. math::
2634  *     CAP\_NEW_{n,t,y}
2635  *         \leq & ~ initial\_new\_capacity\_up_{n,t,y}
2636  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} - 1 }
2637  *                        { growth\_new\_capacity\_up_{n,t,y} } \\
2638  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
2639  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} \\
2640  *              & + CAP\_NEW\_UP_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_up_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
2641  *         & \quad \forall \ t \ \in \ T^{INV}
2642  *
2643  * Here, :math:`|y|` is the number of years in period :math:`y`, i.e., :math:`duration\_period_{y}`.
2644  ***
2645  NEW_CAPACITY_CONSTRAINT_UP(node,inv_tec,year)$( map_tec(node,inv_tec,year)
2646          AND is_dynamic_new_capacity_up(node,inv_tec,year) )..
2647  * actual new capacity
2648      CAP_NEW(node,inv_tec,year) =L=
2649  * initial new capacity (compounded over the duration of the period)
2650          initial_new_capacity_up(node,inv_tec,year) * (
2651              ( ( POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
2652                  / growth_new_capacity_up(node,inv_tec,year) )$( growth_new_capacity_up(node,inv_tec,year) )
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 52
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2653                + ( duration_period(year) )$( NOT growth_new_capacity_up(node,inv_tec,year) )
2654              )
2655  * growth of 'capital stock' from previous period
2656          + SUM(year_all2$( seq_period(year_all2,year) ),
2657              CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
2658                + historical_new_capacity(node,inv_tec,year_all2) )
2659                # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2660              * POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) )
2661  * optional relaxation for calibration and debugging
2662  * + SLACK_CAP_NEW_DYNAMIC_UP(node,inv_tec,year)
2663  ;
2664   
2665  * GAMS implementation comment:
2666  * The sums in the constraint have to be over `year_all2` (not `year2`) to also get the dynamic effect from historical
2667  * new capacity. If one would sum over `year2`, periods prior to the first model year would be ignored.
2668   
2669  ***
2670  * Equation NEW_CAPACITY_CONSTRAINT_LO
2671  * """""""""""""""""""""""""""""""""""
2672  * This constraint gives dynamic lower bounds on new capacity.
2673  *
2674  *  .. math::
2675  *     CAP\_NEW_{n,t,y}
2676  *         \geq & - initial\_new\_capacity\_lo_{n,t,y}
2677  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} }
2678  *                        { growth\_new\_capacity\_lo_{n,t,y} } \\
2679  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
2680  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} \\
2681  *              & - CAP\_NEW\_LO_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_lo_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
2682  *         & \quad \forall \ t \ \in \ T^{INV}
2683  *
2684  ***
2685  NEW_CAPACITY_CONSTRAINT_LO(node,inv_tec,year)$( map_tec(node,inv_tec,year)
2686          AND is_dynamic_new_capacity_lo(node,inv_tec,year) )..
2687  * actual new capacity
2688      CAP_NEW(node,inv_tec,year) =G=
2689  * initial new capacity (compounded over the duration of the period)
2690          - initial_new_capacity_lo(node,inv_tec,year) * (
2691              ( ( POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
2692                  / growth_new_capacity_lo(node,inv_tec,year) )$( growth_new_capacity_lo(node,inv_tec,year) )
2693                + ( duration_period(year) )$( NOT growth_new_capacity_lo(node,inv_tec,year) )
2694              )
2695  * growth of 'capital stock' from previous period
2696          + SUM(year_all2$( seq_period(year_all2,year) ),
2697                  CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
2698                  + historical_new_capacity(node,inv_tec,year_all2)
2699                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2700              ) * POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) )
2701  * optional relaxation for calibration and debugging
2702  * - SLACK_CAP_NEW_DYNAMIC_LO(node,inv_tec,year)
2703  ;
2704   
2705   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 53
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2706  ***
2707  * Equation ACTIVITY_CONSTRAINT_UP
2708  * """""""""""""""""""""""""""""""
2709  * This constraint gives dynamic upper bounds on the market penetration of a technology activity.
2710  *
2711  *  .. math::
2712  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
2713  *         \leq & ~ initial\_activity\_up_{n,t,y,h}
2714  *             \cdot \frac{ \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 }
2715  *                        { growth\_activity\_up_{n,t,y,h} } \\
2716  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
2717  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
2718  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} \\
2719  *             & + ACT\_UP_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
2720  *
2721  ***
2722  ACTIVITY_CONSTRAINT_UP(node,tec,year,time)$( map_tec_time(node,tec,year,time)
2723          AND is_dynamic_activity_up(node,tec,year,time) )..
2724  * actual activity (summed over modes)
2725      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
2726              ACT(node,tec,vintage,year,mode,time) ) =L=
2727  * initial activity (compounded over the duration of the period)
2728          initial_activity_up(node,tec,year,time) * (
2729              ( ( POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
2730                  / growth_activity_up(node,tec,year,time) )$( growth_activity_up(node,tec,year,time) )
2731                + ( duration_period(year) )$( NOT growth_activity_up(node,tec,year,time) )
2732              )
2733  * growth of 'capital stock' from previous period
2734          + SUM((year_all2)$( seq_period(year_all2,year) ),
2735              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
2736                                   AND model_horizon(year_all2) ),
2737                          ACT(node,tec,vintage,year_all2,mode,time) )
2738                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
2739                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2740                  )
2741              * POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) )
2742  * optional relaxation for calibration and debugging
2743  * + SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
2744  ;
2745   
2746  ***
2747  * Equation ACTIVITY_CONSTRAINT_LO
2748  * """""""""""""""""""""""""""""""
2749  * This constraint gives dynamic lower bounds on the market penetration of a technology activity.
2750  *
2751  *  .. math::
2752  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
2753  *         \geq & - initial\_activity\_lo_{n,t,y,h}
2754  *             \cdot \frac{ \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 }
2755  *                        { growth\_activity\_lo_{n,t,y,h} } \\
2756  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
2757  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
2758  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} \\
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 54
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2759  *             & - ACT\_LO_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
2760  *
2761  ***
2762  ACTIVITY_CONSTRAINT_LO(node,tec,year,time)$( map_tec_time(node,tec,year,time)
2763          AND is_dynamic_activity_lo(node,tec,year,time) )..
2764  * actual activity (summed over modes)
2765      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
2766              ACT(node,tec,vintage,year,mode,time) ) =G=
2767  * initial activity (compounded over the duration of the period)
2768          - initial_activity_lo(node,tec,year,time) * (
2769              ( ( POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
2770                  / growth_activity_lo(node,tec,year,time) )$( growth_activity_lo(node,tec,year,time) )
2771                + ( duration_period(year) )$( NOT growth_activity_lo(node,tec,year,time) )
2772              )
2773  * growth of 'capital stock' from previous period
2774          + SUM((year_all2)$( seq_period(year_all2,year) ),
2775              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
2776                                   AND model_horizon(year_all2)),
2777                          ACT(node,tec,vintage,year_all2,mode,time) )
2778                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
2779                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
2780                  )
2781              * POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) )
2782  * optional relaxation for calibration and debugging
2783  * - SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
2784  ;
2785   
2786  *----------------------------------------------------------------------------------------------------------------------*
2787  ***
2788  * Emission section
2789  * ----------------
2790  *
2791  * Auxiliary variable for aggregate emissions
2792  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2793  *
2794  * Equation EMISSION_EQUIVALENCE
2795  * """""""""""""""""""""""""""""
2796  * This constraint simplifies the notation of emissions aggregated over different technology types
2797  * and the land-use model emulator. The formulation includes emissions from all sub-nodes :math:`n^L` of :math:`n`.
2798  *
2799  *   .. math::
2800  *      EMISS_{n,e,\widehat{t},y} =
2801  *          \sum_{n^L \in N(n)} \Bigg(
2802  *              \sum_{t \in T(\widehat{t}),y^V \leq y,m,h }
2803  *                  emission\_factor_{n^L,t,y^V,y,m,e} \cdot ACT_{n^L,t,y^V,y,m,h} \\
2804  *              + \sum_{s} \ land\_emission_{n^L,s,y,e} \cdot LAND_{n^L,s,y}
2805  *                   \text{ if } \widehat{t} \in \widehat{T}^{LAND} \Bigg)
2806  *
2807  ***
2808  EMISSION_EQUIVALENCE(node,emission,type_tec,year)..
2809      EMISS(node,emission,type_tec,year)
2810      =E=
2811      SUM(location$( map_node(node,location) ),
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 55
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2812  * emissions from technology activity
2813          SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
2814              AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
2815          emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
2816  * emissions from land use if 'type_tec' is included in the dynamic set 'type_tec_land'
2817  *        + SUM(land_scenario$( type_tec_land(type_tec) ),
2818  *            land_emission(location,land_scenario,year,emission) * LAND(location,land_scenario,year) )
2819        ) ;
2820   
2821  ***
2822  * Bound on emissions
2823  * ^^^^^^^^^^^^^^^^^^
2824  *
2825  * Equation EMISSION_CONSTRAINT
2826  * """"""""""""""""""""""""""""
2827  * This constraint enforces upper bounds on emissions (by emission type). For all bounds that include multiple periods,
2828  * the parameter :math:`bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}` is scaled to represent average annual
2829  * emissions over all years included in the year-set :math:`\widehat{y}`.
2830  *
2831  * The formulation includes historical emissions and allows to model constraints ranging over both the model horizon
2832  * and historical periods.
2833  *
2834  *   .. math::
2835  *      \frac{
2836  *          \sum_{y' \in Y(\widehat{y}), e \in E(\widehat{e})}
2837  *              \begin{array}{l}
2838  *                  duration\_period_{y'} \cdot emission\_scaling_{\widehat{e},e} \cdot \\
2839  *                  \Big( EMISS_{n,e,\widehat{t},y'} + \sum_{m} historical\_emission_{n,e,\widehat{t},y'} \Big)
2840  *              \end{array}
2841  *          }
2842  *        { \sum_{y' \in Y(\widehat{y})} duration\_period_{y'} }
2843  *      \leq bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}
2844  *
2845  ***
2846  EMISSION_CONSTRAINT(node,type_emission,type_tec,type_year)$is_bound_emission(node,type_emission,type_tec,type_year)..
2847      SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
2848          duration_period(year_all2) * emission_scaling(type_emission,emission) *
2849              ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
2850                  + historical_emission(node,emission,type_tec,year_all2) )
2851        )
2852      / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
2853      =L= bound_emission(node,type_emission,type_tec,type_year) ;
2854   
2855  * Land Activity constraint
2856  * ^^^^^^^^^^^^^^^^^^
2857  *
2858  * Equation CONST_LAND_ACT
2859  * """"""""""""""""""""""""""""
2860  * This constraint enforces the activity of crop technologies to be constant during for all sub-annual
2861  * time stepth within the same year period. This guarantees constant land allocation and variable
2862  * water uses and product yield according to the parametremization
2863   
2864  * now I hand type the cat_tec we refer to, in future we can define an ad hod set crop_tec(tec)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 56
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2865  CONST_LAND_ACT(node,tec,vintage,year,mode,time)$(cat_tec('agri_land_total',tec) AND crop_growing_time(tec,time) AND
2866      map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) )..
2867      ACT(node,tec,vintage,year,mode,time)$( NOT crop_gro_first_time(tec,time)) =e=
2868      SUM(time2$(seq_time(time2,time)), ACT(node,tec,vintage,year,mode,time2) )
2869      ;
2870   
2871  CONST_LAND_ACT_0(node,tec,vintage,year,mode,time)$(cat_tec('agri_land_total',tec) AND NOT crop_growing_time(tec,time) AND
2872      map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) )..
2873      ACT(node,tec,vintage,year,mode,time) =L= 1e-6
2874      ;
2875   
2876  *----------------------------------------------------------------------------------------------------------------------*
2877  ***
2878  * .. _section_of_generic_relations:
2879  *
2880   
2881  *----------------------------------------------------------------------------------------------------------------------*
2882  * model statements                                                                                                     *
2883  *----------------------------------------------------------------------------------------------------------------------*
2884   
2885  Model MESSAGE_LP /
2886      OBJECTIVE
2887      COST_ACCOUNTING_NODAL
2888      COMMODITY_BALANCE_GT
2889      COMMODITY_BALANCE_LT
2890      STOCKS_BALANCE
2891      STORAGE_BALANCE
2892      STORAGE_BOUND_LO
2893      STORAGE_BOUND_UP
2894      CAPACITY_CONSTRAINT
2895      CAPACITY_MAINTENANCE
2896      OPERATION_CONSTRAINT
2897      MIN_UTILIZATION_CONSTRAINT
2898      COMMODITY_USE_LEVEL
2899      FIRM_CAPACITY_CONSTRAINT
2900      FIRM_CAPACITY_PROVISION
2901      FIRM_CAPACITY_SHARE
2902      NEW_CAPACITY_BOUND_UP
2903      NEW_CAPACITY_BOUND_LO
2904      TOTAL_CAPACITY_BOUND_UP
2905      TOTAL_CAPACITY_BOUND_LO
2906      ACTIVITY_BOUND_UP
2907      ACTIVITY_BOUND_LO
2908      NEW_CAPACITY_CONSTRAINT_UP
2909      NEW_CAPACITY_CONSTRAINT_LO
2910      ACTIVITY_CONSTRAINT_UP
2911      ACTIVITY_CONSTRAINT_LO
2912      EMISSION_EQUIVALENCE
2913      EMISSION_CONSTRAINT
2914      SHARE_CONSTRAINT_COMMODITY_LO
2915      SHARE_CONSTRAINT_COMMODITY_UP
2916      CONST_LAND_ACT
2917  *    CONST_LAND_ACT_0
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 57
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2918  / ;
2919   
2920  MESSAGE_LP.holdfixed = 1 ;
2921  MESSAGE_LP.optfile = 1 ;
2922  MESSAGE_LP.optcr = 0 ;
2923   
2924   
2925   
2926   
2927   
2928  *----------------------------------------------------------------------------------------------------------------------*
2929  * solve statements (including the loop for myopic or rolling-horizon optimization)                                     *
2930  *----------------------------------------------------------------------------------------------------------------------*
2931   
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_solve.gms
2932  $INCLUDE MESSAGE/model_solve.gms
2933  ***
2934  * Solve statement workflow
2935  * ========================
2936  * This page is generated from the auto-documentation in ``MESSAGE/model_solve.gms``.
2937  *
2938  * This part of the code includes the perfect-foresight, myopic and rolling-horizon model solve statements
2939  * including the required accounting of investment costs beyond the model horizon.
2940  ***
2941   
2942  ***
2943  * Perfect-foresight model
2944  * ~~~~~~~~~~~~~~~~~~~~~~~
2945  * For the perfect foresight version of |MESSAGEix|, include all years in the model horizon and solve the entire model.
2946  * This is the standard option; the GAMS global variable ``%foresight%=0`` by default.
2947  *
2948  * .. math::
2949  *    \min_x OBJ = \sum_{y \in Y} OBJ_y(x_y)
2950  ***
2951   
2952  * reset year in case it was set by MACRO to include the base year before
2953      year(year_all) = no ;
2954  * include all model periods in the optimization horizon (excluding historical periods prior to 'first_period')
2955      year(year_all)$( model_horizon(year_all) ) = yes ;
2956   
2957  * write a status update to the log file, solve the model
2958      put_utility 'log' /'+++ Solve the perfect-foresight version of MESSAGEix +++ ' ;
2959      Solve MESSAGE_LP using LP minimizing OBJ ;
2960   
2961  * write model status summary
2962      status('perfect_foresight','modelstat') = MESSAGE_LP.modelstat ;
2963      status('perfect_foresight','solvestat') = MESSAGE_LP.solvestat ;
2964      status('perfect_foresight','resUsd')    = MESSAGE_LP.resUsd ;
2965      status('perfect_foresight','objEst')    = MESSAGE_LP.objEst ;
2966      status('perfect_foresight','objVal')    = MESSAGE_LP.objVal ;
2967   
2968  * write an error message if model did not solve to optimality
2969      IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 58
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2970          put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
2971          ABORT "MESSAGEix did not solve to optimality!"
2972      ) ;
2973   
2974  * rescale the dual of the emission constraint to account that the constraint is defined on the average year, not total
2975  EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)$(
2976          EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) ) =
2977      EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)
2978          / SUM(year$( cat_year(type_year,year) ), duration_period(year) )
2979          * SUM(year$( map_first_period(type_year,year) ), duration_period(year) / df_period(year) * df_year(year) );
****                                      $140                                                 $141            $141
**** LINE     47 INCLUDE     C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_solve.gms
**** LINE     65 INPUT       C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE_run.gms
2980   
2981  * assign auxiliary variables DEMAND, PRICE_COMMODITY and PRICE_EMISSION for integration with MACRO and reporting
2982      DEMAND.l(node,commodity,level,year,time) = demand_fixed(node,commodity,level,year,time) ;
2983      PRICE_COMMODITY.l(node,commodity,level,year,time) =
2984          ( COMMODITY_BALANCE_GT.m(node,commodity,level,year,time) + COMMODITY_BALANCE_LT.m(node,commodity,level,year,time) )
2985              / df_period(year) ;
2986      PRICE_EMISSION.l(node,type_emission,type_tec,year)$( SUM(type_year$( cat_year(type_year,year) ), 1 ) ) =
2987          SMAX(type_year$( cat_year(type_year,year) ),
2988                 - EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) )
2989              / df_year(year) ;
2990      PRICE_EMISSION.l(node,type_emission,type_tec,year)$(
2991          PRICE_EMISSION.l(node,type_emission,type_tec,year) = - inf ) = 0 ;
2992   
2993  *----------------------------------------------------------------------------------------------------------------------*
2994  * post-processing and export to gdx                                                                                    *
2995  *----------------------------------------------------------------------------------------------------------------------*
2996   
2997  * calculation of commodity import costs by node, commodity and year
2998  * import_cost(node2, commodity, year) =
2999  *          SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
3000  *            AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
3001  * import into node2 from other nodes
3002  *          input(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
3003  *        * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
3004  *        * COMMODITY_BALANCE.M(node,commodity,level,year,time) / discountfactor(year) )
3005  *;
3006   
3007  * calculation of commodity export costs by node, commodity and year
3008  *export_cost(node2, commodity, year) =
3009  *          SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
3010  *            AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
3011  * export from node2 to other market
3012  *          output(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
3013  *        * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
3014  *        * COMMODITY_BALANCE.M(node,commodity,level,year,time) / discountfactor(year) )
3015  *;
3016   
3017  * net commodity trade costs by node and year
3018  *trade_cost(node2, year) = SUM(commodity, import_cost(node2, commodity, year) - export_cost(node2, commodity, year)) ;
3019   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 59
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3020  * reporting of net total costs (excluding emission taxes) as result of MESSAGE run
3021  *COST_NODAL_NET.L(location,year) =
3022  *    COST_NODAL.L(location,year) + trade_cost(location,year)
3023  * subtract emission taxes applied at any higher nodal level (via map_node set)
3024  *    - sum((type_emission,emission,type_tec,type_year,node)$( emission_scaling(type_emission,emission)
3025  *            AND map_node(node,location) AND cat_year(type_year,year) ),
3026  *        emission_scaling(type_emission,emission) * tax_emission(node,type_emission,type_tec,type_year)
3027  *        * EMISS.L(location,emission,type_tec,year) )
3028  *;
3029   
3030  * include MESSAGE reporting
INCLUDE    C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/reporting.gms
3031  $INCLUDE MESSAGE/reporting.gms
3032  ***
3033  * Standard output reports
3034  * =======================
3035  * This page is generated from the auto-documentation in ``MESSAGE/reporting.gms``.
3036  *
3037  * This part of the code contains the definitions and scripts for a number of standard output reports.
3038  * These default reports will be created after every MESSAGE run.
3039  ***
3040   
3041  *----------------------------------------------------------------------------------------------------------------------*
3042  * The following parts are quick-and-dirty reporting 'flags'
3043  *----------------------------------------------------------------------------------------------------------------------*
3044   
3045  Set
3046      report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)
3047      report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)
3048  ;
3049   
3050  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time) = no ;
3051  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)$(
3052      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
3053      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9) ) = yes ;
3054   
3055  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time) = no ;
3056  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)$(
3057      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
3058      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) ) = yes ;
3059   
3060   
3061  * dump all input data, processed data and results to a gdx file
3062  execute_unload "output\MSGoutput_baseline.gdx"
3063   
3064  put_utility 'log' / /"+++ End of MESSAGEix (stand-alone) run - have a nice day! +++ " ;
3065   
3066  *----------------------------------------------------------------------------------------------------------------------*
3067  * end of file - have a nice day!                                                                                       *
3068  *----------------------------------------------------------------------------------------------------------------------*
3069   
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 60
The MESSAGEix Integrated Assessment Model
Error Messages


140  Unknown symbol
141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.

**** 3 ERROR(S)   0 WARNING(S)
GAMS 24.9.1  r63795 Released Aug 30, 2017 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                05/20/20 11:22:49 Page 61
The MESSAGEix Integrated Assessment Model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE_run.gms
     2       58 INCLUDE        1      58  .C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_setup.gms
     3       72 IF EXIST       2      14  .C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx
     4      124 INCLUDE        2      66  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/auxiliary_settings.gms
     5      164 INCLUDE        2      69  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\version.gms
     6      183 INCLUDE        2      70  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/version_check.gms
     7      191 GDXIN          6       8  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx
     8      203 INCLUDE        2      73  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/sets_maps_def.gms
     9      561 INCLUDE        2      74  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/parameter_def.gms
    10     1179 INCLUDE        2      77  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/data_load.gms
    11     1188 GDXIN         10       9  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\data\MSGdata_baseline0_EF.F_IT.T_EM.F_S6.F_S7.F.gdx
    12     1238 INCLUDE       10      59  ...C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\includes/period_parameter_assignment.gms
    13     1452 INCLUDE        2      80  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/scaling_investment_costs.gms
    14     1631 INCLUDE        2      86  ..C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_core.gms
    15     2932 INCLUDE        1      65  .C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/model_solve.gms
    16     3031 INCLUDE        1     105  .C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE/reporting.gms


COMPILATION TIME     =        0.078 SECONDS     18 MB  24.9.1 r63795 WEX-WEI


USER: Small MUD - 5 User License Generic             S160905:1044AO-GEN
      IIASA, Information and Communication Technologies Dep.      DC216
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE_run.gms
Output     C:\Users\vinca\Documents\Github\NEST\MESSAGEix\model\MESSAGE_run.lst

**** USER ERROR(S) ENCOUNTERED
